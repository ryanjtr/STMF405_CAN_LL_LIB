
STM32F405_CAN_LL_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08003bac  08003bac  00004bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d48  08003d48  00005064  2**0
                  CONTENTS
  4 .ARM          00000008  08003d48  08003d48  00004d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d50  08003d50  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d50  08003d50  00004d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d54  08003d54  00004d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003d58  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005064  2**0
                  CONTENTS
 10 .bss          00000284  20000064  20000064  00005064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  00005064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2fd  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c42  00000000  00000000  0000f391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  00010fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000735  00000000  00000000  00011960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207f6  00000000  00000000  00012095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b59a  00000000  00000000  0003288b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3c87  00000000  00000000  0003de25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00101aac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b60  00000000  00000000  00101af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00104650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b94 	.word	0x08003b94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08003b94 	.word	0x08003b94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <__NVIC_GetPriorityGrouping+0x18>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	f003 0307 	and.w	r3, r3, #7
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	@ (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db0a      	blt.n	80005f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	490c      	ldr	r1, [pc, #48]	@ (8000614 <__NVIC_SetPriority+0x4c>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f0:	e00a      	b.n	8000608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4908      	ldr	r1, [pc, #32]	@ (8000618 <__NVIC_SetPriority+0x50>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	3b04      	subs	r3, #4
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	440b      	add	r3, r1
 8000606:	761a      	strb	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800061c:	b480      	push	{r7}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	f1c3 0307 	rsb	r3, r3, #7
 8000636:	2b04      	cmp	r3, #4
 8000638:	bf28      	it	cs
 800063a:	2304      	movcs	r3, #4
 800063c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	3304      	adds	r3, #4
 8000642:	2b06      	cmp	r3, #6
 8000644:	d902      	bls.n	800064c <NVIC_EncodePriority+0x30>
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3b03      	subs	r3, #3
 800064a:	e000      	b.n	800064e <NVIC_EncodePriority+0x32>
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	f04f 32ff 	mov.w	r2, #4294967295
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	43da      	mvns	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	401a      	ands	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000664:	f04f 31ff 	mov.w	r1, #4294967295
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43d9      	mvns	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	4313      	orrs	r3, r2
         );
}
 8000676:	4618      	mov	r0, r3
 8000678:	3724      	adds	r7, #36	@ 0x24
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <LL_RCC_HSE_Enable+0x1c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <LL_RCC_HSE_Enable+0x1c>)
 800068e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <LL_RCC_HSE_IsReady+0x24>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80006b4:	bf0c      	ite	eq
 80006b6:	2301      	moveq	r3, #1
 80006b8:	2300      	movne	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <LL_RCC_SetSysClkSource+0x24>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f023 0203 	bic.w	r2, r3, #3
 80006dc:	4904      	ldr	r1, [pc, #16]	@ (80006f0 <LL_RCC_SetSysClkSource+0x24>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	608b      	str	r3, [r1, #8]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40023800 	.word	0x40023800

080006f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006f8:	4b04      	ldr	r3, [pc, #16]	@ (800070c <LL_RCC_GetSysClkSource+0x18>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	f003 030c 	and.w	r3, r3, #12
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <LL_RCC_SetAHBPrescaler+0x24>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000720:	4904      	ldr	r1, [pc, #16]	@ (8000734 <LL_RCC_SetAHBPrescaler+0x24>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	608b      	str	r3, [r1, #8]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	40023800 	.word	0x40023800

08000738 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000748:	4904      	ldr	r1, [pc, #16]	@ (800075c <LL_RCC_SetAPB1Prescaler+0x24>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	608b      	str	r3, [r1, #8]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40023800 	.word	0x40023800

08000760 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <LL_RCC_SetAPB2Prescaler+0x24>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000770:	4904      	ldr	r1, [pc, #16]	@ (8000784 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4313      	orrs	r3, r2
 8000776:	608b      	str	r3, [r1, #8]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	40023800 	.word	0x40023800

08000788 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <LL_RCC_PLL_Enable+0x1c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <LL_RCC_PLL_Enable+0x1c>)
 8000792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <LL_RCC_PLL_IsReady+0x24>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80007b8:	bf0c      	ite	eq
 80007ba:	2301      	moveq	r3, #1
 80007bc:	2300      	movne	r3, #0
 80007be:	b2db      	uxtb	r3, r3
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80007e4:	4013      	ands	r3, r2
 80007e6:	68f9      	ldr	r1, [r7, #12]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	4311      	orrs	r1, r2
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	0192      	lsls	r2, r2, #6
 80007f0:	430a      	orrs	r2, r1
 80007f2:	4908      	ldr	r1, [pc, #32]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007f4:	4313      	orrs	r3, r2
 80007f6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000800:	4904      	ldr	r1, [pc, #16]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	4313      	orrs	r3, r2
 8000806:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	40023800 	.word	0x40023800
 8000818:	ffbf8000 	.word	0xffbf8000

0800081c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000828:	4907      	ldr	r1, [pc, #28]	@ (8000848 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4313      	orrs	r3, r2
 800082e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4013      	ands	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40023800 	.word	0x40023800

0800084c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <LL_FLASH_SetLatency+0x24>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f023 0207 	bic.w	r2, r3, #7
 800085c:	4904      	ldr	r1, [pc, #16]	@ (8000870 <LL_FLASH_SetLatency+0x24>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4313      	orrs	r3, r2
 8000862:	600b      	str	r3, [r1, #0]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	40023c00 	.word	0x40023c00

08000874 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <LL_FLASH_GetLatency+0x18>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f003 0307 	and.w	r3, r3, #7
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023c00 	.word	0x40023c00

08000890 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80008a0:	4904      	ldr	r1, [pc, #16]	@ (80008b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	600b      	str	r3, [r1, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40007000 	.word	0x40007000

080008b8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <LL_PWR_IsActiveFlag_VOS+0x24>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008c8:	bf0c      	ite	eq
 80008ca:	2301      	moveq	r3, #1
 80008cc:	2300      	movne	r3, #0
 80008ce:	b2db      	uxtb	r3, r3
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40007000 	.word	0x40007000

080008e0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	683a      	ldr	r2, [r7, #0]
 80008ee:	619a      	str	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	041a      	lsls	r2, r3, #16
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	619a      	str	r2, [r3, #24]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800091a:	b480      	push	{r7}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	4013      	ands	r3, r2
 8000930:	041a      	lsls	r2, r3, #16
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	43d9      	mvns	r1, r3
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	400b      	ands	r3, r1
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	619a      	str	r2, [r3, #24]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fc1a 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f912 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 f98a 	bl	8000c70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800095c:	f000 f95e 	bl	8000c1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  hcan1.Instance = _CAN1;
 8000960:	4b7a      	ldr	r3, [pc, #488]	@ (8000b4c <main+0x200>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]

  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_5);
 8000966:	2120      	movs	r1, #32
 8000968:	4879      	ldr	r0, [pc, #484]	@ (8000b50 <main+0x204>)
 800096a:	f7ff ffb9 	bl	80008e0 <LL_GPIO_SetOutputPin>

  if (LL_CAN_GPIO_Init(&hcan1) == ERROR)
 800096e:	4877      	ldr	r0, [pc, #476]	@ (8000b4c <main+0x200>)
 8000970:	f001 fd32 	bl	80023d8 <LL_CAN_GPIO_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d10b      	bne.n	8000992 <main+0x46>
  {
    sprintf(msg, "GPIO initialization fail\n");
 800097a:	4976      	ldr	r1, [pc, #472]	@ (8000b54 <main+0x208>)
 800097c:	4876      	ldr	r0, [pc, #472]	@ (8000b58 <main+0x20c>)
 800097e:	f002 fc71 	bl	8003264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, 50, 1000);
 8000982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000986:	2232      	movs	r2, #50	@ 0x32
 8000988:	4973      	ldr	r1, [pc, #460]	@ (8000b58 <main+0x20c>)
 800098a:	4874      	ldr	r0, [pc, #464]	@ (8000b5c <main+0x210>)
 800098c:	f000 ff74 	bl	8001878 <HAL_UART_Transmit>
 8000990:	e00a      	b.n	80009a8 <main+0x5c>
  }
  else
  {
    sprintf(msg, "GPIO initialization successfully\n");
 8000992:	4973      	ldr	r1, [pc, #460]	@ (8000b60 <main+0x214>)
 8000994:	4870      	ldr	r0, [pc, #448]	@ (8000b58 <main+0x20c>)
 8000996:	f002 fc65 	bl	8003264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, 50, 1000);
 800099a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099e:	2232      	movs	r2, #50	@ 0x32
 80009a0:	496d      	ldr	r1, [pc, #436]	@ (8000b58 <main+0x20c>)
 80009a2:	486e      	ldr	r0, [pc, #440]	@ (8000b5c <main+0x210>)
 80009a4:	f000 ff68 	bl	8001878 <HAL_UART_Transmit>
  }

  //  // Config NVIC
  NVIC_SetPriority(CAN1_TX_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 80009a8:	f7ff fde2 	bl	8000570 <__NVIC_GetPriorityGrouping>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2200      	movs	r2, #0
 80009b0:	210f      	movs	r1, #15
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe32 	bl	800061c <NVIC_EncodePriority>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4619      	mov	r1, r3
 80009bc:	2013      	movs	r0, #19
 80009be:	f7ff fe03 	bl	80005c8 <__NVIC_SetPriority>
  NVIC_SetPriority(CAN1_RX0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 80009c2:	f7ff fdd5 	bl	8000570 <__NVIC_GetPriorityGrouping>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2200      	movs	r2, #0
 80009ca:	210f      	movs	r1, #15
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe25 	bl	800061c <NVIC_EncodePriority>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4619      	mov	r1, r3
 80009d6:	2014      	movs	r0, #20
 80009d8:	f7ff fdf6 	bl	80005c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009dc:	2014      	movs	r0, #20
 80009de:	f7ff fdd5 	bl	800058c <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(CAN1_TX_IRQn);
 80009e2:	2013      	movs	r0, #19
 80009e4:	f7ff fdd2 	bl	800058c <__NVIC_EnableIRQ>

  // Enable interrupt
  LL_CAN_ActivateInterrupt(&hcan1, _CAN_IT_RX_FIFO0_MSG_PENDING_Pos | _CAN_IT_TX_MAILBOX_EMPTY_Pos);
 80009e8:	2103      	movs	r1, #3
 80009ea:	4858      	ldr	r0, [pc, #352]	@ (8000b4c <main+0x200>)
 80009ec:	f002 f9f2 	bl	8002dd4 <LL_CAN_ActivateInterrupt>

  // Set flag to
  hcan1.Init.Prescaler = 2;
 80009f0:	4b56      	ldr	r3, [pc, #344]	@ (8000b4c <main+0x200>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	605a      	str	r2, [r3, #4]
  hcan1.Init.SyncJumpWidth = _CAN_SJW_1TQ;
 80009f6:	4b55      	ldr	r3, [pc, #340]	@ (8000b4c <main+0x200>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hcan1.Init.TimeSeg1 = _CAN_BS1_10TQ;
 80009fc:	4b53      	ldr	r3, [pc, #332]	@ (8000b4c <main+0x200>)
 80009fe:	2209      	movs	r2, #9
 8000a00:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg2 = _CAN_BS2_1TQ;
 8000a02:	4b52      	ldr	r3, [pc, #328]	@ (8000b4c <main+0x200>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hcan1.Init.Mode = _NORMAL_MODE;
 8000a08:	4b50      	ldr	r3, [pc, #320]	@ (8000b4c <main+0x200>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	751a      	strb	r2, [r3, #20]
  hcan1.Init.status.AutoBusOff = DISABLE;
 8000a0e:	4a4f      	ldr	r2, [pc, #316]	@ (8000b4c <main+0x200>)
 8000a10:	7d53      	ldrb	r3, [r2, #21]
 8000a12:	f36f 0341 	bfc	r3, #1, #1
 8000a16:	7553      	strb	r3, [r2, #21]
  hcan1.Init.status.AutoRetransmission = ENABLE;
 8000a18:	4a4c      	ldr	r2, [pc, #304]	@ (8000b4c <main+0x200>)
 8000a1a:	7d53      	ldrb	r3, [r2, #21]
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	7553      	strb	r3, [r2, #21]
  hcan1.Init.status.AutoWakeUp = DISABLE;
 8000a22:	4a4a      	ldr	r2, [pc, #296]	@ (8000b4c <main+0x200>)
 8000a24:	7d53      	ldrb	r3, [r2, #21]
 8000a26:	f36f 0382 	bfc	r3, #2, #1
 8000a2a:	7553      	strb	r3, [r2, #21]
  hcan1.Init.status.ReceiveFifoLocked = DISABLE;
 8000a2c:	4a47      	ldr	r2, [pc, #284]	@ (8000b4c <main+0x200>)
 8000a2e:	7d53      	ldrb	r3, [r2, #21]
 8000a30:	f36f 1304 	bfc	r3, #4, #1
 8000a34:	7553      	strb	r3, [r2, #21]
  hcan1.Init.status.TimeTriggeredMode = DISABLE;
 8000a36:	4a45      	ldr	r2, [pc, #276]	@ (8000b4c <main+0x200>)
 8000a38:	7d53      	ldrb	r3, [r2, #21]
 8000a3a:	f36f 0300 	bfc	r3, #0, #1
 8000a3e:	7553      	strb	r3, [r2, #21]
  hcan1.Init.status.TransmitFifoPriority = DISABLE;
 8000a40:	4a42      	ldr	r2, [pc, #264]	@ (8000b4c <main+0x200>)
 8000a42:	7d53      	ldrb	r3, [r2, #21]
 8000a44:	f36f 1345 	bfc	r3, #5, #1
 8000a48:	7553      	strb	r3, [r2, #21]

  if (LL_CAN_Init(&hcan1) == ERROR)
 8000a4a:	4840      	ldr	r0, [pc, #256]	@ (8000b4c <main+0x200>)
 8000a4c:	f001 fd2c 	bl	80024a8 <LL_CAN_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d10f      	bne.n	8000a76 <main+0x12a>
  {
    sprintf(msg, "Can initialization fail\n");
 8000a56:	4943      	ldr	r1, [pc, #268]	@ (8000b64 <main+0x218>)
 8000a58:	483f      	ldr	r0, [pc, #252]	@ (8000b58 <main+0x20c>)
 8000a5a:	f002 fc03 	bl	8003264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000a5e:	483e      	ldr	r0, [pc, #248]	@ (8000b58 <main+0x20c>)
 8000a60:	f7ff fbb6 	bl	80001d0 <strlen>
 8000a64:	4603      	mov	r3, r0
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6c:	493a      	ldr	r1, [pc, #232]	@ (8000b58 <main+0x20c>)
 8000a6e:	483b      	ldr	r0, [pc, #236]	@ (8000b5c <main+0x210>)
 8000a70:	f000 ff02 	bl	8001878 <HAL_UART_Transmit>
 8000a74:	e00e      	b.n	8000a94 <main+0x148>
  }
  else
  {
    sprintf(msg, "CAN initialization successfully\n");
 8000a76:	493c      	ldr	r1, [pc, #240]	@ (8000b68 <main+0x21c>)
 8000a78:	4837      	ldr	r0, [pc, #220]	@ (8000b58 <main+0x20c>)
 8000a7a:	f002 fbf3 	bl	8003264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000a7e:	4836      	ldr	r0, [pc, #216]	@ (8000b58 <main+0x20c>)
 8000a80:	f7ff fba6 	bl	80001d0 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8c:	4932      	ldr	r1, [pc, #200]	@ (8000b58 <main+0x20c>)
 8000a8e:	4833      	ldr	r0, [pc, #204]	@ (8000b5c <main+0x210>)
 8000a90:	f000 fef2 	bl	8001878 <HAL_UART_Transmit>
  }

  // Set up config filter
  hfilter1.FilterActivation = _CAN_FILTER_ENABLE;
 8000a94:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <main+0x220>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	621a      	str	r2, [r3, #32]
  hfilter1.FilterBank = 0;
 8000a9a:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <main+0x220>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hfilter1.FilterFIFOAssignment = _CAN_FILTER_FIFO0;
 8000aa0:	4b32      	ldr	r3, [pc, #200]	@ (8000b6c <main+0x220>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hfilter1.FilterIdHigh = 0;
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <main+0x220>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
  hfilter1.FilterIdLow = 0;
 8000aac:	4b2f      	ldr	r3, [pc, #188]	@ (8000b6c <main+0x220>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
  hfilter1.FilterMaskIdHigh = 0;
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <main+0x220>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hfilter1.FilterMaskIdLow = 0;
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <main+0x220>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hfilter1.FilterMode = _CAN_FILTERMODE_IDMASK;
 8000abe:	4b2b      	ldr	r3, [pc, #172]	@ (8000b6c <main+0x220>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hfilter1.FilterScale = _CAN_FILTERSCALE_32BIT;
 8000ac4:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <main+0x220>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	61da      	str	r2, [r3, #28]
  LL_CAN_ConfigFilter(&hcan1, &hfilter1);
 8000aca:	4928      	ldr	r1, [pc, #160]	@ (8000b6c <main+0x220>)
 8000acc:	481f      	ldr	r0, [pc, #124]	@ (8000b4c <main+0x200>)
 8000ace:	f001 fe33 	bl	8002738 <LL_CAN_ConfigFilter>

  // Enable interrupt
  LL_CAN_ActivateInterrupt(&hcan1, _CAN_IT_RX_FIFO0_MSG_PENDING_Pos | _CAN_IT_TX_MAILBOX_EMPTY_Pos);
 8000ad2:	2103      	movs	r1, #3
 8000ad4:	481d      	ldr	r0, [pc, #116]	@ (8000b4c <main+0x200>)
 8000ad6:	f002 f97d 	bl	8002dd4 <LL_CAN_ActivateInterrupt>

  // Start Can
  if (LL_CAN_Start(&hcan1) == ERROR)
 8000ada:	481c      	ldr	r0, [pc, #112]	@ (8000b4c <main+0x200>)
 8000adc:	f001 ff38 	bl	8002950 <LL_CAN_Start>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d10f      	bne.n	8000b06 <main+0x1ba>
  {
    sprintf(msg, "Can start fail\n");
 8000ae6:	4922      	ldr	r1, [pc, #136]	@ (8000b70 <main+0x224>)
 8000ae8:	481b      	ldr	r0, [pc, #108]	@ (8000b58 <main+0x20c>)
 8000aea:	f002 fbbb 	bl	8003264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000aee:	481a      	ldr	r0, [pc, #104]	@ (8000b58 <main+0x20c>)
 8000af0:	f7ff fb6e 	bl	80001d0 <strlen>
 8000af4:	4603      	mov	r3, r0
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afc:	4916      	ldr	r1, [pc, #88]	@ (8000b58 <main+0x20c>)
 8000afe:	4817      	ldr	r0, [pc, #92]	@ (8000b5c <main+0x210>)
 8000b00:	f000 feba 	bl	8001878 <HAL_UART_Transmit>
 8000b04:	e00e      	b.n	8000b24 <main+0x1d8>
  }
  else
  {
    sprintf(msg, "CAN start successfully\n");
 8000b06:	491b      	ldr	r1, [pc, #108]	@ (8000b74 <main+0x228>)
 8000b08:	4813      	ldr	r0, [pc, #76]	@ (8000b58 <main+0x20c>)
 8000b0a:	f002 fbab 	bl	8003264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000b0e:	4812      	ldr	r0, [pc, #72]	@ (8000b58 <main+0x20c>)
 8000b10:	f7ff fb5e 	bl	80001d0 <strlen>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1c:	490e      	ldr	r1, [pc, #56]	@ (8000b58 <main+0x20c>)
 8000b1e:	480f      	ldr	r0, [pc, #60]	@ (8000b5c <main+0x210>)
 8000b20:	f000 feaa 	bl	8001878 <HAL_UART_Transmit>
  }

  Txheader.StdId = 135;
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <main+0x22c>)
 8000b26:	2287      	movs	r2, #135	@ 0x87
 8000b28:	601a      	str	r2, [r3, #0]
  Txheader._DLC = 6;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <main+0x22c>)
 8000b2c:	2206      	movs	r2, #6
 8000b2e:	611a      	str	r2, [r3, #16]
  Txheader._RTR = _CAN_RTR_DATA;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <main+0x22c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  Txheader._IDE = _CAN_ID_STD;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <main+0x22c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  Txheader.TransmitGlobalTime = DISABLE;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <main+0x22c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	751a      	strb	r2, [r3, #20]

  /* USER CODE END 2 */

  Can_Tx();
 8000b42:	f000 f8d7 	bl	8000cf4 <Can_Tx>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b46:	bf00      	nop
 8000b48:	e7fd      	b.n	8000b46 <main+0x1fa>
 8000b4a:	bf00      	nop
 8000b4c:	200000c8 	.word	0x200000c8
 8000b50:	40020800 	.word	0x40020800
 8000b54:	08003bac 	.word	0x08003bac
 8000b58:	20000148 	.word	0x20000148
 8000b5c:	20000080 	.word	0x20000080
 8000b60:	08003bc8 	.word	0x08003bc8
 8000b64:	08003bec 	.word	0x08003bec
 8000b68:	08003c08 	.word	0x08003c08
 8000b6c:	200000e4 	.word	0x200000e4
 8000b70:	08003c2c 	.word	0x08003c2c
 8000b74:	08003c3c 	.word	0x08003c3c
 8000b78:	2000010c 	.word	0x2000010c

08000b7c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f7ff fe63 	bl	800084c <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8000b86:	bf00      	nop
 8000b88:	f7ff fe74 	bl	8000874 <LL_FLASH_GetLatency>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d1fa      	bne.n	8000b88 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000b92:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b96:	f7ff fe7b 	bl	8000890 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000b9a:	f7ff fd73 	bl	8000684 <LL_RCC_HSE_Enable>

  /* Wait till HSE is ready */
  while (LL_RCC_HSE_IsReady() != 1)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff fd80 	bl	80006a4 <LL_RCC_HSE_IsReady>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d1fa      	bne.n	8000ba0 <SystemClock_Config+0x24>
  {
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 192, LL_RCC_PLLP_DIV_4);
 8000baa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bae:	22c0      	movs	r2, #192	@ 0xc0
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000bb6:	f7ff fe0b 	bl	80007d0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000bba:	f7ff fde5 	bl	8000788 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1)
 8000bbe:	bf00      	nop
 8000bc0:	f7ff fdf2 	bl	80007a8 <LL_RCC_PLL_IsReady>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d1fa      	bne.n	8000bc0 <SystemClock_Config+0x44>
  {
  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000bca:	bf00      	nop
 8000bcc:	f7ff fe74 	bl	80008b8 <LL_PWR_IsActiveFlag_VOS>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0fa      	beq.n	8000bcc <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000bd6:	2080      	movs	r0, #128	@ 0x80
 8000bd8:	f7ff fd9a 	bl	8000710 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000bdc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000be0:	f7ff fdaa 	bl	8000738 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fdbb 	bl	8000760 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000bea:	2002      	movs	r0, #2
 8000bec:	f7ff fd6e 	bl	80006cc <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000bf0:	bf00      	nop
 8000bf2:	f7ff fd7f 	bl	80006f4 <LL_RCC_GetSysClkSource>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d1fa      	bne.n	8000bf2 <SystemClock_Config+0x76>
  {
  }
  LL_SetSystemCoreClock(48000000);
 8000bfc:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <SystemClock_Config+0x9c>)
 8000bfe:	f001 fbc3 	bl	8002388 <LL_SetSystemCoreClock>

  /* Update the time base */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c02:	200f      	movs	r0, #15
 8000c04:	f000 fae2 	bl	80011cc <HAL_InitTick>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c0e:	f000 f97b 	bl	8000f08 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	02dc6c00 	.word	0x02dc6c00

08000c1c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	@ (8000c6c <MX_USART2_UART_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c54:	f000 fdc0 	bl	80017d8 <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c5e:	f000 f953 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000080 	.word	0x20000080
 8000c6c:	40004400 	.word	0x40004400

08000c70 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000c86:	2080      	movs	r0, #128	@ 0x80
 8000c88:	f7ff fdc8 	bl	800081c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff fdc5 	bl	800081c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000c92:	2004      	movs	r0, #4
 8000c94:	f7ff fdc2 	bl	800081c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Anti_WDG_GPIO_Port, Anti_WDG_Pin);
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4814      	ldr	r0, [pc, #80]	@ (8000cec <MX_GPIO_Init+0x7c>)
 8000c9c:	f7ff fe2e 	bl	80008fc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	4813      	ldr	r0, [pc, #76]	@ (8000cf0 <MX_GPIO_Init+0x80>)
 8000ca4:	f7ff fe2a 	bl	80008fc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Anti_WDG_Pin;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cac:	2301      	movs	r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Anti_WDG_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480a      	ldr	r0, [pc, #40]	@ (8000cec <MX_GPIO_Init+0x7c>)
 8000cc2:	f001 fae0 	bl	8002286 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8000cc6:	2320      	movs	r3, #32
 8000cc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_GPIO_Init+0x80>)
 8000ce0:	f001 fad1 	bl	8002286 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ce4:	bf00      	nop
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020800 	.word	0x40020800

08000cf4 <Can_Tx>:
      HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
    }
  }
}
void Can_Tx()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  if (LL_CAN_AddTxMessage(&hcan1, data1, &Txheader, &TxMailBox) == ERROR)
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <Can_Tx+0x38>)
 8000cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <Can_Tx+0x3c>)
 8000cfc:	490d      	ldr	r1, [pc, #52]	@ (8000d34 <Can_Tx+0x40>)
 8000cfe:	480e      	ldr	r0, [pc, #56]	@ (8000d38 <Can_Tx+0x44>)
 8000d00:	f001 fe70 	bl	80029e4 <LL_CAN_AddTxMessage>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d10e      	bne.n	8000d28 <Can_Tx+0x34>
  {
    //          if (LL_CAN_IsTxMessagePending(&hcan1, &TxMailBox) == SUCCESS)
    //          {
    //            LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_5);
    //          }
    sprintf(msg, "Transmit Fail\n");
 8000d0a:	490c      	ldr	r1, [pc, #48]	@ (8000d3c <Can_Tx+0x48>)
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <Can_Tx+0x4c>)
 8000d0e:	f002 faa9 	bl	8003264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000d12:	480b      	ldr	r0, [pc, #44]	@ (8000d40 <Can_Tx+0x4c>)
 8000d14:	f7ff fa5c 	bl	80001d0 <strlen>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d20:	4907      	ldr	r1, [pc, #28]	@ (8000d40 <Can_Tx+0x4c>)
 8000d22:	4808      	ldr	r0, [pc, #32]	@ (8000d44 <Can_Tx+0x50>)
 8000d24:	f000 fda8 	bl	8001878 <HAL_UART_Transmit>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000190 	.word	0x20000190
 8000d30:	2000010c 	.word	0x2000010c
 8000d34:	20000000 	.word	0x20000000
 8000d38:	200000c8 	.word	0x200000c8
 8000d3c:	08003c64 	.word	0x08003c64
 8000d40:	20000148 	.word	0x20000148
 8000d44:	20000080 	.word	0x20000080

08000d48 <LL_CAN_TxMailbox0CompleteCallback>:

void LL_CAN_TxMailbox0CompleteCallback(LL_CAN_Handler_t *hcan)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  sprintf(msg, "Transmit Successfully M0\n");
 8000d50:	4909      	ldr	r1, [pc, #36]	@ (8000d78 <LL_CAN_TxMailbox0CompleteCallback+0x30>)
 8000d52:	480a      	ldr	r0, [pc, #40]	@ (8000d7c <LL_CAN_TxMailbox0CompleteCallback+0x34>)
 8000d54:	f002 fa86 	bl	8003264 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000d58:	4808      	ldr	r0, [pc, #32]	@ (8000d7c <LL_CAN_TxMailbox0CompleteCallback+0x34>)
 8000d5a:	f7ff fa39 	bl	80001d0 <strlen>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d66:	4905      	ldr	r1, [pc, #20]	@ (8000d7c <LL_CAN_TxMailbox0CompleteCallback+0x34>)
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <LL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000d6a:	f000 fd85 	bl	8001878 <HAL_UART_Transmit>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08003c74 	.word	0x08003c74
 8000d7c:	20000148 	.word	0x20000148
 8000d80:	20000080 	.word	0x20000080

08000d84 <LL_CAN_TxMailbox1CompleteCallback>:
void LL_CAN_TxMailbox1CompleteCallback(LL_CAN_Handler_t *hcan)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  sprintf(msg, "Transmit Successfully M1\n");
 8000d8c:	4909      	ldr	r1, [pc, #36]	@ (8000db4 <LL_CAN_TxMailbox1CompleteCallback+0x30>)
 8000d8e:	480a      	ldr	r0, [pc, #40]	@ (8000db8 <LL_CAN_TxMailbox1CompleteCallback+0x34>)
 8000d90:	f002 fa68 	bl	8003264 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000d94:	4808      	ldr	r0, [pc, #32]	@ (8000db8 <LL_CAN_TxMailbox1CompleteCallback+0x34>)
 8000d96:	f7ff fa1b 	bl	80001d0 <strlen>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da2:	4905      	ldr	r1, [pc, #20]	@ (8000db8 <LL_CAN_TxMailbox1CompleteCallback+0x34>)
 8000da4:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <LL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000da6:	f000 fd67 	bl	8001878 <HAL_UART_Transmit>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	08003c90 	.word	0x08003c90
 8000db8:	20000148 	.word	0x20000148
 8000dbc:	20000080 	.word	0x20000080

08000dc0 <LL_CAN_TxMailbox2CompleteCallback>:
void LL_CAN_TxMailbox2CompleteCallback(LL_CAN_Handler_t *hcan)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  sprintf(msg, "Transmit Successfully M2\n");
 8000dc8:	4909      	ldr	r1, [pc, #36]	@ (8000df0 <LL_CAN_TxMailbox2CompleteCallback+0x30>)
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <LL_CAN_TxMailbox2CompleteCallback+0x34>)
 8000dcc:	f002 fa4a 	bl	8003264 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000dd0:	4808      	ldr	r0, [pc, #32]	@ (8000df4 <LL_CAN_TxMailbox2CompleteCallback+0x34>)
 8000dd2:	f7ff f9fd 	bl	80001d0 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dde:	4905      	ldr	r1, [pc, #20]	@ (8000df4 <LL_CAN_TxMailbox2CompleteCallback+0x34>)
 8000de0:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <LL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000de2:	f000 fd49 	bl	8001878 <HAL_UART_Transmit>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	08003cac 	.word	0x08003cac
 8000df4:	20000148 	.word	0x20000148
 8000df8:	20000080 	.word	0x20000080

08000dfc <LL_CAN_RxFifo0MsgPendingCallback>:
void LL_CAN_RxFifo0MsgPendingCallback(LL_CAN_Handler_t *hcan)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if (LL_CAN_GetRxMessage(&hcan1, &Rxheader, rxdata, _CAN_RX_FIFO0) == ERROR)
 8000e04:	2300      	movs	r3, #0
 8000e06:	4a34      	ldr	r2, [pc, #208]	@ (8000ed8 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e08:	4934      	ldr	r1, [pc, #208]	@ (8000edc <LL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000e0a:	4835      	ldr	r0, [pc, #212]	@ (8000ee0 <LL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000e0c:	f001 fec0 	bl	8002b90 <LL_CAN_GetRxMessage>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d10f      	bne.n	8000e36 <LL_CAN_RxFifo0MsgPendingCallback+0x3a>
  {
    sprintf(msg, "Receive Fail\n");
 8000e16:	4933      	ldr	r1, [pc, #204]	@ (8000ee4 <LL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000e18:	4833      	ldr	r0, [pc, #204]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000e1a:	f002 fa23 	bl	8003264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000e1e:	4832      	ldr	r0, [pc, #200]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000e20:	f7ff f9d6 	bl	80001d0 <strlen>
 8000e24:	4603      	mov	r3, r0
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2c:	492e      	ldr	r1, [pc, #184]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000e2e:	482f      	ldr	r0, [pc, #188]	@ (8000eec <LL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000e30:	f000 fd22 	bl	8001878 <HAL_UART_Transmit>
    }
    sprintf(msg, "Receive Successfully\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
    LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_5);
  }
}
 8000e34:	e04b      	b.n	8000ece <LL_CAN_RxFifo0MsgPendingCallback+0xd2>
	  if (LL_CAN_AddTxMessage(&hcan1, rxdata, &Txheader, &TxMailBox) == ERROR)
 8000e36:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <LL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000e38:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef4 <LL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000e3a:	4927      	ldr	r1, [pc, #156]	@ (8000ed8 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e3c:	4828      	ldr	r0, [pc, #160]	@ (8000ee0 <LL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000e3e:	f001 fdd1 	bl	80029e4 <LL_CAN_AddTxMessage>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d10e      	bne.n	8000e66 <LL_CAN_RxFifo0MsgPendingCallback+0x6a>
	    sprintf(msg, "Receive and Transmit Successfully\n");
 8000e48:	492b      	ldr	r1, [pc, #172]	@ (8000ef8 <LL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000e4a:	4827      	ldr	r0, [pc, #156]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000e4c:	f002 fa0a 	bl	8003264 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000e50:	4825      	ldr	r0, [pc, #148]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000e52:	f7ff f9bd 	bl	80001d0 <strlen>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5e:	4922      	ldr	r1, [pc, #136]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000e60:	4822      	ldr	r0, [pc, #136]	@ (8000eec <LL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000e62:	f000 fd09 	bl	8001878 <HAL_UART_Transmit>
    sprintf(msg, "string\n");
 8000e66:	4925      	ldr	r1, [pc, #148]	@ (8000efc <LL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8000e68:	481f      	ldr	r0, [pc, #124]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000e6a:	f002 f9fb 	bl	8003264 <siprintf>
    for (int i = 0; i < Rxheader._DLC; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	e014      	b.n	8000e9e <LL_CAN_RxFifo0MsgPendingCallback+0xa2>
    	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000e74:	481c      	ldr	r0, [pc, #112]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000e76:	f7ff f9ab 	bl	80001d0 <strlen>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e82:	4919      	ldr	r1, [pc, #100]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000e84:	4819      	ldr	r0, [pc, #100]	@ (8000eec <LL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000e86:	f000 fcf7 	bl	8001878 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart2, (uint8_t *)rxdata, 8, 1000);
 8000e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e8e:	2208      	movs	r2, #8
 8000e90:	4911      	ldr	r1, [pc, #68]	@ (8000ed8 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e92:	4816      	ldr	r0, [pc, #88]	@ (8000eec <LL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000e94:	f000 fcf0 	bl	8001878 <HAL_UART_Transmit>
    for (int i = 0; i < Rxheader._DLC; i++)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <LL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000ea0:	691a      	ldr	r2, [r3, #16]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8e5      	bhi.n	8000e74 <LL_CAN_RxFifo0MsgPendingCallback+0x78>
    sprintf(msg, "Receive Successfully\n");
 8000ea8:	4915      	ldr	r1, [pc, #84]	@ (8000f00 <LL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8000eaa:	480f      	ldr	r0, [pc, #60]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000eac:	f002 f9da 	bl	8003264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000eb0:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000eb2:	f7ff f98d 	bl	80001d0 <strlen>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ebe:	490a      	ldr	r1, [pc, #40]	@ (8000ee8 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000ec0:	480a      	ldr	r0, [pc, #40]	@ (8000eec <LL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000ec2:	f000 fcd9 	bl	8001878 <HAL_UART_Transmit>
    LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_5);
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <LL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000eca:	f7ff fd26 	bl	800091a <LL_GPIO_TogglePin>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000140 	.word	0x20000140
 8000edc:	20000124 	.word	0x20000124
 8000ee0:	200000c8 	.word	0x200000c8
 8000ee4:	08003c54 	.word	0x08003c54
 8000ee8:	20000148 	.word	0x20000148
 8000eec:	20000080 	.word	0x20000080
 8000ef0:	20000190 	.word	0x20000190
 8000ef4:	2000010c 	.word	0x2000010c
 8000ef8:	08003cc8 	.word	0x08003cc8
 8000efc:	08003cec 	.word	0x08003cec
 8000f00:	08003cf4 	.word	0x08003cf4
 8000f04:	40020800 	.word	0x40020800

08000f08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <Error_Handler+0x8>

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	4a08      	ldr	r2, [pc, #32]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <HAL_UART_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12b      	bne.n	8000fde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000fda:	f000 fa2d 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	@ 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <MemManage_Handler+0x4>

0800100c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <UsageFault_Handler+0x4>

0800101c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104a:	f000 f8ef 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <CAN1_TX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  LL_CAN_IRQHandler(&hcan1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <CAN1_TX_IRQHandler+0x10>)
 800105a:	f001 ff39 	bl	8002ed0 <LL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000c8 	.word	0x200000c8

08001068 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  LL_CAN_IRQHandler(&hcan1);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <CAN1_RX0_IRQHandler+0x10>)
 800106e:	f001 ff2f 	bl	8002ed0 <LL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000c8 	.word	0x200000c8

0800107c <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
//
  /* USER CODE END CAN1_RX1_IRQn 0 */
  LL_CAN_IRQHandler(&hcan1);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <CAN1_RX1_IRQHandler+0x10>)
 8001082:	f001 ff25 	bl	8002ed0 <LL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
//
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000c8 	.word	0x200000c8

08001090 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */
//
  /* USER CODE END CAN1_SCE_IRQn 0 */
  LL_CAN_IRQHandler(&hcan1);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <CAN1_SCE_IRQHandler+0x10>)
 8001096:	f001 ff1b 	bl	8002ed0 <LL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */
//
  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000c8 	.word	0x200000c8

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	@ (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	@ (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f002 f8e6 	bl	80032a4 <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20020000 	.word	0x20020000
 8001104:	00000400 	.word	0x00000400
 8001108:	20000194 	.word	0x20000194
 800110c:	200002e8 	.word	0x200002e8

08001110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800116c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001138:	f7ff ffea 	bl	8001110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	@ (8001174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	@ (8001180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001162:	f002 f8a5 	bl	80032b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fbf1 	bl	800094c <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800116c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001178:	08003d58 	.word	0x08003d58
  ldr r2, =_sbss
 800117c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001180:	200002e8 	.word	0x200002e8

08001184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <HAL_Init+0x40>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <HAL_Init+0x40>)
 800119e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	@ (80011c8 <HAL_Init+0x40>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f90d 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	200f      	movs	r0, #15
 80011b8:	f000 f808 	bl	80011cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff feaa 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_InitTick+0x54>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_InitTick+0x58>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f917 	bl	800141e <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00e      	b.n	8001218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d80a      	bhi.n	8001216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f000 f8ed 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4a06      	ldr	r2, [pc, #24]	@ (8001228 <HAL_InitTick+0x5c>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000008 	.word	0x20000008
 8001224:	20000010 	.word	0x20000010
 8001228:	2000000c 	.word	0x2000000c

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000010 	.word	0x20000010
 8001250:	20000198 	.word	0x20000198

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	@ (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000198 	.word	0x20000198

0800126c <__NVIC_SetPriorityGrouping>:
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_GetPriorityGrouping>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_SetPriority>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	@ (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	@ (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff47 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff5c 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff8e 	bl	8001324 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffb0 	bl	800138c <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e16b      	b.n	800172c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 815a 	bne.w	8001726 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b01      	cmp	r3, #1
 800147c:	d005      	beq.n	800148a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001486:	2b02      	cmp	r3, #2
 8001488:	d130      	bne.n	80014ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	f003 0201 	and.w	r2, r3, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d017      	beq.n	8001528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d123      	bne.n	800157c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3208      	adds	r2, #8
 800153c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	08da      	lsrs	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3208      	adds	r2, #8
 8001576:	69b9      	ldr	r1, [r7, #24]
 8001578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0203 	and.w	r2, r3, #3
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80b4 	beq.w	8001726 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b60      	ldr	r3, [pc, #384]	@ (8001744 <HAL_GPIO_Init+0x30c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	4a5f      	ldr	r2, [pc, #380]	@ (8001744 <HAL_GPIO_Init+0x30c>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001744 <HAL_GPIO_Init+0x30c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015da:	4a5b      	ldr	r2, [pc, #364]	@ (8001748 <HAL_GPIO_Init+0x310>)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a52      	ldr	r2, [pc, #328]	@ (800174c <HAL_GPIO_Init+0x314>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d02b      	beq.n	800165e <HAL_GPIO_Init+0x226>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a51      	ldr	r2, [pc, #324]	@ (8001750 <HAL_GPIO_Init+0x318>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d025      	beq.n	800165a <HAL_GPIO_Init+0x222>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a50      	ldr	r2, [pc, #320]	@ (8001754 <HAL_GPIO_Init+0x31c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01f      	beq.n	8001656 <HAL_GPIO_Init+0x21e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4f      	ldr	r2, [pc, #316]	@ (8001758 <HAL_GPIO_Init+0x320>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d019      	beq.n	8001652 <HAL_GPIO_Init+0x21a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4e      	ldr	r2, [pc, #312]	@ (800175c <HAL_GPIO_Init+0x324>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_GPIO_Init+0x216>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4d      	ldr	r2, [pc, #308]	@ (8001760 <HAL_GPIO_Init+0x328>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00d      	beq.n	800164a <HAL_GPIO_Init+0x212>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4c      	ldr	r2, [pc, #304]	@ (8001764 <HAL_GPIO_Init+0x32c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x20e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4b      	ldr	r2, [pc, #300]	@ (8001768 <HAL_GPIO_Init+0x330>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d101      	bne.n	8001642 <HAL_GPIO_Init+0x20a>
 800163e:	2307      	movs	r3, #7
 8001640:	e00e      	b.n	8001660 <HAL_GPIO_Init+0x228>
 8001642:	2308      	movs	r3, #8
 8001644:	e00c      	b.n	8001660 <HAL_GPIO_Init+0x228>
 8001646:	2306      	movs	r3, #6
 8001648:	e00a      	b.n	8001660 <HAL_GPIO_Init+0x228>
 800164a:	2305      	movs	r3, #5
 800164c:	e008      	b.n	8001660 <HAL_GPIO_Init+0x228>
 800164e:	2304      	movs	r3, #4
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x228>
 8001652:	2303      	movs	r3, #3
 8001654:	e004      	b.n	8001660 <HAL_GPIO_Init+0x228>
 8001656:	2302      	movs	r3, #2
 8001658:	e002      	b.n	8001660 <HAL_GPIO_Init+0x228>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x228>
 800165e:	2300      	movs	r3, #0
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	f002 0203 	and.w	r2, r2, #3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4093      	lsls	r3, r2
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001670:	4935      	ldr	r1, [pc, #212]	@ (8001748 <HAL_GPIO_Init+0x310>)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167e:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <HAL_GPIO_Init+0x334>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a2:	4a32      	ldr	r2, [pc, #200]	@ (800176c <HAL_GPIO_Init+0x334>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a8:	4b30      	ldr	r3, [pc, #192]	@ (800176c <HAL_GPIO_Init+0x334>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016cc:	4a27      	ldr	r2, [pc, #156]	@ (800176c <HAL_GPIO_Init+0x334>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <HAL_GPIO_Init+0x334>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016f6:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <HAL_GPIO_Init+0x334>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <HAL_GPIO_Init+0x334>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001720:	4a12      	ldr	r2, [pc, #72]	@ (800176c <HAL_GPIO_Init+0x334>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3301      	adds	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	2b0f      	cmp	r3, #15
 8001730:	f67f ae90 	bls.w	8001454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3724      	adds	r7, #36	@ 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40013800 	.word	0x40013800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020400 	.word	0x40020400
 8001754:	40020800 	.word	0x40020800
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40021000 	.word	0x40021000
 8001760:	40021400 	.word	0x40021400
 8001764:	40021800 	.word	0x40021800
 8001768:	40021c00 	.word	0x40021c00
 800176c:	40013c00 	.word	0x40013c00

08001770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001774:	4b03      	ldr	r3, [pc, #12]	@ (8001784 <HAL_RCC_GetHCLKFreq+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008

08001788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800178c:	f7ff fff0 	bl	8001770 <HAL_RCC_GetHCLKFreq>
 8001790:	4602      	mov	r2, r0
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	0a9b      	lsrs	r3, r3, #10
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	4903      	ldr	r1, [pc, #12]	@ (80017ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800179e:	5ccb      	ldrb	r3, [r1, r3]
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	08003d0c 	.word	0x08003d0c

080017b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017b4:	f7ff ffdc 	bl	8001770 <HAL_RCC_GetHCLKFreq>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	0b5b      	lsrs	r3, r3, #13
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	4903      	ldr	r1, [pc, #12]	@ (80017d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017c6:	5ccb      	ldrb	r3, [r1, r3]
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	08003d0c 	.word	0x08003d0c

080017d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e042      	b.n	8001870 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fbb0 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2224      	movs	r2, #36	@ 0x24
 8001808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800181a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f973 	bl	8001b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2220      	movs	r2, #32
 800185c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2220      	movs	r2, #32
 8001864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	4613      	mov	r3, r2
 8001886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b20      	cmp	r3, #32
 8001896:	d175      	bne.n	8001984 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HAL_UART_Transmit+0x2c>
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e06e      	b.n	8001986 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2221      	movs	r2, #33	@ 0x21
 80018b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018b6:	f7ff fccd 	bl	8001254 <HAL_GetTick>
 80018ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	88fa      	ldrh	r2, [r7, #6]
 80018c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	88fa      	ldrh	r2, [r7, #6]
 80018c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018d0:	d108      	bne.n	80018e4 <HAL_UART_Transmit+0x6c>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d104      	bne.n	80018e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	e003      	b.n	80018ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80018ec:	e02e      	b.n	800194c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2200      	movs	r2, #0
 80018f6:	2180      	movs	r1, #128	@ 0x80
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f848 	bl	800198e <UART_WaitOnFlagUntilTimeout>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2220      	movs	r2, #32
 8001908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e03a      	b.n	8001986 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10b      	bne.n	800192e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001924:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	3302      	adds	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	e007      	b.n	800193e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	3301      	adds	r3, #1
 800193c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001942:	b29b      	uxth	r3, r3
 8001944:	3b01      	subs	r3, #1
 8001946:	b29a      	uxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001950:	b29b      	uxth	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1cb      	bne.n	80018ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2200      	movs	r2, #0
 800195e:	2140      	movs	r1, #64	@ 0x40
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 f814 	bl	800198e <UART_WaitOnFlagUntilTimeout>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e006      	b.n	8001986 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2220      	movs	r2, #32
 800197c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	e000      	b.n	8001986 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001984:	2302      	movs	r3, #2
  }
}
 8001986:	4618      	mov	r0, r3
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	4613      	mov	r3, r2
 800199c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800199e:	e03b      	b.n	8001a18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a6:	d037      	beq.n	8001a18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a8:	f7ff fc54 	bl	8001254 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	6a3a      	ldr	r2, [r7, #32]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d302      	bcc.n	80019be <UART_WaitOnFlagUntilTimeout+0x30>
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e03a      	b.n	8001a38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d023      	beq.n	8001a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b80      	cmp	r3, #128	@ 0x80
 80019d4:	d020      	beq.n	8001a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b40      	cmp	r3, #64	@ 0x40
 80019da:	d01d      	beq.n	8001a18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d116      	bne.n	8001a18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f81d 	bl	8001a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2208      	movs	r2, #8
 8001a0a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e00f      	b.n	8001a38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	4013      	ands	r3, r2
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d0b4      	beq.n	80019a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b095      	sub	sp, #84	@ 0x54
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	330c      	adds	r3, #12
 8001a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a52:	e853 3f00 	ldrex	r3, [r3]
 8001a56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	330c      	adds	r3, #12
 8001a66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a68:	643a      	str	r2, [r7, #64]	@ 0x40
 8001a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a70:	e841 2300 	strex	r3, r2, [r1]
 8001a74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e5      	bne.n	8001a48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3314      	adds	r3, #20
 8001a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	e853 3f00 	ldrex	r3, [r3]
 8001a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3314      	adds	r3, #20
 8001a9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aa4:	e841 2300 	strex	r3, r2, [r1]
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e5      	bne.n	8001a7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d119      	bne.n	8001aec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	330c      	adds	r3, #12
 8001abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	e853 3f00 	ldrex	r3, [r3]
 8001ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f023 0310 	bic.w	r3, r3, #16
 8001ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ad8:	61ba      	str	r2, [r7, #24]
 8001ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001adc:	6979      	ldr	r1, [r7, #20]
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	e841 2300 	strex	r3, r2, [r1]
 8001ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e5      	bne.n	8001ab8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001afa:	bf00      	nop
 8001afc:	3754      	adds	r7, #84	@ 0x54
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b0c:	b0c0      	sub	sp, #256	@ 0x100
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b24:	68d9      	ldr	r1, [r3, #12]
 8001b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	ea40 0301 	orr.w	r3, r0, r1
 8001b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001b60:	f021 010c 	bic.w	r1, r1, #12
 8001b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b82:	6999      	ldr	r1, [r3, #24]
 8001b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	ea40 0301 	orr.w	r3, r0, r1
 8001b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b8f      	ldr	r3, [pc, #572]	@ (8001dd4 <UART_SetConfig+0x2cc>)
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d005      	beq.n	8001ba8 <UART_SetConfig+0xa0>
 8001b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8001dd8 <UART_SetConfig+0x2d0>)
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d104      	bne.n	8001bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ba8:	f7ff fe02 	bl	80017b0 <HAL_RCC_GetPCLK2Freq>
 8001bac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001bb0:	e003      	b.n	8001bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bb2:	f7ff fde9 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 8001bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bc4:	f040 810c 	bne.w	8001de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001bda:	4622      	mov	r2, r4
 8001bdc:	462b      	mov	r3, r5
 8001bde:	1891      	adds	r1, r2, r2
 8001be0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001be2:	415b      	adcs	r3, r3
 8001be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bea:	4621      	mov	r1, r4
 8001bec:	eb12 0801 	adds.w	r8, r2, r1
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	eb43 0901 	adc.w	r9, r3, r1
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c0a:	4690      	mov	r8, r2
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	4623      	mov	r3, r4
 8001c10:	eb18 0303 	adds.w	r3, r8, r3
 8001c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001c18:	462b      	mov	r3, r5
 8001c1a:	eb49 0303 	adc.w	r3, r9, r3
 8001c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001c36:	460b      	mov	r3, r1
 8001c38:	18db      	adds	r3, r3, r3
 8001c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	eb42 0303 	adc.w	r3, r2, r3
 8001c42:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001c4c:	f7fe fb18 	bl	8000280 <__aeabi_uldivmod>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4b61      	ldr	r3, [pc, #388]	@ (8001ddc <UART_SetConfig+0x2d4>)
 8001c56:	fba3 2302 	umull	r2, r3, r3, r2
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	011c      	lsls	r4, r3, #4
 8001c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c62:	2200      	movs	r2, #0
 8001c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001c68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001c70:	4642      	mov	r2, r8
 8001c72:	464b      	mov	r3, r9
 8001c74:	1891      	adds	r1, r2, r2
 8001c76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001c78:	415b      	adcs	r3, r3
 8001c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c80:	4641      	mov	r1, r8
 8001c82:	eb12 0a01 	adds.w	sl, r2, r1
 8001c86:	4649      	mov	r1, r9
 8001c88:	eb43 0b01 	adc.w	fp, r3, r1
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ca0:	4692      	mov	sl, r2
 8001ca2:	469b      	mov	fp, r3
 8001ca4:	4643      	mov	r3, r8
 8001ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8001caa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001cae:	464b      	mov	r3, r9
 8001cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8001cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	18db      	adds	r3, r3, r3
 8001cd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	eb42 0303 	adc.w	r3, r2, r3
 8001cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001ce2:	f7fe facd 	bl	8000280 <__aeabi_uldivmod>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4611      	mov	r1, r2
 8001cec:	4b3b      	ldr	r3, [pc, #236]	@ (8001ddc <UART_SetConfig+0x2d4>)
 8001cee:	fba3 2301 	umull	r2, r3, r3, r1
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2264      	movs	r2, #100	@ 0x64
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	1acb      	subs	r3, r1, r3
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001d02:	4b36      	ldr	r3, [pc, #216]	@ (8001ddc <UART_SetConfig+0x2d4>)
 8001d04:	fba3 2302 	umull	r2, r3, r3, r2
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001d10:	441c      	add	r4, r3
 8001d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d16:	2200      	movs	r2, #0
 8001d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001d24:	4642      	mov	r2, r8
 8001d26:	464b      	mov	r3, r9
 8001d28:	1891      	adds	r1, r2, r2
 8001d2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d2c:	415b      	adcs	r3, r3
 8001d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d34:	4641      	mov	r1, r8
 8001d36:	1851      	adds	r1, r2, r1
 8001d38:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d3a:	4649      	mov	r1, r9
 8001d3c:	414b      	adcs	r3, r1
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001d4c:	4659      	mov	r1, fp
 8001d4e:	00cb      	lsls	r3, r1, #3
 8001d50:	4651      	mov	r1, sl
 8001d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d56:	4651      	mov	r1, sl
 8001d58:	00ca      	lsls	r2, r1, #3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4642      	mov	r2, r8
 8001d62:	189b      	adds	r3, r3, r2
 8001d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d68:	464b      	mov	r3, r9
 8001d6a:	460a      	mov	r2, r1
 8001d6c:	eb42 0303 	adc.w	r3, r2, r3
 8001d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001d80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001d88:	460b      	mov	r3, r1
 8001d8a:	18db      	adds	r3, r3, r3
 8001d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d8e:	4613      	mov	r3, r2
 8001d90:	eb42 0303 	adc.w	r3, r2, r3
 8001d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001d9e:	f7fe fa6f 	bl	8000280 <__aeabi_uldivmod>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <UART_SetConfig+0x2d4>)
 8001da8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	2164      	movs	r1, #100	@ 0x64
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	3332      	adds	r3, #50	@ 0x32
 8001dba:	4a08      	ldr	r2, [pc, #32]	@ (8001ddc <UART_SetConfig+0x2d4>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	095b      	lsrs	r3, r3, #5
 8001dc2:	f003 0207 	and.w	r2, r3, #7
 8001dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4422      	add	r2, r4
 8001dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001dd0:	e106      	b.n	8001fe0 <UART_SetConfig+0x4d8>
 8001dd2:	bf00      	nop
 8001dd4:	40011000 	.word	0x40011000
 8001dd8:	40011400 	.word	0x40011400
 8001ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001de4:	2200      	movs	r2, #0
 8001de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001dea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001df2:	4642      	mov	r2, r8
 8001df4:	464b      	mov	r3, r9
 8001df6:	1891      	adds	r1, r2, r2
 8001df8:	6239      	str	r1, [r7, #32]
 8001dfa:	415b      	adcs	r3, r3
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e02:	4641      	mov	r1, r8
 8001e04:	1854      	adds	r4, r2, r1
 8001e06:	4649      	mov	r1, r9
 8001e08:	eb43 0501 	adc.w	r5, r3, r1
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	00eb      	lsls	r3, r5, #3
 8001e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e1a:	00e2      	lsls	r2, r4, #3
 8001e1c:	4614      	mov	r4, r2
 8001e1e:	461d      	mov	r5, r3
 8001e20:	4643      	mov	r3, r8
 8001e22:	18e3      	adds	r3, r4, r3
 8001e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e28:	464b      	mov	r3, r9
 8001e2a:	eb45 0303 	adc.w	r3, r5, r3
 8001e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e4e:	4629      	mov	r1, r5
 8001e50:	008b      	lsls	r3, r1, #2
 8001e52:	4621      	mov	r1, r4
 8001e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e58:	4621      	mov	r1, r4
 8001e5a:	008a      	lsls	r2, r1, #2
 8001e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001e60:	f7fe fa0e 	bl	8000280 <__aeabi_uldivmod>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4b60      	ldr	r3, [pc, #384]	@ (8001fec <UART_SetConfig+0x4e4>)
 8001e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	011c      	lsls	r4, r3, #4
 8001e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e76:	2200      	movs	r2, #0
 8001e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001e84:	4642      	mov	r2, r8
 8001e86:	464b      	mov	r3, r9
 8001e88:	1891      	adds	r1, r2, r2
 8001e8a:	61b9      	str	r1, [r7, #24]
 8001e8c:	415b      	adcs	r3, r3
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e94:	4641      	mov	r1, r8
 8001e96:	1851      	adds	r1, r2, r1
 8001e98:	6139      	str	r1, [r7, #16]
 8001e9a:	4649      	mov	r1, r9
 8001e9c:	414b      	adcs	r3, r1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001eac:	4659      	mov	r1, fp
 8001eae:	00cb      	lsls	r3, r1, #3
 8001eb0:	4651      	mov	r1, sl
 8001eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eb6:	4651      	mov	r1, sl
 8001eb8:	00ca      	lsls	r2, r1, #3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4642      	mov	r2, r8
 8001ec2:	189b      	adds	r3, r3, r2
 8001ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ec8:	464b      	mov	r3, r9
 8001eca:	460a      	mov	r2, r1
 8001ecc:	eb42 0303 	adc.w	r3, r2, r3
 8001ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001ede:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001eec:	4649      	mov	r1, r9
 8001eee:	008b      	lsls	r3, r1, #2
 8001ef0:	4641      	mov	r1, r8
 8001ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ef6:	4641      	mov	r1, r8
 8001ef8:	008a      	lsls	r2, r1, #2
 8001efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001efe:	f7fe f9bf 	bl	8000280 <__aeabi_uldivmod>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4611      	mov	r1, r2
 8001f08:	4b38      	ldr	r3, [pc, #224]	@ (8001fec <UART_SetConfig+0x4e4>)
 8001f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2264      	movs	r2, #100	@ 0x64
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	1acb      	subs	r3, r1, r3
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	3332      	adds	r3, #50	@ 0x32
 8001f1c:	4a33      	ldr	r2, [pc, #204]	@ (8001fec <UART_SetConfig+0x4e4>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f28:	441c      	add	r4, r3
 8001f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f2e:	2200      	movs	r2, #0
 8001f30:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f32:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001f38:	4642      	mov	r2, r8
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	1891      	adds	r1, r2, r2
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	415b      	adcs	r3, r3
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f48:	4641      	mov	r1, r8
 8001f4a:	1851      	adds	r1, r2, r1
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	4649      	mov	r1, r9
 8001f50:	414b      	adcs	r3, r1
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f60:	4659      	mov	r1, fp
 8001f62:	00cb      	lsls	r3, r1, #3
 8001f64:	4651      	mov	r1, sl
 8001f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f6a:	4651      	mov	r1, sl
 8001f6c:	00ca      	lsls	r2, r1, #3
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	4642      	mov	r2, r8
 8001f76:	189b      	adds	r3, r3, r2
 8001f78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f7a:	464b      	mov	r3, r9
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	eb42 0303 	adc.w	r3, r2, r3
 8001f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001f9c:	4649      	mov	r1, r9
 8001f9e:	008b      	lsls	r3, r1, #2
 8001fa0:	4641      	mov	r1, r8
 8001fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fa6:	4641      	mov	r1, r8
 8001fa8:	008a      	lsls	r2, r1, #2
 8001faa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001fae:	f7fe f967 	bl	8000280 <__aeabi_uldivmod>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <UART_SetConfig+0x4e4>)
 8001fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	2164      	movs	r1, #100	@ 0x64
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	3332      	adds	r3, #50	@ 0x32
 8001fca:	4a08      	ldr	r2, [pc, #32]	@ (8001fec <UART_SetConfig+0x4e4>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	f003 020f 	and.w	r2, r3, #15
 8001fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4422      	add	r2, r4
 8001fde:	609a      	str	r2, [r3, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fec:	51eb851f 	.word	0x51eb851f

08001ff0 <LL_GPIO_SetPinMode>:
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b08b      	sub	sp, #44	@ 0x2c
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	613b      	str	r3, [r7, #16]
  return result;
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002016:	2320      	movs	r3, #32
 8002018:	e003      	b.n	8002022 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2103      	movs	r1, #3
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	401a      	ands	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	61fb      	str	r3, [r7, #28]
  return result;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002044:	2320      	movs	r3, #32
 8002046:	e003      	b.n	8002050 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	431a      	orrs	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	601a      	str	r2, [r3, #0]
}
 800205e:	bf00      	nop
 8002060:	372c      	adds	r7, #44	@ 0x2c
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_GPIO_SetPinOutputType>:
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	431a      	orrs	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	605a      	str	r2, [r3, #4]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_GPIO_SetPinSpeed>:
{
 800209a:	b480      	push	{r7}
 800209c:	b08b      	sub	sp, #44	@ 0x2c
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	613b      	str	r3, [r7, #16]
  return result;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e003      	b.n	80020cc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2103      	movs	r1, #3
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	401a      	ands	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	61fb      	str	r3, [r7, #28]
  return result;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80020ee:	2320      	movs	r3, #32
 80020f0:	e003      	b.n	80020fa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	431a      	orrs	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	609a      	str	r2, [r3, #8]
}
 8002108:	bf00      	nop
 800210a:	372c      	adds	r7, #44	@ 0x2c
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_GPIO_SetPinPull>:
{
 8002114:	b480      	push	{r7}
 8002116:	b08b      	sub	sp, #44	@ 0x2c
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	613b      	str	r3, [r7, #16]
  return result;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800213a:	2320      	movs	r3, #32
 800213c:	e003      	b.n	8002146 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2103      	movs	r1, #3
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	61fb      	str	r3, [r7, #28]
  return result;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002168:	2320      	movs	r3, #32
 800216a:	e003      	b.n	8002174 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	431a      	orrs	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	60da      	str	r2, [r3, #12]
}
 8002182:	bf00      	nop
 8002184:	372c      	adds	r7, #44	@ 0x2c
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_GPIO_SetAFPin_0_7>:
{
 800218e:	b480      	push	{r7}
 8002190:	b08b      	sub	sp, #44	@ 0x2c
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a1a      	ldr	r2, [r3, #32]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	613b      	str	r3, [r7, #16]
  return result;
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80021b4:	2320      	movs	r3, #32
 80021b6:	e003      	b.n	80021c0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	210f      	movs	r1, #15
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	401a      	ands	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	61fb      	str	r3, [r7, #28]
  return result;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e003      	b.n	80021ee <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	431a      	orrs	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	621a      	str	r2, [r3, #32]
}
 80021fc:	bf00      	nop
 80021fe:	372c      	adds	r7, #44	@ 0x2c
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_GPIO_SetAFPin_8_15>:
{
 8002208:	b480      	push	{r7}
 800220a:	b08b      	sub	sp, #44	@ 0x2c
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	613b      	str	r3, [r7, #16]
  return result;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002230:	2320      	movs	r3, #32
 8002232:	e003      	b.n	800223c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	210f      	movs	r1, #15
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	61fb      	str	r3, [r7, #28]
  return result;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002260:	2320      	movs	r3, #32
 8002262:	e003      	b.n	800226c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	431a      	orrs	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800227a:	bf00      	nop
 800227c:	372c      	adds	r7, #44	@ 0x2c
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b08a      	sub	sp, #40	@ 0x28
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	617b      	str	r3, [r7, #20]
  return result;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <LL_GPIO_Init+0x2e>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e003      	b.n	80022bc <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80022be:	e057      	b.n	8002370 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	4013      	ands	r3, r2
 80022ce:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d049      	beq.n	800236a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d003      	beq.n	80022e6 <LL_GPIO_Init+0x60>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d10d      	bne.n	8002302 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	461a      	mov	r2, r3
 80022ec:	6a39      	ldr	r1, [r7, #32]
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff fed3 	bl	800209a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	461a      	mov	r2, r3
 80022fa:	6a39      	ldr	r1, [r7, #32]
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff feb4 	bl	800206a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	461a      	mov	r2, r3
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ff02 	bl	8002114 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d121      	bne.n	800235c <LL_GPIO_Init+0xd6>
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	60bb      	str	r3, [r7, #8]
  return result;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <LL_GPIO_Init+0xac>
    return 32U;
 800232e:	2320      	movs	r3, #32
 8002330:	e003      	b.n	800233a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800233a:	2b07      	cmp	r3, #7
 800233c:	d807      	bhi.n	800234e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	461a      	mov	r2, r3
 8002344:	6a39      	ldr	r1, [r7, #32]
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ff21 	bl	800218e <LL_GPIO_SetAFPin_0_7>
 800234c:	e006      	b.n	800235c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	461a      	mov	r2, r3
 8002354:	6a39      	ldr	r1, [r7, #32]
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ff56 	bl	8002208 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	461a      	mov	r2, r3
 8002362:	6a39      	ldr	r1, [r7, #32]
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff fe43 	bl	8001ff0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1a0      	bne.n	80022c0 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3728      	adds	r7, #40	@ 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002390:	4a04      	ldr	r2, [pc, #16]	@ (80023a4 <LL_SetSystemCoreClock+0x1c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000008 	.word	0x20000008

080023a8 <LL_AHB1_GRP1_EnableClock>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80023b0:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023b4:	4907      	ldr	r1, [pc, #28]	@ (80023d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4013      	ands	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	40023800 	.word	0x40023800

080023d8 <LL_CAN_GPIO_Init>:
 * @param can_type The `can_type` parameter in the `LL_CAN_GPIO_Init` function is used to determine
 * which CAN bus (CAN1 or CAN2) configuration to initialize based on the value passed to it. The
 * function configures the GPIO pins for CAN communication based on the specified CAN type.
 */
ErrorStatus LL_CAN_GPIO_Init(LL_CAN_Handler_t *hcan)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	@ 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

	ErrorStatus status = ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]
 80023f6:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	if (hcan->Instance == _CAN1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d106      	bne.n	800240e <LL_CAN_GPIO_Init+0x36>
		RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8002400:	4b27      	ldr	r3, [pc, #156]	@ (80024a0 <LL_CAN_GPIO_Init+0xc8>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	4a26      	ldr	r2, [pc, #152]	@ (80024a0 <LL_CAN_GPIO_Init+0xc8>)
 8002406:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800240a:	6413      	str	r3, [r2, #64]	@ 0x40
 800240c:	e005      	b.n	800241a <LL_CAN_GPIO_Init+0x42>
	else
		RCC->APB1ENR |= RCC_APB1ENR_CAN2EN;
 800240e:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <LL_CAN_GPIO_Init+0xc8>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	4a23      	ldr	r2, [pc, #140]	@ (80024a0 <LL_CAN_GPIO_Init+0xc8>)
 8002414:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002418:	6413      	str	r3, [r2, #64]	@ 0x40

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800241a:	2002      	movs	r0, #2
 800241c:	f7ff ffc4 	bl	80023a8 <LL_AHB1_GRP1_EnableClock>

	if (hcan->Instance == _CAN1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <LL_CAN_GPIO_Init+0x7e>
	{
		/**CAN1 GPIO Configuration
		PB8   ------> CAN1_RX
		PB9   ------> CAN1_TX
		*/
		GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_9;
 8002428:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800242c:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800242e:	2302      	movs	r3, #2
 8002430:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 800243e:	2309      	movs	r3, #9
 8002440:	623b      	str	r3, [r7, #32]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	f107 030c 	add.w	r3, r7, #12
 8002446:	4619      	mov	r1, r3
 8002448:	4816      	ldr	r0, [pc, #88]	@ (80024a4 <LL_CAN_GPIO_Init+0xcc>)
 800244a:	f7ff ff1c 	bl	8002286 <LL_GPIO_Init>
		status = SUCCESS;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002454:	e01d      	b.n	8002492 <LL_CAN_GPIO_Init+0xba>
	}
	else if (hcan->Instance == _CAN2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d116      	bne.n	800248c <LL_CAN_GPIO_Init+0xb4>
	{
		/**CAN1 GPIO Configuration
		PB12   ------> CAN2_RX
		PB13   ------> CAN2_TX
		*/
		GPIO_InitStruct.Pin = LL_GPIO_PIN_12 | LL_GPIO_PIN_13;
 800245e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002462:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002464:	2302      	movs	r3, #2
 8002466:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8002474:	2309      	movs	r3, #9
 8002476:	623b      	str	r3, [r7, #32]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	4619      	mov	r1, r3
 800247e:	4809      	ldr	r0, [pc, #36]	@ (80024a4 <LL_CAN_GPIO_Init+0xcc>)
 8002480:	f7ff ff01 	bl	8002286 <LL_GPIO_Init>
		status = SUCCESS;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800248a:	e002      	b.n	8002492 <LL_CAN_GPIO_Init+0xba>
	}

	else
		status = ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	return status;
 8002492:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002496:	4618      	mov	r0, r3
 8002498:	3728      	adds	r7, #40	@ 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020400 	.word	0x40020400

080024a8 <LL_CAN_Init>:
 *
 * @return The function `LL_CAN_Init` is returning an `ErrorStatus` enum value, which is either `ERROR`
 * or `SUCCESS`.
 */
ErrorStatus LL_CAN_Init(LL_CAN_Handler_t *hcan)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

	ErrorStatus status = ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
	uint8_t time_out = 50;
 80024b4:	2332      	movs	r3, #50	@ 0x32
 80024b6:	737b      	strb	r3, [r7, #13]
	uint8_t time_start = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73bb      	strb	r3, [r7, #14]
	assert_param(hcan->Init.status.ReceiveFifoLocked);
	assert_param(hcan->Init.status.TimeTriggeredMode);
	assert_param(hcan->Init.status.TransmitFifoPriority);

	// Check CAN instance is CAN1 or CAN2
	if (hcan->Instance == _CAN1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <LL_CAN_Init+0x28>
	{
		canbase = _CAN1_REG_BASE;
 80024c4:	4b90      	ldr	r3, [pc, #576]	@ (8002708 <LL_CAN_Init+0x260>)
 80024c6:	4a91      	ldr	r2, [pc, #580]	@ (800270c <LL_CAN_Init+0x264>)
 80024c8:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e008      	b.n	80024e2 <LL_CAN_Init+0x3a>
	}
	else if (hcan->Instance == _CAN2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d104      	bne.n	80024e2 <LL_CAN_Init+0x3a>
	{
		canbase = _CAN2_REG_BASE;
 80024d8:	4b8b      	ldr	r3, [pc, #556]	@ (8002708 <LL_CAN_Init+0x260>)
 80024da:	4a8d      	ldr	r2, [pc, #564]	@ (8002710 <LL_CAN_Init+0x268>)
 80024dc:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
	}

	// Enter Initialization mode
	(canbase->CAN_MCR) |= (1U << INRQ);
 80024e2:	4b89      	ldr	r3, [pc, #548]	@ (8002708 <LL_CAN_Init+0x260>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b87      	ldr	r3, [pc, #540]	@ (8002708 <LL_CAN_Init+0x260>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

	// Wait until INAK bit has been set by hardware.
	while (!((canbase->CAN_MSR) & (1U << INAK)) && (time_start < time_out))
 80024f2:	e002      	b.n	80024fa <LL_CAN_Init+0x52>
	{
		++time_start;
 80024f4:	7bbb      	ldrb	r3, [r7, #14]
 80024f6:	3301      	adds	r3, #1
 80024f8:	73bb      	strb	r3, [r7, #14]
	while (!((canbase->CAN_MSR) & (1U << INAK)) && (time_start < time_out))
 80024fa:	4b83      	ldr	r3, [pc, #524]	@ (8002708 <LL_CAN_Init+0x260>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d103      	bne.n	8002510 <LL_CAN_Init+0x68>
 8002508:	7bba      	ldrb	r2, [r7, #14]
 800250a:	7b7b      	ldrb	r3, [r7, #13]
 800250c:	429a      	cmp	r2, r3
 800250e:	d3f1      	bcc.n	80024f4 <LL_CAN_Init+0x4c>
	}
	if (time_start > time_out)
 8002510:	7bba      	ldrb	r2, [r7, #14]
 8002512:	7b7b      	ldrb	r3, [r7, #13]
 8002514:	429a      	cmp	r2, r3
 8002516:	d901      	bls.n	800251c <LL_CAN_Init+0x74>
		return ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e104      	b.n	8002726 <LL_CAN_Init+0x27e>
	// Reset time start
	time_start = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	73bb      	strb	r3, [r7, #14]

	// Exit sleep mode
	(canbase->CAN_MCR) &= ~(1U << SLEEP);
 8002520:	4b79      	ldr	r3, [pc, #484]	@ (8002708 <LL_CAN_Init+0x260>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b78      	ldr	r3, [pc, #480]	@ (8002708 <LL_CAN_Init+0x260>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0202 	bic.w	r2, r2, #2
 800252e:	601a      	str	r2, [r3, #0]

	// Wait until bit SLAK=0 of MSR register
	while (!((canbase->CAN_MSR) & (1U << SLAK)) && (time_start < time_out))
 8002530:	e002      	b.n	8002538 <LL_CAN_Init+0x90>
	{
		++time_start;
 8002532:	7bbb      	ldrb	r3, [r7, #14]
 8002534:	3301      	adds	r3, #1
 8002536:	73bb      	strb	r3, [r7, #14]
	while (!((canbase->CAN_MSR) & (1U << SLAK)) && (time_start < time_out))
 8002538:	4b73      	ldr	r3, [pc, #460]	@ (8002708 <LL_CAN_Init+0x260>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <LL_CAN_Init+0xa6>
 8002546:	7bba      	ldrb	r2, [r7, #14]
 8002548:	7b7b      	ldrb	r3, [r7, #13]
 800254a:	429a      	cmp	r2, r3
 800254c:	d3f1      	bcc.n	8002532 <LL_CAN_Init+0x8a>
	}
	if (time_start > time_out)
 800254e:	7bba      	ldrb	r2, [r7, #14]
 8002550:	7b7b      	ldrb	r3, [r7, #13]
 8002552:	429a      	cmp	r2, r3
 8002554:	d901      	bls.n	800255a <LL_CAN_Init+0xb2>
		return ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0e5      	b.n	8002726 <LL_CAN_Init+0x27e>

	// Configure CAN mode
	switch (hcan->Init.Mode)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	7d1b      	ldrb	r3, [r3, #20]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d82c      	bhi.n	80025bc <LL_CAN_Init+0x114>
 8002562:	a201      	add	r2, pc, #4	@ (adr r2, 8002568 <LL_CAN_Init+0xc0>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	08002579 	.word	0x08002579
 800256c:	08002587 	.word	0x08002587
 8002570:	08002599 	.word	0x08002599
 8002574:	080025ab 	.word	0x080025ab
	{
	case _NORMAL_MODE:
		(canbase->CAN_BTR) |= _CAN_MODE_NORMAL;
 8002578:	4b63      	ldr	r3, [pc, #396]	@ (8002708 <LL_CAN_Init+0x260>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b62      	ldr	r3, [pc, #392]	@ (8002708 <LL_CAN_Init+0x260>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69d2      	ldr	r2, [r2, #28]
 8002582:	61da      	str	r2, [r3, #28]
		break;
 8002584:	e01a      	b.n	80025bc <LL_CAN_Init+0x114>
	case _LOOPBACK_MODE:
		(canbase->CAN_BTR) |= _CAN_MODE_LOOPBACK;
 8002586:	4b60      	ldr	r3, [pc, #384]	@ (8002708 <LL_CAN_Init+0x260>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	4b5e      	ldr	r3, [pc, #376]	@ (8002708 <LL_CAN_Init+0x260>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002594:	61da      	str	r2, [r3, #28]
		break;
 8002596:	e011      	b.n	80025bc <LL_CAN_Init+0x114>
	case _SILENT_MODE:
		(canbase->CAN_BTR) |= _CAN_MODE_SILENT;
 8002598:	4b5b      	ldr	r3, [pc, #364]	@ (8002708 <LL_CAN_Init+0x260>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	4b5a      	ldr	r3, [pc, #360]	@ (8002708 <LL_CAN_Init+0x260>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80025a6:	61da      	str	r2, [r3, #28]
		break;
 80025a8:	e008      	b.n	80025bc <LL_CAN_Init+0x114>
	case _SILENT_LOOPBACK_MODE:
		(canbase->CAN_BTR) |= _CAN_MODE_SILENT_LOOPBACK;
 80025aa:	4b57      	ldr	r3, [pc, #348]	@ (8002708 <LL_CAN_Init+0x260>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	4b55      	ldr	r3, [pc, #340]	@ (8002708 <LL_CAN_Init+0x260>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80025b8:	61da      	str	r2, [r3, #28]
		break;
 80025ba:	bf00      	nop
	}

	// Clear bits of SJW | BRP | TS1 | TS2
	(canbase->CAN_BTR) &= 0xF0000000;
 80025bc:	4b52      	ldr	r3, [pc, #328]	@ (8002708 <LL_CAN_Init+0x260>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	4b51      	ldr	r3, [pc, #324]	@ (8002708 <LL_CAN_Init+0x260>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80025ca:	61da      	str	r2, [r3, #28]

	// Can baudrate calculation bases on F_APB1=24Mhz, SJW | BRP | TS1 | TS2
	(canbase->CAN_BTR) |= (((hcan->Init.SyncJumpWidth) << SJW) | (((hcan->Init.Prescaler) - 1) << BRP) | ((hcan->Init.TimeSeg1) << TS1) | ((hcan->Init.TimeSeg2) << TS2));
 80025cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002708 <LL_CAN_Init+0x260>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69d9      	ldr	r1, [r3, #28]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	061a      	lsls	r2, r3, #24
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	3b01      	subs	r3, #1
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	051b      	lsls	r3, r3, #20
 80025ee:	431a      	orrs	r2, r3
 80025f0:	4b45      	ldr	r3, [pc, #276]	@ (8002708 <LL_CAN_Init+0x260>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	61da      	str	r2, [r3, #28]

	// Can Autowakeup, default value of bit AWUM=0
	if (hcan->Init.status.AutoWakeUp == ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7d5b      	ldrb	r3, [r3, #21]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <LL_CAN_Init+0x170>
		(canbase->CAN_MCR) |= (1U << AWUM);
 8002606:	4b40      	ldr	r3, [pc, #256]	@ (8002708 <LL_CAN_Init+0x260>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b3e      	ldr	r3, [pc, #248]	@ (8002708 <LL_CAN_Init+0x260>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0220 	orr.w	r2, r2, #32
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e007      	b.n	8002628 <LL_CAN_Init+0x180>
	else
		(canbase->CAN_MCR) &= ~(1U << AWUM);
 8002618:	4b3b      	ldr	r3, [pc, #236]	@ (8002708 <LL_CAN_Init+0x260>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b3a      	ldr	r3, [pc, #232]	@ (8002708 <LL_CAN_Init+0x260>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0220 	bic.w	r2, r2, #32
 8002626:	601a      	str	r2, [r3, #0]

	// Can No Autorestranmission, default value of bit NART=0
	if (hcan->Init.status.AutoRetransmission == DISABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7d5b      	ldrb	r3, [r3, #21]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <LL_CAN_Init+0x1a0>
		(canbase->CAN_MCR) |= (1U << NART);
 8002636:	4b34      	ldr	r3, [pc, #208]	@ (8002708 <LL_CAN_Init+0x260>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b32      	ldr	r3, [pc, #200]	@ (8002708 <LL_CAN_Init+0x260>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0210 	orr.w	r2, r2, #16
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e007      	b.n	8002658 <LL_CAN_Init+0x1b0>
	else
		(canbase->CAN_MCR) &= ~(1U << NART);
 8002648:	4b2f      	ldr	r3, [pc, #188]	@ (8002708 <LL_CAN_Init+0x260>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b2e      	ldr	r3, [pc, #184]	@ (8002708 <LL_CAN_Init+0x260>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0210 	bic.w	r2, r2, #16
 8002656:	601a      	str	r2, [r3, #0]

	// Can ReceiveFifoLocked, default value of bit RFLM=0
	if (hcan->Init.status.ReceiveFifoLocked == ENABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7d5b      	ldrb	r3, [r3, #21]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <LL_CAN_Init+0x1d0>
		(canbase->CAN_MCR) |= (1U << RFLM);
 8002666:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <LL_CAN_Init+0x260>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b26      	ldr	r3, [pc, #152]	@ (8002708 <LL_CAN_Init+0x260>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0208 	orr.w	r2, r2, #8
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e007      	b.n	8002688 <LL_CAN_Init+0x1e0>
	else
		(canbase->CAN_MCR) &= ~(1U << RFLM);
 8002678:	4b23      	ldr	r3, [pc, #140]	@ (8002708 <LL_CAN_Init+0x260>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b22      	ldr	r3, [pc, #136]	@ (8002708 <LL_CAN_Init+0x260>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0208 	bic.w	r2, r2, #8
 8002686:	601a      	str	r2, [r3, #0]

	// Can Time trigger mode, default value of bit TTCM=0
	if (hcan->Init.status.TimeTriggeredMode == ENABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7d5b      	ldrb	r3, [r3, #21]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <LL_CAN_Init+0x200>
		(canbase->CAN_MCR) |= (1U << TTCM);
 8002696:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <LL_CAN_Init+0x260>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <LL_CAN_Init+0x260>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e007      	b.n	80026b8 <LL_CAN_Init+0x210>
	else
		(canbase->CAN_MCR) &= ~(1U << TTCM);
 80026a8:	4b17      	ldr	r3, [pc, #92]	@ (8002708 <LL_CAN_Init+0x260>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <LL_CAN_Init+0x260>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026b6:	601a      	str	r2, [r3, #0]

	// Can TransmitFifoPriority, default value of bit TXFP=0
	if (hcan->Init.status.TransmitFifoPriority == ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7d5b      	ldrb	r3, [r3, #21]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <LL_CAN_Init+0x230>
		(canbase->CAN_MCR) |= (1U << TXFP);
 80026c6:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <LL_CAN_Init+0x260>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <LL_CAN_Init+0x260>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0204 	orr.w	r2, r2, #4
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e007      	b.n	80026e8 <LL_CAN_Init+0x240>
	else
		(canbase->CAN_MCR) &= ~(1U << TXFP);
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <LL_CAN_Init+0x260>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <LL_CAN_Init+0x260>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0204 	bic.w	r2, r2, #4
 80026e6:	601a      	str	r2, [r3, #0]

	// Can AutoBusOff, default value of bit ABOM=0
	if (hcan->Init.status.AutoBusOff == ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7d5b      	ldrb	r3, [r3, #21]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00e      	beq.n	8002714 <LL_CAN_Init+0x26c>
		canbase->CAN_MCR |= (1U << ABOM);
 80026f6:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <LL_CAN_Init+0x260>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b02      	ldr	r3, [pc, #8]	@ (8002708 <LL_CAN_Init+0x260>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e00d      	b.n	8002724 <LL_CAN_Init+0x27c>
 8002708:	2000019c 	.word	0x2000019c
 800270c:	40006400 	.word	0x40006400
 8002710:	40006800 	.word	0x40006800
	else
		(canbase->CAN_MCR) &= ~(1U << ABOM);
 8002714:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <LL_CAN_Init+0x28c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <LL_CAN_Init+0x28c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002722:	601a      	str	r2, [r3, #0]

	return status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	2000019c 	.word	0x2000019c

08002738 <LL_CAN_ConfigFilter>:
 * @return The function `ErrorStatus LL_CAN_ConfigFilter(LL_CAN_Handler_t *hcan, LL_CAN_FilterTypeDef_t
 * *hfilter)` is returning the status of the configuration process, which is either `SUCCESS` or
 * `ERROR`.
 */
ErrorStatus LL_CAN_ConfigFilter(LL_CAN_Handler_t *hcan, LL_CAN_FilterTypeDef_t *hfilter)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
	ErrorStatus status = ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
	uint32_t filter_bank_pos;
	// Check CAN`s instance is CAN1 or CAN2
	status = SUCCESS;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
	if (hcan->Instance == _CAN1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <LL_CAN_ConfigFilter+0x26>
	{
		canbase = _CAN1_REG_BASE;
 8002752:	4b7c      	ldr	r3, [pc, #496]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 8002754:	4a7c      	ldr	r2, [pc, #496]	@ (8002948 <LL_CAN_ConfigFilter+0x210>)
 8002756:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	e004      	b.n	8002768 <LL_CAN_ConfigFilter+0x30>
	}
	else
	{
		canbase = _CAN2_REG_BASE;
 800275e:	4b79      	ldr	r3, [pc, #484]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 8002760:	4a7a      	ldr	r2, [pc, #488]	@ (800294c <LL_CAN_ConfigFilter+0x214>)
 8002762:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 8002764:	2300      	movs	r3, #0
 8002766:	73fb      	strb	r3, [r7, #15]
	assert_param(hfilter->SlaveStartFilterBank);

	// Don`t have SlaveStartFilterBank configuration

	// Init filter mode
	(canbase->CAN_FMR) |= (1U << FINIT);
 8002768:	4b76      	ldr	r3, [pc, #472]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002770:	4b74      	ldr	r3, [pc, #464]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	// Select the start filter number of CAN2 slave instance
	if (hcan->Instance == _CAN1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d115      	bne.n	80027b0 <LL_CAN_ConfigFilter+0x78>
	{
		(canbase->CAN_FMR) &= ~(1U << CAN2SB);
 8002784:	4b6f      	ldr	r3, [pc, #444]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800278c:	4b6d      	ldr	r3, [pc, #436]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002794:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
		(canbase->CAN_FMR) |= ((hfilter->SlaveStartFilterBank) << CAN2SB);
 8002798:	4b6a      	ldr	r3, [pc, #424]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	021a      	lsls	r2, r3, #8
 80027a6:	4b67      	ldr	r3, [pc, #412]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	}

	// Convert filter bank number into bit position
	filter_bank_pos = (1U << ((hfilter->FilterBank) & 0x1FU));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	2201      	movs	r2, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	60bb      	str	r3, [r7, #8]

	// Filter deactivation
	(canbase->CAN_FA1R) &= ~(filter_bank_pos);
 80027c0:	4b60      	ldr	r3, [pc, #384]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8d3 121c 	ldr.w	r1, [r3, #540]	@ 0x21c
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	43da      	mvns	r2, r3
 80027cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	400a      	ands	r2, r1
 80027d2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	// Config filter scale
	if (hfilter->FilterScale == _CAN_FILTERSCALE_16BIT)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d127      	bne.n	800282e <LL_CAN_ConfigFilter+0xf6>
	{
		(canbase->CAN_FS1R) &= ~(filter_bank_pos);
 80027de:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8d3 120c 	ldr.w	r1, [r3, #524]	@ 0x20c
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	43da      	mvns	r2, r3
 80027ea:	4b56      	ldr	r3, [pc, #344]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	400a      	ands	r2, r1
 80027f0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

		// First 16-bit identifier and First 16-bit mask
		// Or First 16-bit identifier and Second 16-bit identifier
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdLow) << 16U) |
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	0418      	lsls	r0, r3, #16
			(0x0000FFFFU & (uint32_t)hfilter->FilterIdLow);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	b299      	uxth	r1, r3
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
 8002800:	4b50      	ldr	r3, [pc, #320]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	6952      	ldr	r2, [r2, #20]
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdLow) << 16U) |
 8002808:	4301      	orrs	r1, r0
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
 800280a:	3248      	adds	r2, #72	@ 0x48
 800280c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

		// Second 16-bit identifier and Second 16-bit mask */
		//  Or Third 16-bit identifier and Fourth 16-bit identifier */
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdHigh) << 16U) |
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	0418      	lsls	r0, r3, #16
			(0x0000FFFFU & (uint32_t)hfilter->FilterIdHigh);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b29a      	uxth	r2, r3
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
 800281c:	4b49      	ldr	r3, [pc, #292]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 800281e:	6819      	ldr	r1, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdHigh) << 16U) |
 8002824:	4302      	orrs	r2, r0
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
 8002826:	3348      	adds	r3, #72	@ 0x48
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	605a      	str	r2, [r3, #4]
	}
	if (hfilter->FilterScale == _CAN_FILTERSCALE_32BIT)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d126      	bne.n	8002884 <LL_CAN_ConfigFilter+0x14c>
	{
		(canbase->CAN_FS1R) |= (filter_bank_pos);
 8002836:	4b43      	ldr	r3, [pc, #268]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8d3 120c 	ldr.w	r1, [r3, #524]	@ 0x20c
 800283e:	4b41      	ldr	r3, [pc, #260]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	430a      	orrs	r2, r1
 8002846:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

		// 32-bit identifier or First 32-bit identifier
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
			((0x0000FFFFU & (uint32_t)hfilter->FilterIdHigh) << 16U) |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	0418      	lsls	r0, r3, #16
			(0x0000FFFFU & (uint32_t)hfilter->FilterIdLow);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	b299      	uxth	r1, r3
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
 8002856:	4b3b      	ldr	r3, [pc, #236]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	6952      	ldr	r2, [r2, #20]
			((0x0000FFFFU & (uint32_t)hfilter->FilterIdHigh) << 16U) |
 800285e:	4301      	orrs	r1, r0
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
 8002860:	3248      	adds	r2, #72	@ 0x48
 8002862:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

		// 32-bit mask or Second 32-bit identifier
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdHigh) << 16U) |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0418      	lsls	r0, r3, #16
			(0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdLow);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	b29a      	uxth	r2, r3
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
 8002872:	4b34      	ldr	r3, [pc, #208]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 8002874:	6819      	ldr	r1, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdHigh) << 16U) |
 800287a:	4302      	orrs	r2, r0
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
 800287c:	3348      	adds	r3, #72	@ 0x48
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	440b      	add	r3, r1
 8002882:	605a      	str	r2, [r3, #4]
	}

	// Config filter mode
	if (hfilter->FilterMode == _CAN_FILTERMODE_IDMASK)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10b      	bne.n	80028a4 <LL_CAN_ConfigFilter+0x16c>
	{
		(canbase->CAN_FM1R) &= ~(filter_bank_pos);
 800288c:	4b2d      	ldr	r3, [pc, #180]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	43da      	mvns	r2, r3
 8002898:	4b2a      	ldr	r3, [pc, #168]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	400a      	ands	r2, r1
 800289e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80028a2:	e009      	b.n	80028b8 <LL_CAN_ConfigFilter+0x180>
	}
	else
	{
		(canbase->CAN_FM1R) |= (filter_bank_pos);
 80028a4:	4b27      	ldr	r3, [pc, #156]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 80028ac:	4b25      	ldr	r3, [pc, #148]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	}
	// Config filter FIFO assignment (FIFO0 or FIFO1)
	if (hfilter->FilterFIFOAssignment == _CAN_FILTER_FIFO0)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <LL_CAN_ConfigFilter+0x1a0>
	{
		(canbase->CAN_FFA1R) &= ~(filter_bank_pos);
 80028c0:	4b20      	ldr	r3, [pc, #128]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	43da      	mvns	r2, r3
 80028cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	400a      	ands	r2, r1
 80028d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80028d6:	e009      	b.n	80028ec <LL_CAN_ConfigFilter+0x1b4>
	}
	else
	{
		(canbase->CAN_FFA1R) |= (filter_bank_pos);
 80028d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 80028e0:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	}

	// Filter activation
	if (hfilter->FilterActivation == _CAN_FILTER_ENABLE)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10a      	bne.n	800290a <LL_CAN_ConfigFilter+0x1d2>
	{
		(canbase->CAN_FA1R) |= (filter_bank_pos);
 80028f4:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8d3 121c 	ldr.w	r1, [r3, #540]	@ 0x21c
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	430a      	orrs	r2, r1
 8002904:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 8002908:	e00a      	b.n	8002920 <LL_CAN_ConfigFilter+0x1e8>
	}
	else
	{
		(canbase->CAN_FA1R) &= ~(filter_bank_pos);
 800290a:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8d3 121c 	ldr.w	r1, [r3, #540]	@ 0x21c
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	43da      	mvns	r2, r3
 8002916:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	400a      	ands	r2, r1
 800291c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	}

	// Leave the initialisation mode for the filter
	(canbase->CAN_FMR) &= ~(1U << FINIT);
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <LL_CAN_ConfigFilter+0x20c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	return status;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	2000019c 	.word	0x2000019c
 8002948:	40006400 	.word	0x40006400
 800294c:	40006800 	.word	0x40006800

08002950 <LL_CAN_Start>:
 *
 * @return The function LL_CAN_Start is returning an ErrorStatus enum value, which can be either
 * SUCCESS or ERROR.
 */
ErrorStatus LL_CAN_Start(LL_CAN_Handler_t *hcan)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	ErrorStatus status = ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
	uint8_t time_out = 50;
 800295c:	2332      	movs	r3, #50	@ 0x32
 800295e:	737b      	strb	r3, [r7, #13]
	uint8_t time_start = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	73bb      	strb	r3, [r7, #14]
	if (hcan->Instance == _CAN1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <LL_CAN_Start+0x28>
	{
		canbase = _CAN1_REG_BASE;
 800296c:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <LL_CAN_Start+0x88>)
 800296e:	4a1b      	ldr	r2, [pc, #108]	@ (80029dc <LL_CAN_Start+0x8c>)
 8002970:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
 8002976:	e008      	b.n	800298a <LL_CAN_Start+0x3a>
	}
	else if (hcan->Instance == _CAN2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d104      	bne.n	800298a <LL_CAN_Start+0x3a>
	{
		canbase = _CAN2_REG_BASE;
 8002980:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <LL_CAN_Start+0x88>)
 8002982:	4a17      	ldr	r2, [pc, #92]	@ (80029e0 <LL_CAN_Start+0x90>)
 8002984:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
	}

	// Leave Initialization mode
	(canbase->CAN_MCR) &= ~(1U << INRQ);
 800298a:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <LL_CAN_Start+0x88>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <LL_CAN_Start+0x88>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
	// Wait until INAK bit has been cleared by hardware.
	while (((canbase->CAN_MSR) & (1U << INAK)) && (time_start < time_out))
 800299a:	e002      	b.n	80029a2 <LL_CAN_Start+0x52>
	{
		++time_start;
 800299c:	7bbb      	ldrb	r3, [r7, #14]
 800299e:	3301      	adds	r3, #1
 80029a0:	73bb      	strb	r3, [r7, #14]
	while (((canbase->CAN_MSR) & (1U << INAK)) && (time_start < time_out))
 80029a2:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <LL_CAN_Start+0x88>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <LL_CAN_Start+0x68>
 80029b0:	7bba      	ldrb	r2, [r7, #14]
 80029b2:	7b7b      	ldrb	r3, [r7, #13]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d3f1      	bcc.n	800299c <LL_CAN_Start+0x4c>
	}
	if (time_start > time_out)
 80029b8:	7bba      	ldrb	r2, [r7, #14]
 80029ba:	7b7b      	ldrb	r3, [r7, #13]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d902      	bls.n	80029c6 <LL_CAN_Start+0x76>
		status = ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e001      	b.n	80029ca <LL_CAN_Start+0x7a>
	else
		status = SUCCESS;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
	return status;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	2000019c 	.word	0x2000019c
 80029dc:	40006400 	.word	0x40006400
 80029e0:	40006800 	.word	0x40006800

080029e4 <LL_CAN_AddTxMessage>:
 *
 * @return The function `ErrorStatus LL_CAN_AddTxMessage` is returning the status of the operation,
 * which can be either `SUCCESS` or `ERROR`.
 */
ErrorStatus LL_CAN_AddTxMessage(LL_CAN_Handler_t *hcan, const uint8_t data[], LL_CAN_TxHeaderTypeDef_t *htxheader, uint32_t *TxMailBox)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
	ErrorStatus status = ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75fb      	strb	r3, [r7, #23]
	else
	{
		assert_param(htxheader->ExtId);
	}
	// Check CAN`s instance is CAN1 or CAN2
	if (hcan->Instance == _CAN1)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <LL_CAN_AddTxMessage+0x22>
	{
		canbase = _CAN1_REG_BASE;
 80029fe:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <LL_CAN_AddTxMessage+0x70>)
 8002a00:	4a15      	ldr	r2, [pc, #84]	@ (8002a58 <LL_CAN_AddTxMessage+0x74>)
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e002      	b.n	8002a0c <LL_CAN_AddTxMessage+0x28>
	}
	else
	{
		canbase = _CAN2_REG_BASE;
 8002a06:	4b13      	ldr	r3, [pc, #76]	@ (8002a54 <LL_CAN_AddTxMessage+0x70>)
 8002a08:	4a14      	ldr	r2, [pc, #80]	@ (8002a5c <LL_CAN_AddTxMessage+0x78>)
 8002a0a:	601a      	str	r2, [r3, #0]
	}

	// Check if any mailbox is empty
	if (((canbase->CAN_TSR) & (1U << TME0)) || ((canbase->CAN_TSR) & (1U << TME1)) || ((canbase->CAN_TSR) & (1U << TME2)))
 8002a0c:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <LL_CAN_AddTxMessage+0x70>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10d      	bne.n	8002a36 <LL_CAN_AddTxMessage+0x52>
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a54 <LL_CAN_AddTxMessage+0x70>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <LL_CAN_AddTxMessage+0x52>
 8002a28:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <LL_CAN_AddTxMessage+0x70>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <LL_CAN_AddTxMessage+0x64>
	{
		Trans(canbase, data, htxheader, TxMailBox);
 8002a36:	4b07      	ldr	r3, [pc, #28]	@ (8002a54 <LL_CAN_AddTxMessage+0x70>)
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	f000 f80e 	bl	8002a60 <Trans>
		status = SUCCESS;
 8002a44:	2300      	movs	r3, #0
 8002a46:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	2000019c 	.word	0x2000019c
 8002a58:	40006400 	.word	0x40006400
 8002a5c:	40006800 	.word	0x40006800

08002a60 <Trans>:
 * transmission, such as the message ID, data length, RTR bit, IDE bit, Transmit Global Time flag, etc.
 * @param TxMailBox The `TxMailBox` parameter is a pointer to a `uint32_t` variable where the function
 * will store the selected transmit mailbox for sending the CAN message.
 */
static void Trans(CAN_TypeDef_t *canbase, const uint8_t data[], LL_CAN_TxHeaderTypeDef_t *htxheader, uint32_t *TxMailBox)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]

	uint32_t transmitmailbox;

	// Select an empty transmit mailbox
	transmitmailbox = (((canbase->CAN_TSR) >> CODE) & 0x03);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	0e1b      	lsrs	r3, r3, #24
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	617b      	str	r3, [r7, #20]
	*TxMailBox = transmitmailbox;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	601a      	str	r2, [r3, #0]
	// Set up the ID
	if (htxheader->_IDE == _CAN_ID_STD)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10d      	bne.n	8002aa4 <Trans+0x44>
	{
		(canbase->sTxMailBox[transmitmailbox].TIR) = ((htxheader->StdId) << STID) | ((htxheader->_RTR) << RTR);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	055a      	lsls	r2, r3, #21
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68f9      	ldr	r1, [r7, #12]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3318      	adds	r3, #24
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	440b      	add	r3, r1
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e010      	b.n	8002ac6 <Trans+0x66>
	}
	else
	{
		(canbase->sTxMailBox[transmitmailbox].TIR) = (((htxheader->ExtId) << EXID) | ((htxheader->_RTR) << RTR) | ((htxheader->_IDE) << IDE));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	00da      	lsls	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3318      	adds	r3, #24
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	440b      	add	r3, r1
 8002ac4:	601a      	str	r2, [r3, #0]
	}

	// Set up the DLC
	(canbase->sTxMailBox[transmitmailbox].TDTR) = ((htxheader->_DLC) << DLC);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	68f9      	ldr	r1, [r7, #12]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3318      	adds	r3, #24
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	601a      	str	r2, [r3, #0]
	// Set up the Transmit Global Time mode
	if (htxheader->TransmitGlobalTime == ENABLE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7d1b      	ldrb	r3, [r3, #20]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d111      	bne.n	8002b04 <Trans+0xa4>
	{
		canbase->sTxMailBox[transmitmailbox].TDTR |= ((htxheader->TransmitGlobalTime) << TGT);
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3318      	adds	r3, #24
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	4413      	add	r3, r2
 8002aea:	3304      	adds	r3, #4
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7d1b      	ldrb	r3, [r3, #20]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3318      	adds	r3, #24
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	440b      	add	r3, r1
 8002b00:	3304      	adds	r3, #4
 8002b02:	601a      	str	r2, [r3, #0]
	}

	// Set up data
	(canbase->sTxMailBox[transmitmailbox].TDHR) = (((uint32_t)data[7] << CAN_TDHR_DATA7_Pos) | ((uint32_t)data[6] << CAN_TDHR_DATA6_Pos) | ((uint32_t)data[5] << CAN_TDHR_DATA5_Pos) | ((uint32_t)data[4] << CAN_TDHR_DATA4_Pos));
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	3307      	adds	r3, #7
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	061a      	lsls	r2, r3, #24
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	3306      	adds	r3, #6
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	431a      	orrs	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3305      	adds	r3, #5
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	3204      	adds	r2, #4
 8002b24:	7812      	ldrb	r2, [r2, #0]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	68f9      	ldr	r1, [r7, #12]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	440b      	add	r3, r1
 8002b30:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002b34:	601a      	str	r2, [r3, #0]
	(canbase->sTxMailBox[transmitmailbox].TDLR) = ((uint32_t)(data[3] << CAN_TDLR_DATA3_Pos) | ((uint32_t)data[2] << CAN_TDLR_DATA2_Pos) | ((uint32_t)data[1] << CAN_TDLR_DATA1_Pos) | ((uint32_t)data[0] << CAN_TDLR_DATA0_Pos));
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	3303      	adds	r3, #3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	061a      	lsls	r2, r3, #24
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3302      	adds	r3, #2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	041b      	lsls	r3, r3, #16
 8002b46:	431a      	orrs	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	4313      	orrs	r3, r2
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68f9      	ldr	r1, [r7, #12]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	440b      	add	r3, r1
 8002b60:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b64:	601a      	str	r2, [r3, #0]

	// Request transmission by enable bit TXRQ
	(canbase->sTxMailBox[transmitmailbox].TIR) |= (1UL << TXRQ);
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3318      	adds	r3, #24
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4413      	add	r3, r2
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3318      	adds	r3, #24
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	440b      	add	r3, r1
 8002b80:	601a      	str	r2, [r3, #0]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <LL_CAN_GetRxMessage>:
 * @return either SUCCESS or ERROR based on the conditions checked within the function. If the Rx FIFO
 * is empty or if there is a parameter error, the function will return ERROR. Otherwise, it will return
 * SUCCESS after successfully retrieving the CAN message data.
 */
ErrorStatus LL_CAN_GetRxMessage(LL_CAN_Handler_t *hcan, LL_CAN_RxHeaderTypeDef_t *hrxheader, uint8_t rxdata[], uint32_t RxFifo)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
	// Check the parameters
	assert_param(rxdata);
	assert_param(RxFifo);

	if (hcan->Instance == _CAN1)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d103      	bne.n	8002bae <LL_CAN_GetRxMessage+0x1e>
	{
		canbase = _CAN1_REG_BASE;
 8002ba6:	4b88      	ldr	r3, [pc, #544]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002ba8:	4a88      	ldr	r2, [pc, #544]	@ (8002dcc <LL_CAN_GetRxMessage+0x23c>)
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e002      	b.n	8002bb4 <LL_CAN_GetRxMessage+0x24>
	}
	else
	{
		canbase = _CAN2_REG_BASE;
 8002bae:	4b86      	ldr	r3, [pc, #536]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002bb0:	4a87      	ldr	r2, [pc, #540]	@ (8002dd0 <LL_CAN_GetRxMessage+0x240>)
 8002bb2:	601a      	str	r2, [r3, #0]
	}

	/* Check the Rx FIFO */
	if (RxFifo == _CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10e      	bne.n	8002bd8 <LL_CAN_GetRxMessage+0x48>
	{
		/* Check that the Rx FIFO 0 is not empty */
		if (((canbase->CAN_RF0R) & (1 << FMP0)) == 0U)
 8002bba:	4b83      	ldr	r3, [pc, #524]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d116      	bne.n	8002bf6 <LL_CAN_GetRxMessage+0x66>
		{
			/* Update error code */
			hcan->ErrorCode |= LL_CAN_ERROR_PARAM;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	619a      	str	r2, [r3, #24]

			return ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0f1      	b.n	8002dbc <LL_CAN_GetRxMessage+0x22c>
		}
	}
	else /* Rx element is assigned to Rx FIFO 1 */
	{
		/* Check that the Rx FIFO 1 is not empty */
		if (((canbase->CAN_RF1R) & (1 << FMP1)) == 0U)
 8002bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d107      	bne.n	8002bf6 <LL_CAN_GetRxMessage+0x66>
		{
			/* Update error code */
			hcan->ErrorCode |= LL_CAN_ERROR_PARAM;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	619a      	str	r2, [r3, #24]

			return ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0e2      	b.n	8002dbc <LL_CAN_GetRxMessage+0x22c>
		}
	}

	// Get ID
	hrxheader->_IDE = (((1U << IDE_rx) & (canbase->sFIFOMailBox[RxFifo].RIR)) >> IDE_rx);
 8002bf6:	4b74      	ldr	r3, [pc, #464]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	331b      	adds	r3, #27
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4413      	add	r3, r2
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	f003 0201 	and.w	r2, r3, #1
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	609a      	str	r2, [r3, #8]
	if (hrxheader->_IDE == _CAN_ID_STD)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <LL_CAN_GetRxMessage+0xa0>
	{
		hrxheader->StdId = (((0x7FF << STID_rx) & (canbase->sFIFOMailBox[RxFifo].RIR)) >> STID_rx);
 8002c16:	4b6c      	ldr	r3, [pc, #432]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	331b      	adds	r3, #27
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	4413      	add	r3, r2
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0d5b      	lsrs	r3, r3, #21
 8002c26:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e00b      	b.n	8002c48 <LL_CAN_GetRxMessage+0xb8>
	}
	else
	{
		hrxheader->ExtId = (((0x1FFFFFFF << EXID_rx) & (canbase->sFIFOMailBox[RxFifo].RIR)) >> EXID);
 8002c30:	4b65      	ldr	r3, [pc, #404]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	331b      	adds	r3, #27
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	4413      	add	r3, r2
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	08db      	lsrs	r3, r3, #3
 8002c40:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	605a      	str	r2, [r3, #4]
	}

	// Get Remote transmission request
	hrxheader->_RTR = (((1U << RTR_rx) & (canbase->sFIFOMailBox[RxFifo].RIR)) >> RTR_rx);
 8002c48:	4b5f      	ldr	r3, [pc, #380]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	331b      	adds	r3, #27
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	4413      	add	r3, r2
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	f003 0201 	and.w	r2, r3, #1
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60da      	str	r2, [r3, #12]
	if ((((0xF << DLC_rx) & (canbase->sFIFOMailBox[RxFifo].RDTR)) >> DLC_rx) >= 8U)
 8002c60:	4b59      	ldr	r3, [pc, #356]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	331b      	adds	r3, #27
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <LL_CAN_GetRxMessage+0xf0>
	{
		/* Truncate DLC to 8 if received field is over range */
		hrxheader->_DLC = 8U;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	e00b      	b.n	8002c98 <LL_CAN_GetRxMessage+0x108>
	}
	else
	{
		hrxheader->_DLC = (((0xF << DLC_rx) & (canbase->sFIFOMailBox[RxFifo].RDTR)) >> DLC_rx);
 8002c80:	4b51      	ldr	r3, [pc, #324]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	331b      	adds	r3, #27
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 020f 	and.w	r2, r3, #15
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	611a      	str	r2, [r3, #16]
	}

	hrxheader->FilterMatchIndex = (((0xFF << FMI_rx) & (canbase->sFIFOMailBox[RxFifo].RDTR)) >> FMI_rx);
 8002c98:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	331b      	adds	r3, #27
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0a1b      	lsrs	r3, r3, #8
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	619a      	str	r2, [r3, #24]
	hrxheader->Timestamp = (((0xFFFF << TIME_rx) & (canbase->sFIFOMailBox[RxFifo].RDTR)) >> TIME_rx);
 8002cb0:	4b45      	ldr	r3, [pc, #276]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	331b      	adds	r3, #27
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	615a      	str	r2, [r3, #20]

	/* Get the data */
	rxdata[0] = (uint8_t)(((0XFF << CAN_RDLR_DATA0_Pos) & (canbase->sFIFOMailBox[RxFifo].RDLR)) >> CAN_RDLR_DATA0_Pos);
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	701a      	strb	r2, [r3, #0]
	rxdata[1] = (uint8_t)(((0XFF << CAN_RDLR_DATA1_Pos) & (canbase->sFIFOMailBox[RxFifo].RDLR)) >> CAN_RDLR_DATA1_Pos);
 8002cde:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0a1a      	lsrs	r2, r3, #8
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]
	rxdata[2] = (uint8_t)(((0XFF << CAN_RDLR_DATA2_Pos) & (canbase->sFIFOMailBox[RxFifo].RDLR)) >> CAN_RDLR_DATA2_Pos);
 8002cf8:	4b33      	ldr	r3, [pc, #204]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0c1a      	lsrs	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]
	rxdata[3] = (uint8_t)(((0XFF << CAN_RDLR_DATA3_Pos) & (canbase->sFIFOMailBox[RxFifo].RDLR)) >> CAN_RDLR_DATA3_Pos);
 8002d12:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0e1a      	lsrs	r2, r3, #24
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3303      	adds	r3, #3
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]
	rxdata[4] = (uint8_t)(((0XFF << CAN_RDHR_DATA4_Pos) & (canbase->sFIFOMailBox[RxFifo].RDHR)) >> CAN_RDHR_DATA4_Pos);
 8002d2c:	4b26      	ldr	r3, [pc, #152]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]
	rxdata[5] = (uint8_t)(((0XFF << CAN_RDHR_DATA5_Pos) & (canbase->sFIFOMailBox[RxFifo].RDHR)) >> CAN_RDHR_DATA5_Pos);
 8002d44:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0a1a      	lsrs	r2, r3, #8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3305      	adds	r3, #5
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]
	rxdata[6] = (uint8_t)(((0XFF << CAN_RDHR_DATA6_Pos) & (canbase->sFIFOMailBox[RxFifo].RDHR)) >> CAN_RDHR_DATA6_Pos);
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0c1a      	lsrs	r2, r3, #16
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3306      	adds	r3, #6
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	701a      	strb	r2, [r3, #0]
	rxdata[7] = (uint8_t)(((0XFF << CAN_RDHR_DATA7_Pos) & (canbase->sFIFOMailBox[RxFifo].RDHR)) >> CAN_RDHR_DATA7_Pos);
 8002d78:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0e1a      	lsrs	r2, r3, #24
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3307      	adds	r3, #7
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

	/* Release the FIFO */
	if (RxFifo == _CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d108      	bne.n	8002daa <LL_CAN_GetRxMessage+0x21a>
	{
		/* Release RX FIFO 0 */
		(canbase->CAN_RF0R) |= (1U << RFOM0);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0220 	orr.w	r2, r2, #32
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	e007      	b.n	8002dba <LL_CAN_GetRxMessage+0x22a>
	}
	else /* Rx element is assigned to Rx FIFO 1 */
	{
		/* Release RX FIFO 1 */
		(canbase->CAN_RF1R) |= (1U << RFOM1);
 8002daa:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <LL_CAN_GetRxMessage+0x238>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0220 	orr.w	r2, r2, #32
 8002db8:	611a      	str	r2, [r3, #16]
	}

	return SUCCESS;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	2000019c 	.word	0x2000019c
 8002dcc:	40006400 	.word	0x40006400
 8002dd0:	40006800 	.word	0x40006800

08002dd4 <LL_CAN_ActivateInterrupt>:
 * specify which interrupts should be enabled. It is a bitmask where each bit corresponds to a specific
 * interrupt source. By ORing the `ActiveITs` bitmask with the `CAN_IER` register,
 */

void LL_CAN_ActivateInterrupt(LL_CAN_Handler_t *hcan, uint32_t ActiveITs)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
	if (hcan->Instance == _CAN1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <LL_CAN_ActivateInterrupt+0x1a>
	{
		canbase = _CAN1_REG_BASE;
 8002de6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <LL_CAN_ActivateInterrupt+0x3c>)
 8002de8:	4a0a      	ldr	r2, [pc, #40]	@ (8002e14 <LL_CAN_ActivateInterrupt+0x40>)
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e002      	b.n	8002df4 <LL_CAN_ActivateInterrupt+0x20>
	}
	else
	{
		canbase = _CAN2_REG_BASE;
 8002dee:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <LL_CAN_ActivateInterrupt+0x3c>)
 8002df0:	4a09      	ldr	r2, [pc, #36]	@ (8002e18 <LL_CAN_ActivateInterrupt+0x44>)
 8002df2:	601a      	str	r2, [r3, #0]
	}
	/* Enable the selected interrupts */
	(canbase->CAN_IER) |= (ActiveITs);
 8002df4:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <LL_CAN_ActivateInterrupt+0x3c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6959      	ldr	r1, [r3, #20]
 8002dfa:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <LL_CAN_ActivateInterrupt+0x3c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	615a      	str	r2, [r3, #20]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	2000019c 	.word	0x2000019c
 8002e14:	40006400 	.word	0x40006400
 8002e18:	40006800 	.word	0x40006800

08002e1c <LL_CAN_TxMailbox0AbortCallback>:
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_TxMailbox0AbortCallback(LL_CAN_Handler_t *hcan)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_TxMailbox0AbortCallback could be implemented in the
			  user file
	 */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_CAN_TxMailbox1AbortCallback>:
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_TxMailbox1AbortCallback(LL_CAN_Handler_t *hcan)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_TxMailbox1AbortCallback could be implemented in the
			  user file
	 */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LL_CAN_TxMailbox2AbortCallback>:
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_TxMailbox2AbortCallback(LL_CAN_Handler_t *hcan)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_TxMailbox2AbortCallback could be implemented in the
			  user file
	 */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_CAN_RxFifo0FullCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_RxFifo0FullCallback(LL_CAN_Handler_t *hcan)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_RxFifo0FullCallback could be implemented in the user
			  file
	 */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_CAN_RxFifo1MsgPendingCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_RxFifo1MsgPendingCallback(LL_CAN_Handler_t *hcan)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_RxFifo1MsgPendingCallback could be implemented in the
			  user file
	 */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_CAN_RxFifo1FullCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_RxFifo1FullCallback(LL_CAN_Handler_t *hcan)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_RxFifo1FullCallback could be implemented in the user
			  file
	 */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_CAN_SleepCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_SleepCallback(LL_CAN_Handler_t *hcan)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	UNUSED(&hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_SleepCallback could be implemented in the user file
	 */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_CAN_WakeUpFromRxMsgCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_WakeUpFromRxMsgCallback(LL_CAN_Handler_t *hcan)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_WakeUpFromRxMsgCallback could be implemented in the
			  user file
	 */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_CAN_ErrorCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_ErrorCallback(LL_CAN_Handler_t *hcan)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	UNUSED(&hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_ErrorCallback could be implemented in the user file
	 */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_CAN_IRQHandler>:
 * `CAN_HandleTypeDef` structure, which typically contains all the necessary information and
 * configurations for handling a CAN peripheral in an STM32 microcontroller. This structure is used to
 * access the CAN hardware registers and manage the CAN
 */
void LL_CAN_IRQHandler(LL_CAN_Handler_t *hcan)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	@ 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

	// Check CAN instance is CAN1 or CAN2
	if (hcan->Instance == _CAN1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <LL_CAN_IRQHandler+0x18>
	{
		canbase = _CAN1_REG_BASE;
 8002ee0:	4b51      	ldr	r3, [pc, #324]	@ (8003028 <LL_CAN_IRQHandler+0x158>)
 8002ee2:	4a52      	ldr	r2, [pc, #328]	@ (800302c <LL_CAN_IRQHandler+0x15c>)
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e002      	b.n	8002eee <LL_CAN_IRQHandler+0x1e>
	}
	else
	{
		canbase = _CAN2_REG_BASE;
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8003028 <LL_CAN_IRQHandler+0x158>)
 8002eea:	4a51      	ldr	r2, [pc, #324]	@ (8003030 <LL_CAN_IRQHandler+0x160>)
 8002eec:	601a      	str	r2, [r3, #0]
	}
	uint32_t errorcode = LL_CAN_ERROR_NONE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t interrupts = (canbase->CAN_IER);
 8002ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8003028 <LL_CAN_IRQHandler+0x158>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	613b      	str	r3, [r7, #16]
	uint32_t msrflags = (canbase->CAN_MSR);
 8002efa:	4b4b      	ldr	r3, [pc, #300]	@ (8003028 <LL_CAN_IRQHandler+0x158>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	623b      	str	r3, [r7, #32]
	uint32_t tsrflags = (canbase->CAN_TSR);
 8002f02:	4b49      	ldr	r3, [pc, #292]	@ (8003028 <LL_CAN_IRQHandler+0x158>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	61fb      	str	r3, [r7, #28]
	uint32_t rf0rflags = (canbase->CAN_RF0R);
 8002f0a:	4b47      	ldr	r3, [pc, #284]	@ (8003028 <LL_CAN_IRQHandler+0x158>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61bb      	str	r3, [r7, #24]
	uint32_t rf1rflags = (canbase->CAN_RF1R);
 8002f12:	4b45      	ldr	r3, [pc, #276]	@ (8003028 <LL_CAN_IRQHandler+0x158>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	617b      	str	r3, [r7, #20]
	uint32_t esrflags = (canbase->CAN_ESR);
 8002f1a:	4b43      	ldr	r3, [pc, #268]	@ (8003028 <LL_CAN_IRQHandler+0x158>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	60fb      	str	r3, [r7, #12]

	/* Transmit Mailbox empty interrupt management *****************************/
	if ((interrupts & (1U << TMEIE)) != 0U)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8086 	beq.w	800303a <LL_CAN_IRQHandler+0x16a>
	{
		/* Transmit Mailbox 0 management *****************************************/
		if ((tsrflags & (1U << RQCP0)) != 0U)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d027      	beq.n	8002f88 <LL_CAN_IRQHandler+0xb8>
		{
			/* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
			(canbase->CAN_TSR) |= (1U << RQCP0);
 8002f38:	4b3b      	ldr	r3, [pc, #236]	@ (8003028 <LL_CAN_IRQHandler+0x158>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <LL_CAN_IRQHandler+0x158>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	609a      	str	r2, [r3, #8]

			if ((tsrflags & (1U << TXOK0)) != 0U)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <LL_CAN_IRQHandler+0x8a>
			{
				/* Transmission Mailbox 0 complete callback */
				LL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd fef8 	bl	8000d48 <LL_CAN_TxMailbox0CompleteCallback>
 8002f58:	e016      	b.n	8002f88 <LL_CAN_IRQHandler+0xb8>
			}
			else
			{
				if ((tsrflags & (1U << ALST0)) != 0U)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <LL_CAN_IRQHandler+0x9e>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_ALST0;
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6c:	e00c      	b.n	8002f88 <LL_CAN_IRQHandler+0xb8>
				}
				else if ((tsrflags & (1U << TERR0)) != 0U)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d004      	beq.n	8002f82 <LL_CAN_IRQHandler+0xb2>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_TERR0;
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f80:	e002      	b.n	8002f88 <LL_CAN_IRQHandler+0xb8>
				}
				else
				{
					/* Transmission Mailbox 0 abort callback */
					LL_CAN_TxMailbox0AbortCallback(hcan);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ff4a 	bl	8002e1c <LL_CAN_TxMailbox0AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 1 management *****************************************/
		if ((tsrflags & (1U << RQCP1)) != 0U)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d023      	beq.n	8002fda <LL_CAN_IRQHandler+0x10a>
		{
			/* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
			tsrflags |= (1U << RQCP1);
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f98:	61fb      	str	r3, [r7, #28]

			if ((tsrflags & (1U << TXOK1)) != 0U)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <LL_CAN_IRQHandler+0xdc>
			{
				/* Transmission Mailbox 1 complete callback */
				LL_CAN_TxMailbox1CompleteCallback(hcan);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7fd feed 	bl	8000d84 <LL_CAN_TxMailbox1CompleteCallback>
 8002faa:	e016      	b.n	8002fda <LL_CAN_IRQHandler+0x10a>
			}
			else
			{
				if ((tsrflags & (1U << ALST1)) != 0U)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <LL_CAN_IRQHandler+0xf0>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_ALST1;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbe:	e00c      	b.n	8002fda <LL_CAN_IRQHandler+0x10a>
				}
				else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d004      	beq.n	8002fd4 <LL_CAN_IRQHandler+0x104>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_TERR1;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd2:	e002      	b.n	8002fda <LL_CAN_IRQHandler+0x10a>
				}
				else
				{
					/* Transmission Mailbox 1 abort callback */
					LL_CAN_TxMailbox1AbortCallback(hcan);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff2b 	bl	8002e30 <LL_CAN_TxMailbox1AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 2 management *****************************************/
		if ((tsrflags & (1U << RQCP2)) != 0U)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d02a      	beq.n	800303a <LL_CAN_IRQHandler+0x16a>
		{
			/* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
			tsrflags |= (1U << RQCP2);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fea:	61fb      	str	r3, [r7, #28]

			if ((tsrflags & (1U << TXOK2)) != 0U)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <LL_CAN_IRQHandler+0x12e>
			{
				/* Transmission Mailbox 2 complete callback */
				LL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd fee2 	bl	8000dc0 <LL_CAN_TxMailbox2CompleteCallback>
 8002ffc:	e01d      	b.n	800303a <LL_CAN_IRQHandler+0x16a>
			}
			else
			{
				if ((tsrflags & (1U << ALST2)) != 0U)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <LL_CAN_IRQHandler+0x142>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_ALST2;
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003010:	e013      	b.n	800303a <LL_CAN_IRQHandler+0x16a>
				}
				else if ((tsrflags & (1U << TERR2)) != 0U)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <LL_CAN_IRQHandler+0x164>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_TERR2;
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
 8003024:	e009      	b.n	800303a <LL_CAN_IRQHandler+0x16a>
 8003026:	bf00      	nop
 8003028:	2000019c 	.word	0x2000019c
 800302c:	40006400 	.word	0x40006400
 8003030:	40006800 	.word	0x40006800
				}
				else
				{
					/* Transmission Mailbox 2 abort callback */
					LL_CAN_TxMailbox2AbortCallback(hcan);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff05 	bl	8002e44 <LL_CAN_TxMailbox2AbortCallback>
			}
		}
	}

	/* Receive FIFO 0 overrun interrupt management *****************************/
	if ((interrupts & (1U << FOVIE0)) != 0U)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d010      	beq.n	8003066 <LL_CAN_IRQHandler+0x196>
	{
		if ((rf0rflags & (1U << FOVR0)) != 0U)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <LL_CAN_IRQHandler+0x196>
		{
			/* Set CAN error code to Rx Fifo 0 overrun error */
			errorcode |= LL_CAN_ERROR_RX_FOV0;
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Clear FIFO0 Overrun Flag */
			(canbase->CAN_RF0R) &= ~(1U << FOVR0);
 8003056:	4b82      	ldr	r3, [pc, #520]	@ (8003260 <LL_CAN_IRQHandler+0x390>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	4b80      	ldr	r3, [pc, #512]	@ (8003260 <LL_CAN_IRQHandler+0x390>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0210 	bic.w	r2, r2, #16
 8003064:	60da      	str	r2, [r3, #12]
		}
	}

	/* Receive FIFO 0 full interrupt management ********************************/
	if ((interrupts & (1U << FFIE0)) != 0U)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <LL_CAN_IRQHandler+0x1b8>
	{
		if ((rf0rflags & (1U << FULL0)) != 0U)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <LL_CAN_IRQHandler+0x1b8>
		{
			/* Clear FIFO 0 full Flag */
			rf0rflags &= ~(1U << FULL0);
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f023 0308 	bic.w	r3, r3, #8
 8003080:	61bb      	str	r3, [r7, #24]

			/* Receive FIFO 0 full Callback */
			LL_CAN_RxFifo0FullCallback(hcan);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff fee8 	bl	8002e58 <LL_CAN_RxFifo0FullCallback>
		}
	}

	/* Receive FIFO 0 message pending interrupt management *********************/
	if ((interrupts & (1U << FMPIE0)) != 0U)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <LL_CAN_IRQHandler+0x1d2>
	{
		/* Check if message is still pending */
		if ((rf0rflags & (3U << FMP0)) != 0U)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <LL_CAN_IRQHandler+0x1d2>
		{
			/* Receive FIFO 0 message pending Callback */
			LL_CAN_RxFifo0MsgPendingCallback(hcan);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fd fead 	bl	8000dfc <LL_CAN_RxFifo0MsgPendingCallback>
		}
	}

	/* Receive FIFO 1 overrun interrupt management *****************************/
	if ((interrupts & (1U << FOVIE1)) != 0U)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00c      	beq.n	80030c6 <LL_CAN_IRQHandler+0x1f6>
	{
		if ((rf1rflags & (1U << FOVR1)) != 0U)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <LL_CAN_IRQHandler+0x1f6>
		{
			/* Set CAN error code to Rx Fifo 1 overrun error */
			errorcode |= LL_CAN_ERROR_RX_FOV1;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Clear FIFO1 Overrun Flag */
			rf1rflags &= ~(1U << FOVR1);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f023 0310 	bic.w	r3, r3, #16
 80030c4:	617b      	str	r3, [r7, #20]
		}
	}

	/* Receive FIFO 1 full interrupt management ********************************/
	if ((interrupts & (1U << FFIE1)) != 0U)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <LL_CAN_IRQHandler+0x218>
	{
		if ((rf1rflags & (1U << FULL1)) != 0U)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d006      	beq.n	80030e8 <LL_CAN_IRQHandler+0x218>
		{
			/* Clear FIFO 1 full Flag */
			rf1rflags &= ~(1U << FULL1);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f023 0308 	bic.w	r3, r3, #8
 80030e0:	617b      	str	r3, [r7, #20]
			/* Receive FIFO 1 full Callback */
			LL_CAN_RxFifo1FullCallback(hcan);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff fecc 	bl	8002e80 <LL_CAN_RxFifo1FullCallback>
		}
	}

	/* Receive FIFO 1 message pending interrupt management *********************/
	if ((interrupts & (1U << FMPIE1)) != 0U)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <LL_CAN_IRQHandler+0x232>
	{
		/* Check if message is still pending */
		if ((rf1rflags & (3U << FMP1)) != 0U)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <LL_CAN_IRQHandler+0x232>
		{
			/* Receive FIFO 1 message pending Callback */
			LL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff feb5 	bl	8002e6c <LL_CAN_RxFifo1MsgPendingCallback>
		}
	}

	/* Sleep interrupt management *********************************************/
	if ((interrupts & (1U << SLKIE)) != 0U)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <LL_CAN_IRQHandler+0x254>
	{
		if ((msrflags & (1U << SLAKI)) != 0U)
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <LL_CAN_IRQHandler+0x254>
		{
			/* Clear Sleep interrupt Flag */
			msrflags &= ~(1U << SLAKI);
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	f023 0310 	bic.w	r3, r3, #16
 800311c:	623b      	str	r3, [r7, #32]

			/* Sleep Callback */
			LL_CAN_SleepCallback(hcan);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff feb8 	bl	8002e94 <LL_CAN_SleepCallback>
		}
	}

	/* WakeUp interrupt management *********************************************/
	if ((interrupts & (1U << WKUIE)) != 0U)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <LL_CAN_IRQHandler+0x276>
	{
		if ((msrflags & (WKUI)) != 0U)
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <LL_CAN_IRQHandler+0x276>
		{
			/* Clear WakeUp Flag */
			msrflags &= ~(1U << WKUI);
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	f023 0308 	bic.w	r3, r3, #8
 800313e:	623b      	str	r3, [r7, #32]

			/* WakeUp Callback */
			LL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff feb1 	bl	8002ea8 <LL_CAN_WakeUpFromRxMsgCallback>
		}
	}

	/* Error interrupts management *********************************************/
	if ((interrupts & (1U << ERRIE)) != 0U)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d077      	beq.n	8003240 <LL_CAN_IRQHandler+0x370>
	{
		if ((msrflags & (1U << ERRI)) != 0U)
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d06e      	beq.n	8003238 <LL_CAN_IRQHandler+0x368>
		{
			/* Check Error Warning Flag */
			if (((interrupts & (1U << EWGIE)) != 0U) &&
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <LL_CAN_IRQHandler+0x2a6>
				((esrflags & (1U << EWGF)) != 0U))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0301 	and.w	r3, r3, #1
			if (((interrupts & (1U << EWGIE)) != 0U) &&
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <LL_CAN_IRQHandler+0x2a6>
			{
				/* Set CAN error code to Error Warning */
				errorcode |= LL_CAN_ERROR_EWG;
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24

				/* No need for clear of Error Warning Flag as read-only */
			}

			/* Check Error Passive Flag */
			if (((interrupts & (1U << EPVIE)) != 0U) &&
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <LL_CAN_IRQHandler+0x2c2>
				((esrflags & (1U << EPVF)) != 0U))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0302 	and.w	r3, r3, #2
			if (((interrupts & (1U << EPVIE)) != 0U) &&
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <LL_CAN_IRQHandler+0x2c2>
			{
				/* Set CAN error code to Error Passive */
				errorcode |= LL_CAN_ERROR_EPV;
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24

				/* No need for clear of Error Passive Flag as read-only */
			}

			/* Check Bus-off Flag */
			if (((interrupts & (1U << BOFIE)) != 0U) &&
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <LL_CAN_IRQHandler+0x2de>
				((esrflags & (1U << BOFF)) != 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0304 	and.w	r3, r3, #4
			if (((interrupts & (1U << BOFIE)) != 0U) &&
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <LL_CAN_IRQHandler+0x2de>
			{
				/* Set CAN error code to Bus-Off */
				errorcode |= LL_CAN_ERROR_BOF;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	f043 0304 	orr.w	r3, r3, #4
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24

				/* No need for clear of Error Bus-Off as read-only */
			}

			/* Check Last Error Code Flag */
			if (((interrupts & (1U << LECIE)) != 0U) &&
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d03f      	beq.n	8003238 <LL_CAN_IRQHandler+0x368>
				((esrflags & (1U << LEC)) != 0U))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0310 	and.w	r3, r3, #16
			if (((interrupts & (1U << LECIE)) != 0U) &&
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d03a      	beq.n	8003238 <LL_CAN_IRQHandler+0x368>
			{
				switch (esrflags & (7U << LEC))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031c8:	2b60      	cmp	r3, #96	@ 0x60
 80031ca:	d02b      	beq.n	8003224 <LL_CAN_IRQHandler+0x354>
 80031cc:	2b60      	cmp	r3, #96	@ 0x60
 80031ce:	d82e      	bhi.n	800322e <LL_CAN_IRQHandler+0x35e>
 80031d0:	2b50      	cmp	r3, #80	@ 0x50
 80031d2:	d022      	beq.n	800321a <LL_CAN_IRQHandler+0x34a>
 80031d4:	2b50      	cmp	r3, #80	@ 0x50
 80031d6:	d82a      	bhi.n	800322e <LL_CAN_IRQHandler+0x35e>
 80031d8:	2b40      	cmp	r3, #64	@ 0x40
 80031da:	d019      	beq.n	8003210 <LL_CAN_IRQHandler+0x340>
 80031dc:	2b40      	cmp	r3, #64	@ 0x40
 80031de:	d826      	bhi.n	800322e <LL_CAN_IRQHandler+0x35e>
 80031e0:	2b30      	cmp	r3, #48	@ 0x30
 80031e2:	d010      	beq.n	8003206 <LL_CAN_IRQHandler+0x336>
 80031e4:	2b30      	cmp	r3, #48	@ 0x30
 80031e6:	d822      	bhi.n	800322e <LL_CAN_IRQHandler+0x35e>
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d002      	beq.n	80031f2 <LL_CAN_IRQHandler+0x322>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d005      	beq.n	80031fc <LL_CAN_IRQHandler+0x32c>
				case ((4U << LEC) | (2U << LEC)):
					/* Set CAN error code to CRC error */
					errorcode |= LL_CAN_ERROR_CRC;
					break;
				default:
					break;
 80031f0:	e01d      	b.n	800322e <LL_CAN_IRQHandler+0x35e>
					errorcode |= LL_CAN_ERROR_STF;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	f043 0308 	orr.w	r3, r3, #8
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80031fa:	e019      	b.n	8003230 <LL_CAN_IRQHandler+0x360>
					errorcode |= LL_CAN_ERROR_FOR;
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	f043 0310 	orr.w	r3, r3, #16
 8003202:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8003204:	e014      	b.n	8003230 <LL_CAN_IRQHandler+0x360>
					errorcode |= LL_CAN_ERROR_ACK;
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	f043 0320 	orr.w	r3, r3, #32
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800320e:	e00f      	b.n	8003230 <LL_CAN_IRQHandler+0x360>
					errorcode |= LL_CAN_ERROR_BR;
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003216:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8003218:	e00a      	b.n	8003230 <LL_CAN_IRQHandler+0x360>
					errorcode |= LL_CAN_ERROR_BD;
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003220:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8003222:	e005      	b.n	8003230 <LL_CAN_IRQHandler+0x360>
					errorcode |= LL_CAN_ERROR_CRC;
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800322c:	e000      	b.n	8003230 <LL_CAN_IRQHandler+0x360>
					break;
 800322e:	bf00      	nop
				}

				/* Clear Last error code Flag */
				esrflags &= ~(7U << LEC);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003236:	60fb      	str	r3, [r7, #12]
			}
		}

		/* Clear ERRI Flag */
		msrflags &= ~(1U << ERRI);
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f023 0304 	bic.w	r3, r3, #4
 800323e:	623b      	str	r3, [r7, #32]
	}

	/* Call the Error call Back in case of Errors */
	if (errorcode != LL_CAN_ERROR_NONE)
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <LL_CAN_IRQHandler+0x388>
	{
		/* Update error code in handle */
		hcan->ErrorCode |= errorcode;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	619a      	str	r2, [r3, #24]

		LL_CAN_ErrorCallback(hcan);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fe32 	bl	8002ebc <LL_CAN_ErrorCallback>
	}
}
 8003258:	bf00      	nop
 800325a:	3728      	adds	r7, #40	@ 0x28
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	2000019c 	.word	0x2000019c

08003264 <siprintf>:
 8003264:	b40e      	push	{r1, r2, r3}
 8003266:	b500      	push	{lr}
 8003268:	b09c      	sub	sp, #112	@ 0x70
 800326a:	ab1d      	add	r3, sp, #116	@ 0x74
 800326c:	9002      	str	r0, [sp, #8]
 800326e:	9006      	str	r0, [sp, #24]
 8003270:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003274:	4809      	ldr	r0, [pc, #36]	@ (800329c <siprintf+0x38>)
 8003276:	9107      	str	r1, [sp, #28]
 8003278:	9104      	str	r1, [sp, #16]
 800327a:	4909      	ldr	r1, [pc, #36]	@ (80032a0 <siprintf+0x3c>)
 800327c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003280:	9105      	str	r1, [sp, #20]
 8003282:	6800      	ldr	r0, [r0, #0]
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	a902      	add	r1, sp, #8
 8003288:	f000 f98c 	bl	80035a4 <_svfiprintf_r>
 800328c:	9b02      	ldr	r3, [sp, #8]
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	b01c      	add	sp, #112	@ 0x70
 8003294:	f85d eb04 	ldr.w	lr, [sp], #4
 8003298:	b003      	add	sp, #12
 800329a:	4770      	bx	lr
 800329c:	20000014 	.word	0x20000014
 80032a0:	ffff0208 	.word	0xffff0208

080032a4 <__errno>:
 80032a4:	4b01      	ldr	r3, [pc, #4]	@ (80032ac <__errno+0x8>)
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000014 	.word	0x20000014

080032b0 <__libc_init_array>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	4d0d      	ldr	r5, [pc, #52]	@ (80032e8 <__libc_init_array+0x38>)
 80032b4:	4c0d      	ldr	r4, [pc, #52]	@ (80032ec <__libc_init_array+0x3c>)
 80032b6:	1b64      	subs	r4, r4, r5
 80032b8:	10a4      	asrs	r4, r4, #2
 80032ba:	2600      	movs	r6, #0
 80032bc:	42a6      	cmp	r6, r4
 80032be:	d109      	bne.n	80032d4 <__libc_init_array+0x24>
 80032c0:	4d0b      	ldr	r5, [pc, #44]	@ (80032f0 <__libc_init_array+0x40>)
 80032c2:	4c0c      	ldr	r4, [pc, #48]	@ (80032f4 <__libc_init_array+0x44>)
 80032c4:	f000 fc66 	bl	8003b94 <_init>
 80032c8:	1b64      	subs	r4, r4, r5
 80032ca:	10a4      	asrs	r4, r4, #2
 80032cc:	2600      	movs	r6, #0
 80032ce:	42a6      	cmp	r6, r4
 80032d0:	d105      	bne.n	80032de <__libc_init_array+0x2e>
 80032d2:	bd70      	pop	{r4, r5, r6, pc}
 80032d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d8:	4798      	blx	r3
 80032da:	3601      	adds	r6, #1
 80032dc:	e7ee      	b.n	80032bc <__libc_init_array+0xc>
 80032de:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e2:	4798      	blx	r3
 80032e4:	3601      	adds	r6, #1
 80032e6:	e7f2      	b.n	80032ce <__libc_init_array+0x1e>
 80032e8:	08003d50 	.word	0x08003d50
 80032ec:	08003d50 	.word	0x08003d50
 80032f0:	08003d50 	.word	0x08003d50
 80032f4:	08003d54 	.word	0x08003d54

080032f8 <__retarget_lock_acquire_recursive>:
 80032f8:	4770      	bx	lr

080032fa <__retarget_lock_release_recursive>:
 80032fa:	4770      	bx	lr

080032fc <_free_r>:
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	4605      	mov	r5, r0
 8003300:	2900      	cmp	r1, #0
 8003302:	d041      	beq.n	8003388 <_free_r+0x8c>
 8003304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003308:	1f0c      	subs	r4, r1, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	bfb8      	it	lt
 800330e:	18e4      	addlt	r4, r4, r3
 8003310:	f000 f8e0 	bl	80034d4 <__malloc_lock>
 8003314:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <_free_r+0x90>)
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	b933      	cbnz	r3, 8003328 <_free_r+0x2c>
 800331a:	6063      	str	r3, [r4, #4]
 800331c:	6014      	str	r4, [r2, #0]
 800331e:	4628      	mov	r0, r5
 8003320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003324:	f000 b8dc 	b.w	80034e0 <__malloc_unlock>
 8003328:	42a3      	cmp	r3, r4
 800332a:	d908      	bls.n	800333e <_free_r+0x42>
 800332c:	6820      	ldr	r0, [r4, #0]
 800332e:	1821      	adds	r1, r4, r0
 8003330:	428b      	cmp	r3, r1
 8003332:	bf01      	itttt	eq
 8003334:	6819      	ldreq	r1, [r3, #0]
 8003336:	685b      	ldreq	r3, [r3, #4]
 8003338:	1809      	addeq	r1, r1, r0
 800333a:	6021      	streq	r1, [r4, #0]
 800333c:	e7ed      	b.n	800331a <_free_r+0x1e>
 800333e:	461a      	mov	r2, r3
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	b10b      	cbz	r3, 8003348 <_free_r+0x4c>
 8003344:	42a3      	cmp	r3, r4
 8003346:	d9fa      	bls.n	800333e <_free_r+0x42>
 8003348:	6811      	ldr	r1, [r2, #0]
 800334a:	1850      	adds	r0, r2, r1
 800334c:	42a0      	cmp	r0, r4
 800334e:	d10b      	bne.n	8003368 <_free_r+0x6c>
 8003350:	6820      	ldr	r0, [r4, #0]
 8003352:	4401      	add	r1, r0
 8003354:	1850      	adds	r0, r2, r1
 8003356:	4283      	cmp	r3, r0
 8003358:	6011      	str	r1, [r2, #0]
 800335a:	d1e0      	bne.n	800331e <_free_r+0x22>
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	6053      	str	r3, [r2, #4]
 8003362:	4408      	add	r0, r1
 8003364:	6010      	str	r0, [r2, #0]
 8003366:	e7da      	b.n	800331e <_free_r+0x22>
 8003368:	d902      	bls.n	8003370 <_free_r+0x74>
 800336a:	230c      	movs	r3, #12
 800336c:	602b      	str	r3, [r5, #0]
 800336e:	e7d6      	b.n	800331e <_free_r+0x22>
 8003370:	6820      	ldr	r0, [r4, #0]
 8003372:	1821      	adds	r1, r4, r0
 8003374:	428b      	cmp	r3, r1
 8003376:	bf04      	itt	eq
 8003378:	6819      	ldreq	r1, [r3, #0]
 800337a:	685b      	ldreq	r3, [r3, #4]
 800337c:	6063      	str	r3, [r4, #4]
 800337e:	bf04      	itt	eq
 8003380:	1809      	addeq	r1, r1, r0
 8003382:	6021      	streq	r1, [r4, #0]
 8003384:	6054      	str	r4, [r2, #4]
 8003386:	e7ca      	b.n	800331e <_free_r+0x22>
 8003388:	bd38      	pop	{r3, r4, r5, pc}
 800338a:	bf00      	nop
 800338c:	200002e4 	.word	0x200002e4

08003390 <sbrk_aligned>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	4e0f      	ldr	r6, [pc, #60]	@ (80033d0 <sbrk_aligned+0x40>)
 8003394:	460c      	mov	r4, r1
 8003396:	6831      	ldr	r1, [r6, #0]
 8003398:	4605      	mov	r5, r0
 800339a:	b911      	cbnz	r1, 80033a2 <sbrk_aligned+0x12>
 800339c:	f000 fba6 	bl	8003aec <_sbrk_r>
 80033a0:	6030      	str	r0, [r6, #0]
 80033a2:	4621      	mov	r1, r4
 80033a4:	4628      	mov	r0, r5
 80033a6:	f000 fba1 	bl	8003aec <_sbrk_r>
 80033aa:	1c43      	adds	r3, r0, #1
 80033ac:	d103      	bne.n	80033b6 <sbrk_aligned+0x26>
 80033ae:	f04f 34ff 	mov.w	r4, #4294967295
 80033b2:	4620      	mov	r0, r4
 80033b4:	bd70      	pop	{r4, r5, r6, pc}
 80033b6:	1cc4      	adds	r4, r0, #3
 80033b8:	f024 0403 	bic.w	r4, r4, #3
 80033bc:	42a0      	cmp	r0, r4
 80033be:	d0f8      	beq.n	80033b2 <sbrk_aligned+0x22>
 80033c0:	1a21      	subs	r1, r4, r0
 80033c2:	4628      	mov	r0, r5
 80033c4:	f000 fb92 	bl	8003aec <_sbrk_r>
 80033c8:	3001      	adds	r0, #1
 80033ca:	d1f2      	bne.n	80033b2 <sbrk_aligned+0x22>
 80033cc:	e7ef      	b.n	80033ae <sbrk_aligned+0x1e>
 80033ce:	bf00      	nop
 80033d0:	200002e0 	.word	0x200002e0

080033d4 <_malloc_r>:
 80033d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033d8:	1ccd      	adds	r5, r1, #3
 80033da:	f025 0503 	bic.w	r5, r5, #3
 80033de:	3508      	adds	r5, #8
 80033e0:	2d0c      	cmp	r5, #12
 80033e2:	bf38      	it	cc
 80033e4:	250c      	movcc	r5, #12
 80033e6:	2d00      	cmp	r5, #0
 80033e8:	4606      	mov	r6, r0
 80033ea:	db01      	blt.n	80033f0 <_malloc_r+0x1c>
 80033ec:	42a9      	cmp	r1, r5
 80033ee:	d904      	bls.n	80033fa <_malloc_r+0x26>
 80033f0:	230c      	movs	r3, #12
 80033f2:	6033      	str	r3, [r6, #0]
 80033f4:	2000      	movs	r0, #0
 80033f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034d0 <_malloc_r+0xfc>
 80033fe:	f000 f869 	bl	80034d4 <__malloc_lock>
 8003402:	f8d8 3000 	ldr.w	r3, [r8]
 8003406:	461c      	mov	r4, r3
 8003408:	bb44      	cbnz	r4, 800345c <_malloc_r+0x88>
 800340a:	4629      	mov	r1, r5
 800340c:	4630      	mov	r0, r6
 800340e:	f7ff ffbf 	bl	8003390 <sbrk_aligned>
 8003412:	1c43      	adds	r3, r0, #1
 8003414:	4604      	mov	r4, r0
 8003416:	d158      	bne.n	80034ca <_malloc_r+0xf6>
 8003418:	f8d8 4000 	ldr.w	r4, [r8]
 800341c:	4627      	mov	r7, r4
 800341e:	2f00      	cmp	r7, #0
 8003420:	d143      	bne.n	80034aa <_malloc_r+0xd6>
 8003422:	2c00      	cmp	r4, #0
 8003424:	d04b      	beq.n	80034be <_malloc_r+0xea>
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	4639      	mov	r1, r7
 800342a:	4630      	mov	r0, r6
 800342c:	eb04 0903 	add.w	r9, r4, r3
 8003430:	f000 fb5c 	bl	8003aec <_sbrk_r>
 8003434:	4581      	cmp	r9, r0
 8003436:	d142      	bne.n	80034be <_malloc_r+0xea>
 8003438:	6821      	ldr	r1, [r4, #0]
 800343a:	1a6d      	subs	r5, r5, r1
 800343c:	4629      	mov	r1, r5
 800343e:	4630      	mov	r0, r6
 8003440:	f7ff ffa6 	bl	8003390 <sbrk_aligned>
 8003444:	3001      	adds	r0, #1
 8003446:	d03a      	beq.n	80034be <_malloc_r+0xea>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	442b      	add	r3, r5
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	f8d8 3000 	ldr.w	r3, [r8]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	bb62      	cbnz	r2, 80034b0 <_malloc_r+0xdc>
 8003456:	f8c8 7000 	str.w	r7, [r8]
 800345a:	e00f      	b.n	800347c <_malloc_r+0xa8>
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	1b52      	subs	r2, r2, r5
 8003460:	d420      	bmi.n	80034a4 <_malloc_r+0xd0>
 8003462:	2a0b      	cmp	r2, #11
 8003464:	d917      	bls.n	8003496 <_malloc_r+0xc2>
 8003466:	1961      	adds	r1, r4, r5
 8003468:	42a3      	cmp	r3, r4
 800346a:	6025      	str	r5, [r4, #0]
 800346c:	bf18      	it	ne
 800346e:	6059      	strne	r1, [r3, #4]
 8003470:	6863      	ldr	r3, [r4, #4]
 8003472:	bf08      	it	eq
 8003474:	f8c8 1000 	streq.w	r1, [r8]
 8003478:	5162      	str	r2, [r4, r5]
 800347a:	604b      	str	r3, [r1, #4]
 800347c:	4630      	mov	r0, r6
 800347e:	f000 f82f 	bl	80034e0 <__malloc_unlock>
 8003482:	f104 000b 	add.w	r0, r4, #11
 8003486:	1d23      	adds	r3, r4, #4
 8003488:	f020 0007 	bic.w	r0, r0, #7
 800348c:	1ac2      	subs	r2, r0, r3
 800348e:	bf1c      	itt	ne
 8003490:	1a1b      	subne	r3, r3, r0
 8003492:	50a3      	strne	r3, [r4, r2]
 8003494:	e7af      	b.n	80033f6 <_malloc_r+0x22>
 8003496:	6862      	ldr	r2, [r4, #4]
 8003498:	42a3      	cmp	r3, r4
 800349a:	bf0c      	ite	eq
 800349c:	f8c8 2000 	streq.w	r2, [r8]
 80034a0:	605a      	strne	r2, [r3, #4]
 80034a2:	e7eb      	b.n	800347c <_malloc_r+0xa8>
 80034a4:	4623      	mov	r3, r4
 80034a6:	6864      	ldr	r4, [r4, #4]
 80034a8:	e7ae      	b.n	8003408 <_malloc_r+0x34>
 80034aa:	463c      	mov	r4, r7
 80034ac:	687f      	ldr	r7, [r7, #4]
 80034ae:	e7b6      	b.n	800341e <_malloc_r+0x4a>
 80034b0:	461a      	mov	r2, r3
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	42a3      	cmp	r3, r4
 80034b6:	d1fb      	bne.n	80034b0 <_malloc_r+0xdc>
 80034b8:	2300      	movs	r3, #0
 80034ba:	6053      	str	r3, [r2, #4]
 80034bc:	e7de      	b.n	800347c <_malloc_r+0xa8>
 80034be:	230c      	movs	r3, #12
 80034c0:	6033      	str	r3, [r6, #0]
 80034c2:	4630      	mov	r0, r6
 80034c4:	f000 f80c 	bl	80034e0 <__malloc_unlock>
 80034c8:	e794      	b.n	80033f4 <_malloc_r+0x20>
 80034ca:	6005      	str	r5, [r0, #0]
 80034cc:	e7d6      	b.n	800347c <_malloc_r+0xa8>
 80034ce:	bf00      	nop
 80034d0:	200002e4 	.word	0x200002e4

080034d4 <__malloc_lock>:
 80034d4:	4801      	ldr	r0, [pc, #4]	@ (80034dc <__malloc_lock+0x8>)
 80034d6:	f7ff bf0f 	b.w	80032f8 <__retarget_lock_acquire_recursive>
 80034da:	bf00      	nop
 80034dc:	200002dc 	.word	0x200002dc

080034e0 <__malloc_unlock>:
 80034e0:	4801      	ldr	r0, [pc, #4]	@ (80034e8 <__malloc_unlock+0x8>)
 80034e2:	f7ff bf0a 	b.w	80032fa <__retarget_lock_release_recursive>
 80034e6:	bf00      	nop
 80034e8:	200002dc 	.word	0x200002dc

080034ec <__ssputs_r>:
 80034ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f0:	688e      	ldr	r6, [r1, #8]
 80034f2:	461f      	mov	r7, r3
 80034f4:	42be      	cmp	r6, r7
 80034f6:	680b      	ldr	r3, [r1, #0]
 80034f8:	4682      	mov	sl, r0
 80034fa:	460c      	mov	r4, r1
 80034fc:	4690      	mov	r8, r2
 80034fe:	d82d      	bhi.n	800355c <__ssputs_r+0x70>
 8003500:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003504:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003508:	d026      	beq.n	8003558 <__ssputs_r+0x6c>
 800350a:	6965      	ldr	r5, [r4, #20]
 800350c:	6909      	ldr	r1, [r1, #16]
 800350e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003512:	eba3 0901 	sub.w	r9, r3, r1
 8003516:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800351a:	1c7b      	adds	r3, r7, #1
 800351c:	444b      	add	r3, r9
 800351e:	106d      	asrs	r5, r5, #1
 8003520:	429d      	cmp	r5, r3
 8003522:	bf38      	it	cc
 8003524:	461d      	movcc	r5, r3
 8003526:	0553      	lsls	r3, r2, #21
 8003528:	d527      	bpl.n	800357a <__ssputs_r+0x8e>
 800352a:	4629      	mov	r1, r5
 800352c:	f7ff ff52 	bl	80033d4 <_malloc_r>
 8003530:	4606      	mov	r6, r0
 8003532:	b360      	cbz	r0, 800358e <__ssputs_r+0xa2>
 8003534:	6921      	ldr	r1, [r4, #16]
 8003536:	464a      	mov	r2, r9
 8003538:	f000 fae8 	bl	8003b0c <memcpy>
 800353c:	89a3      	ldrh	r3, [r4, #12]
 800353e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003546:	81a3      	strh	r3, [r4, #12]
 8003548:	6126      	str	r6, [r4, #16]
 800354a:	6165      	str	r5, [r4, #20]
 800354c:	444e      	add	r6, r9
 800354e:	eba5 0509 	sub.w	r5, r5, r9
 8003552:	6026      	str	r6, [r4, #0]
 8003554:	60a5      	str	r5, [r4, #8]
 8003556:	463e      	mov	r6, r7
 8003558:	42be      	cmp	r6, r7
 800355a:	d900      	bls.n	800355e <__ssputs_r+0x72>
 800355c:	463e      	mov	r6, r7
 800355e:	6820      	ldr	r0, [r4, #0]
 8003560:	4632      	mov	r2, r6
 8003562:	4641      	mov	r1, r8
 8003564:	f000 faa8 	bl	8003ab8 <memmove>
 8003568:	68a3      	ldr	r3, [r4, #8]
 800356a:	1b9b      	subs	r3, r3, r6
 800356c:	60a3      	str	r3, [r4, #8]
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	4433      	add	r3, r6
 8003572:	6023      	str	r3, [r4, #0]
 8003574:	2000      	movs	r0, #0
 8003576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800357a:	462a      	mov	r2, r5
 800357c:	f000 fad4 	bl	8003b28 <_realloc_r>
 8003580:	4606      	mov	r6, r0
 8003582:	2800      	cmp	r0, #0
 8003584:	d1e0      	bne.n	8003548 <__ssputs_r+0x5c>
 8003586:	6921      	ldr	r1, [r4, #16]
 8003588:	4650      	mov	r0, sl
 800358a:	f7ff feb7 	bl	80032fc <_free_r>
 800358e:	230c      	movs	r3, #12
 8003590:	f8ca 3000 	str.w	r3, [sl]
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800359a:	81a3      	strh	r3, [r4, #12]
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	e7e9      	b.n	8003576 <__ssputs_r+0x8a>
	...

080035a4 <_svfiprintf_r>:
 80035a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a8:	4698      	mov	r8, r3
 80035aa:	898b      	ldrh	r3, [r1, #12]
 80035ac:	061b      	lsls	r3, r3, #24
 80035ae:	b09d      	sub	sp, #116	@ 0x74
 80035b0:	4607      	mov	r7, r0
 80035b2:	460d      	mov	r5, r1
 80035b4:	4614      	mov	r4, r2
 80035b6:	d510      	bpl.n	80035da <_svfiprintf_r+0x36>
 80035b8:	690b      	ldr	r3, [r1, #16]
 80035ba:	b973      	cbnz	r3, 80035da <_svfiprintf_r+0x36>
 80035bc:	2140      	movs	r1, #64	@ 0x40
 80035be:	f7ff ff09 	bl	80033d4 <_malloc_r>
 80035c2:	6028      	str	r0, [r5, #0]
 80035c4:	6128      	str	r0, [r5, #16]
 80035c6:	b930      	cbnz	r0, 80035d6 <_svfiprintf_r+0x32>
 80035c8:	230c      	movs	r3, #12
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	b01d      	add	sp, #116	@ 0x74
 80035d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d6:	2340      	movs	r3, #64	@ 0x40
 80035d8:	616b      	str	r3, [r5, #20]
 80035da:	2300      	movs	r3, #0
 80035dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80035de:	2320      	movs	r3, #32
 80035e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80035e8:	2330      	movs	r3, #48	@ 0x30
 80035ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003788 <_svfiprintf_r+0x1e4>
 80035ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035f2:	f04f 0901 	mov.w	r9, #1
 80035f6:	4623      	mov	r3, r4
 80035f8:	469a      	mov	sl, r3
 80035fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035fe:	b10a      	cbz	r2, 8003604 <_svfiprintf_r+0x60>
 8003600:	2a25      	cmp	r2, #37	@ 0x25
 8003602:	d1f9      	bne.n	80035f8 <_svfiprintf_r+0x54>
 8003604:	ebba 0b04 	subs.w	fp, sl, r4
 8003608:	d00b      	beq.n	8003622 <_svfiprintf_r+0x7e>
 800360a:	465b      	mov	r3, fp
 800360c:	4622      	mov	r2, r4
 800360e:	4629      	mov	r1, r5
 8003610:	4638      	mov	r0, r7
 8003612:	f7ff ff6b 	bl	80034ec <__ssputs_r>
 8003616:	3001      	adds	r0, #1
 8003618:	f000 80a7 	beq.w	800376a <_svfiprintf_r+0x1c6>
 800361c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800361e:	445a      	add	r2, fp
 8003620:	9209      	str	r2, [sp, #36]	@ 0x24
 8003622:	f89a 3000 	ldrb.w	r3, [sl]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 809f 	beq.w	800376a <_svfiprintf_r+0x1c6>
 800362c:	2300      	movs	r3, #0
 800362e:	f04f 32ff 	mov.w	r2, #4294967295
 8003632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003636:	f10a 0a01 	add.w	sl, sl, #1
 800363a:	9304      	str	r3, [sp, #16]
 800363c:	9307      	str	r3, [sp, #28]
 800363e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003642:	931a      	str	r3, [sp, #104]	@ 0x68
 8003644:	4654      	mov	r4, sl
 8003646:	2205      	movs	r2, #5
 8003648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800364c:	484e      	ldr	r0, [pc, #312]	@ (8003788 <_svfiprintf_r+0x1e4>)
 800364e:	f7fc fdc7 	bl	80001e0 <memchr>
 8003652:	9a04      	ldr	r2, [sp, #16]
 8003654:	b9d8      	cbnz	r0, 800368e <_svfiprintf_r+0xea>
 8003656:	06d0      	lsls	r0, r2, #27
 8003658:	bf44      	itt	mi
 800365a:	2320      	movmi	r3, #32
 800365c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003660:	0711      	lsls	r1, r2, #28
 8003662:	bf44      	itt	mi
 8003664:	232b      	movmi	r3, #43	@ 0x2b
 8003666:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800366a:	f89a 3000 	ldrb.w	r3, [sl]
 800366e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003670:	d015      	beq.n	800369e <_svfiprintf_r+0xfa>
 8003672:	9a07      	ldr	r2, [sp, #28]
 8003674:	4654      	mov	r4, sl
 8003676:	2000      	movs	r0, #0
 8003678:	f04f 0c0a 	mov.w	ip, #10
 800367c:	4621      	mov	r1, r4
 800367e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003682:	3b30      	subs	r3, #48	@ 0x30
 8003684:	2b09      	cmp	r3, #9
 8003686:	d94b      	bls.n	8003720 <_svfiprintf_r+0x17c>
 8003688:	b1b0      	cbz	r0, 80036b8 <_svfiprintf_r+0x114>
 800368a:	9207      	str	r2, [sp, #28]
 800368c:	e014      	b.n	80036b8 <_svfiprintf_r+0x114>
 800368e:	eba0 0308 	sub.w	r3, r0, r8
 8003692:	fa09 f303 	lsl.w	r3, r9, r3
 8003696:	4313      	orrs	r3, r2
 8003698:	9304      	str	r3, [sp, #16]
 800369a:	46a2      	mov	sl, r4
 800369c:	e7d2      	b.n	8003644 <_svfiprintf_r+0xa0>
 800369e:	9b03      	ldr	r3, [sp, #12]
 80036a0:	1d19      	adds	r1, r3, #4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	9103      	str	r1, [sp, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bfbb      	ittet	lt
 80036aa:	425b      	neglt	r3, r3
 80036ac:	f042 0202 	orrlt.w	r2, r2, #2
 80036b0:	9307      	strge	r3, [sp, #28]
 80036b2:	9307      	strlt	r3, [sp, #28]
 80036b4:	bfb8      	it	lt
 80036b6:	9204      	strlt	r2, [sp, #16]
 80036b8:	7823      	ldrb	r3, [r4, #0]
 80036ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80036bc:	d10a      	bne.n	80036d4 <_svfiprintf_r+0x130>
 80036be:	7863      	ldrb	r3, [r4, #1]
 80036c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80036c2:	d132      	bne.n	800372a <_svfiprintf_r+0x186>
 80036c4:	9b03      	ldr	r3, [sp, #12]
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	9203      	str	r2, [sp, #12]
 80036cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036d0:	3402      	adds	r4, #2
 80036d2:	9305      	str	r3, [sp, #20]
 80036d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003798 <_svfiprintf_r+0x1f4>
 80036d8:	7821      	ldrb	r1, [r4, #0]
 80036da:	2203      	movs	r2, #3
 80036dc:	4650      	mov	r0, sl
 80036de:	f7fc fd7f 	bl	80001e0 <memchr>
 80036e2:	b138      	cbz	r0, 80036f4 <_svfiprintf_r+0x150>
 80036e4:	9b04      	ldr	r3, [sp, #16]
 80036e6:	eba0 000a 	sub.w	r0, r0, sl
 80036ea:	2240      	movs	r2, #64	@ 0x40
 80036ec:	4082      	lsls	r2, r0
 80036ee:	4313      	orrs	r3, r2
 80036f0:	3401      	adds	r4, #1
 80036f2:	9304      	str	r3, [sp, #16]
 80036f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f8:	4824      	ldr	r0, [pc, #144]	@ (800378c <_svfiprintf_r+0x1e8>)
 80036fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036fe:	2206      	movs	r2, #6
 8003700:	f7fc fd6e 	bl	80001e0 <memchr>
 8003704:	2800      	cmp	r0, #0
 8003706:	d036      	beq.n	8003776 <_svfiprintf_r+0x1d2>
 8003708:	4b21      	ldr	r3, [pc, #132]	@ (8003790 <_svfiprintf_r+0x1ec>)
 800370a:	bb1b      	cbnz	r3, 8003754 <_svfiprintf_r+0x1b0>
 800370c:	9b03      	ldr	r3, [sp, #12]
 800370e:	3307      	adds	r3, #7
 8003710:	f023 0307 	bic.w	r3, r3, #7
 8003714:	3308      	adds	r3, #8
 8003716:	9303      	str	r3, [sp, #12]
 8003718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800371a:	4433      	add	r3, r6
 800371c:	9309      	str	r3, [sp, #36]	@ 0x24
 800371e:	e76a      	b.n	80035f6 <_svfiprintf_r+0x52>
 8003720:	fb0c 3202 	mla	r2, ip, r2, r3
 8003724:	460c      	mov	r4, r1
 8003726:	2001      	movs	r0, #1
 8003728:	e7a8      	b.n	800367c <_svfiprintf_r+0xd8>
 800372a:	2300      	movs	r3, #0
 800372c:	3401      	adds	r4, #1
 800372e:	9305      	str	r3, [sp, #20]
 8003730:	4619      	mov	r1, r3
 8003732:	f04f 0c0a 	mov.w	ip, #10
 8003736:	4620      	mov	r0, r4
 8003738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800373c:	3a30      	subs	r2, #48	@ 0x30
 800373e:	2a09      	cmp	r2, #9
 8003740:	d903      	bls.n	800374a <_svfiprintf_r+0x1a6>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0c6      	beq.n	80036d4 <_svfiprintf_r+0x130>
 8003746:	9105      	str	r1, [sp, #20]
 8003748:	e7c4      	b.n	80036d4 <_svfiprintf_r+0x130>
 800374a:	fb0c 2101 	mla	r1, ip, r1, r2
 800374e:	4604      	mov	r4, r0
 8003750:	2301      	movs	r3, #1
 8003752:	e7f0      	b.n	8003736 <_svfiprintf_r+0x192>
 8003754:	ab03      	add	r3, sp, #12
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	462a      	mov	r2, r5
 800375a:	4b0e      	ldr	r3, [pc, #56]	@ (8003794 <_svfiprintf_r+0x1f0>)
 800375c:	a904      	add	r1, sp, #16
 800375e:	4638      	mov	r0, r7
 8003760:	f3af 8000 	nop.w
 8003764:	1c42      	adds	r2, r0, #1
 8003766:	4606      	mov	r6, r0
 8003768:	d1d6      	bne.n	8003718 <_svfiprintf_r+0x174>
 800376a:	89ab      	ldrh	r3, [r5, #12]
 800376c:	065b      	lsls	r3, r3, #25
 800376e:	f53f af2d 	bmi.w	80035cc <_svfiprintf_r+0x28>
 8003772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003774:	e72c      	b.n	80035d0 <_svfiprintf_r+0x2c>
 8003776:	ab03      	add	r3, sp, #12
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	462a      	mov	r2, r5
 800377c:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <_svfiprintf_r+0x1f0>)
 800377e:	a904      	add	r1, sp, #16
 8003780:	4638      	mov	r0, r7
 8003782:	f000 f879 	bl	8003878 <_printf_i>
 8003786:	e7ed      	b.n	8003764 <_svfiprintf_r+0x1c0>
 8003788:	08003d14 	.word	0x08003d14
 800378c:	08003d1e 	.word	0x08003d1e
 8003790:	00000000 	.word	0x00000000
 8003794:	080034ed 	.word	0x080034ed
 8003798:	08003d1a 	.word	0x08003d1a

0800379c <_printf_common>:
 800379c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a0:	4616      	mov	r6, r2
 80037a2:	4698      	mov	r8, r3
 80037a4:	688a      	ldr	r2, [r1, #8]
 80037a6:	690b      	ldr	r3, [r1, #16]
 80037a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037ac:	4293      	cmp	r3, r2
 80037ae:	bfb8      	it	lt
 80037b0:	4613      	movlt	r3, r2
 80037b2:	6033      	str	r3, [r6, #0]
 80037b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037b8:	4607      	mov	r7, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	b10a      	cbz	r2, 80037c2 <_printf_common+0x26>
 80037be:	3301      	adds	r3, #1
 80037c0:	6033      	str	r3, [r6, #0]
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	0699      	lsls	r1, r3, #26
 80037c6:	bf42      	ittt	mi
 80037c8:	6833      	ldrmi	r3, [r6, #0]
 80037ca:	3302      	addmi	r3, #2
 80037cc:	6033      	strmi	r3, [r6, #0]
 80037ce:	6825      	ldr	r5, [r4, #0]
 80037d0:	f015 0506 	ands.w	r5, r5, #6
 80037d4:	d106      	bne.n	80037e4 <_printf_common+0x48>
 80037d6:	f104 0a19 	add.w	sl, r4, #25
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	6832      	ldr	r2, [r6, #0]
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	42ab      	cmp	r3, r5
 80037e2:	dc26      	bgt.n	8003832 <_printf_common+0x96>
 80037e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	3b00      	subs	r3, #0
 80037ec:	bf18      	it	ne
 80037ee:	2301      	movne	r3, #1
 80037f0:	0692      	lsls	r2, r2, #26
 80037f2:	d42b      	bmi.n	800384c <_printf_common+0xb0>
 80037f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037f8:	4641      	mov	r1, r8
 80037fa:	4638      	mov	r0, r7
 80037fc:	47c8      	blx	r9
 80037fe:	3001      	adds	r0, #1
 8003800:	d01e      	beq.n	8003840 <_printf_common+0xa4>
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	6922      	ldr	r2, [r4, #16]
 8003806:	f003 0306 	and.w	r3, r3, #6
 800380a:	2b04      	cmp	r3, #4
 800380c:	bf02      	ittt	eq
 800380e:	68e5      	ldreq	r5, [r4, #12]
 8003810:	6833      	ldreq	r3, [r6, #0]
 8003812:	1aed      	subeq	r5, r5, r3
 8003814:	68a3      	ldr	r3, [r4, #8]
 8003816:	bf0c      	ite	eq
 8003818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800381c:	2500      	movne	r5, #0
 800381e:	4293      	cmp	r3, r2
 8003820:	bfc4      	itt	gt
 8003822:	1a9b      	subgt	r3, r3, r2
 8003824:	18ed      	addgt	r5, r5, r3
 8003826:	2600      	movs	r6, #0
 8003828:	341a      	adds	r4, #26
 800382a:	42b5      	cmp	r5, r6
 800382c:	d11a      	bne.n	8003864 <_printf_common+0xc8>
 800382e:	2000      	movs	r0, #0
 8003830:	e008      	b.n	8003844 <_printf_common+0xa8>
 8003832:	2301      	movs	r3, #1
 8003834:	4652      	mov	r2, sl
 8003836:	4641      	mov	r1, r8
 8003838:	4638      	mov	r0, r7
 800383a:	47c8      	blx	r9
 800383c:	3001      	adds	r0, #1
 800383e:	d103      	bne.n	8003848 <_printf_common+0xac>
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003848:	3501      	adds	r5, #1
 800384a:	e7c6      	b.n	80037da <_printf_common+0x3e>
 800384c:	18e1      	adds	r1, r4, r3
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	2030      	movs	r0, #48	@ 0x30
 8003852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003856:	4422      	add	r2, r4
 8003858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800385c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003860:	3302      	adds	r3, #2
 8003862:	e7c7      	b.n	80037f4 <_printf_common+0x58>
 8003864:	2301      	movs	r3, #1
 8003866:	4622      	mov	r2, r4
 8003868:	4641      	mov	r1, r8
 800386a:	4638      	mov	r0, r7
 800386c:	47c8      	blx	r9
 800386e:	3001      	adds	r0, #1
 8003870:	d0e6      	beq.n	8003840 <_printf_common+0xa4>
 8003872:	3601      	adds	r6, #1
 8003874:	e7d9      	b.n	800382a <_printf_common+0x8e>
	...

08003878 <_printf_i>:
 8003878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800387c:	7e0f      	ldrb	r7, [r1, #24]
 800387e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003880:	2f78      	cmp	r7, #120	@ 0x78
 8003882:	4691      	mov	r9, r2
 8003884:	4680      	mov	r8, r0
 8003886:	460c      	mov	r4, r1
 8003888:	469a      	mov	sl, r3
 800388a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800388e:	d807      	bhi.n	80038a0 <_printf_i+0x28>
 8003890:	2f62      	cmp	r7, #98	@ 0x62
 8003892:	d80a      	bhi.n	80038aa <_printf_i+0x32>
 8003894:	2f00      	cmp	r7, #0
 8003896:	f000 80d2 	beq.w	8003a3e <_printf_i+0x1c6>
 800389a:	2f58      	cmp	r7, #88	@ 0x58
 800389c:	f000 80b9 	beq.w	8003a12 <_printf_i+0x19a>
 80038a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038a8:	e03a      	b.n	8003920 <_printf_i+0xa8>
 80038aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038ae:	2b15      	cmp	r3, #21
 80038b0:	d8f6      	bhi.n	80038a0 <_printf_i+0x28>
 80038b2:	a101      	add	r1, pc, #4	@ (adr r1, 80038b8 <_printf_i+0x40>)
 80038b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038b8:	08003911 	.word	0x08003911
 80038bc:	08003925 	.word	0x08003925
 80038c0:	080038a1 	.word	0x080038a1
 80038c4:	080038a1 	.word	0x080038a1
 80038c8:	080038a1 	.word	0x080038a1
 80038cc:	080038a1 	.word	0x080038a1
 80038d0:	08003925 	.word	0x08003925
 80038d4:	080038a1 	.word	0x080038a1
 80038d8:	080038a1 	.word	0x080038a1
 80038dc:	080038a1 	.word	0x080038a1
 80038e0:	080038a1 	.word	0x080038a1
 80038e4:	08003a25 	.word	0x08003a25
 80038e8:	0800394f 	.word	0x0800394f
 80038ec:	080039df 	.word	0x080039df
 80038f0:	080038a1 	.word	0x080038a1
 80038f4:	080038a1 	.word	0x080038a1
 80038f8:	08003a47 	.word	0x08003a47
 80038fc:	080038a1 	.word	0x080038a1
 8003900:	0800394f 	.word	0x0800394f
 8003904:	080038a1 	.word	0x080038a1
 8003908:	080038a1 	.word	0x080038a1
 800390c:	080039e7 	.word	0x080039e7
 8003910:	6833      	ldr	r3, [r6, #0]
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6032      	str	r2, [r6, #0]
 8003918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800391c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003920:	2301      	movs	r3, #1
 8003922:	e09d      	b.n	8003a60 <_printf_i+0x1e8>
 8003924:	6833      	ldr	r3, [r6, #0]
 8003926:	6820      	ldr	r0, [r4, #0]
 8003928:	1d19      	adds	r1, r3, #4
 800392a:	6031      	str	r1, [r6, #0]
 800392c:	0606      	lsls	r6, r0, #24
 800392e:	d501      	bpl.n	8003934 <_printf_i+0xbc>
 8003930:	681d      	ldr	r5, [r3, #0]
 8003932:	e003      	b.n	800393c <_printf_i+0xc4>
 8003934:	0645      	lsls	r5, r0, #25
 8003936:	d5fb      	bpl.n	8003930 <_printf_i+0xb8>
 8003938:	f9b3 5000 	ldrsh.w	r5, [r3]
 800393c:	2d00      	cmp	r5, #0
 800393e:	da03      	bge.n	8003948 <_printf_i+0xd0>
 8003940:	232d      	movs	r3, #45	@ 0x2d
 8003942:	426d      	negs	r5, r5
 8003944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003948:	4859      	ldr	r0, [pc, #356]	@ (8003ab0 <_printf_i+0x238>)
 800394a:	230a      	movs	r3, #10
 800394c:	e011      	b.n	8003972 <_printf_i+0xfa>
 800394e:	6821      	ldr	r1, [r4, #0]
 8003950:	6833      	ldr	r3, [r6, #0]
 8003952:	0608      	lsls	r0, r1, #24
 8003954:	f853 5b04 	ldr.w	r5, [r3], #4
 8003958:	d402      	bmi.n	8003960 <_printf_i+0xe8>
 800395a:	0649      	lsls	r1, r1, #25
 800395c:	bf48      	it	mi
 800395e:	b2ad      	uxthmi	r5, r5
 8003960:	2f6f      	cmp	r7, #111	@ 0x6f
 8003962:	4853      	ldr	r0, [pc, #332]	@ (8003ab0 <_printf_i+0x238>)
 8003964:	6033      	str	r3, [r6, #0]
 8003966:	bf14      	ite	ne
 8003968:	230a      	movne	r3, #10
 800396a:	2308      	moveq	r3, #8
 800396c:	2100      	movs	r1, #0
 800396e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003972:	6866      	ldr	r6, [r4, #4]
 8003974:	60a6      	str	r6, [r4, #8]
 8003976:	2e00      	cmp	r6, #0
 8003978:	bfa2      	ittt	ge
 800397a:	6821      	ldrge	r1, [r4, #0]
 800397c:	f021 0104 	bicge.w	r1, r1, #4
 8003980:	6021      	strge	r1, [r4, #0]
 8003982:	b90d      	cbnz	r5, 8003988 <_printf_i+0x110>
 8003984:	2e00      	cmp	r6, #0
 8003986:	d04b      	beq.n	8003a20 <_printf_i+0x1a8>
 8003988:	4616      	mov	r6, r2
 800398a:	fbb5 f1f3 	udiv	r1, r5, r3
 800398e:	fb03 5711 	mls	r7, r3, r1, r5
 8003992:	5dc7      	ldrb	r7, [r0, r7]
 8003994:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003998:	462f      	mov	r7, r5
 800399a:	42bb      	cmp	r3, r7
 800399c:	460d      	mov	r5, r1
 800399e:	d9f4      	bls.n	800398a <_printf_i+0x112>
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d10b      	bne.n	80039bc <_printf_i+0x144>
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	07df      	lsls	r7, r3, #31
 80039a8:	d508      	bpl.n	80039bc <_printf_i+0x144>
 80039aa:	6923      	ldr	r3, [r4, #16]
 80039ac:	6861      	ldr	r1, [r4, #4]
 80039ae:	4299      	cmp	r1, r3
 80039b0:	bfde      	ittt	le
 80039b2:	2330      	movle	r3, #48	@ 0x30
 80039b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039bc:	1b92      	subs	r2, r2, r6
 80039be:	6122      	str	r2, [r4, #16]
 80039c0:	f8cd a000 	str.w	sl, [sp]
 80039c4:	464b      	mov	r3, r9
 80039c6:	aa03      	add	r2, sp, #12
 80039c8:	4621      	mov	r1, r4
 80039ca:	4640      	mov	r0, r8
 80039cc:	f7ff fee6 	bl	800379c <_printf_common>
 80039d0:	3001      	adds	r0, #1
 80039d2:	d14a      	bne.n	8003a6a <_printf_i+0x1f2>
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	b004      	add	sp, #16
 80039da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	f043 0320 	orr.w	r3, r3, #32
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	4833      	ldr	r0, [pc, #204]	@ (8003ab4 <_printf_i+0x23c>)
 80039e8:	2778      	movs	r7, #120	@ 0x78
 80039ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	6831      	ldr	r1, [r6, #0]
 80039f2:	061f      	lsls	r7, r3, #24
 80039f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80039f8:	d402      	bmi.n	8003a00 <_printf_i+0x188>
 80039fa:	065f      	lsls	r7, r3, #25
 80039fc:	bf48      	it	mi
 80039fe:	b2ad      	uxthmi	r5, r5
 8003a00:	6031      	str	r1, [r6, #0]
 8003a02:	07d9      	lsls	r1, r3, #31
 8003a04:	bf44      	itt	mi
 8003a06:	f043 0320 	orrmi.w	r3, r3, #32
 8003a0a:	6023      	strmi	r3, [r4, #0]
 8003a0c:	b11d      	cbz	r5, 8003a16 <_printf_i+0x19e>
 8003a0e:	2310      	movs	r3, #16
 8003a10:	e7ac      	b.n	800396c <_printf_i+0xf4>
 8003a12:	4827      	ldr	r0, [pc, #156]	@ (8003ab0 <_printf_i+0x238>)
 8003a14:	e7e9      	b.n	80039ea <_printf_i+0x172>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	f023 0320 	bic.w	r3, r3, #32
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	e7f6      	b.n	8003a0e <_printf_i+0x196>
 8003a20:	4616      	mov	r6, r2
 8003a22:	e7bd      	b.n	80039a0 <_printf_i+0x128>
 8003a24:	6833      	ldr	r3, [r6, #0]
 8003a26:	6825      	ldr	r5, [r4, #0]
 8003a28:	6961      	ldr	r1, [r4, #20]
 8003a2a:	1d18      	adds	r0, r3, #4
 8003a2c:	6030      	str	r0, [r6, #0]
 8003a2e:	062e      	lsls	r6, r5, #24
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	d501      	bpl.n	8003a38 <_printf_i+0x1c0>
 8003a34:	6019      	str	r1, [r3, #0]
 8003a36:	e002      	b.n	8003a3e <_printf_i+0x1c6>
 8003a38:	0668      	lsls	r0, r5, #25
 8003a3a:	d5fb      	bpl.n	8003a34 <_printf_i+0x1bc>
 8003a3c:	8019      	strh	r1, [r3, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	6123      	str	r3, [r4, #16]
 8003a42:	4616      	mov	r6, r2
 8003a44:	e7bc      	b.n	80039c0 <_printf_i+0x148>
 8003a46:	6833      	ldr	r3, [r6, #0]
 8003a48:	1d1a      	adds	r2, r3, #4
 8003a4a:	6032      	str	r2, [r6, #0]
 8003a4c:	681e      	ldr	r6, [r3, #0]
 8003a4e:	6862      	ldr	r2, [r4, #4]
 8003a50:	2100      	movs	r1, #0
 8003a52:	4630      	mov	r0, r6
 8003a54:	f7fc fbc4 	bl	80001e0 <memchr>
 8003a58:	b108      	cbz	r0, 8003a5e <_printf_i+0x1e6>
 8003a5a:	1b80      	subs	r0, r0, r6
 8003a5c:	6060      	str	r0, [r4, #4]
 8003a5e:	6863      	ldr	r3, [r4, #4]
 8003a60:	6123      	str	r3, [r4, #16]
 8003a62:	2300      	movs	r3, #0
 8003a64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a68:	e7aa      	b.n	80039c0 <_printf_i+0x148>
 8003a6a:	6923      	ldr	r3, [r4, #16]
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	4649      	mov	r1, r9
 8003a70:	4640      	mov	r0, r8
 8003a72:	47d0      	blx	sl
 8003a74:	3001      	adds	r0, #1
 8003a76:	d0ad      	beq.n	80039d4 <_printf_i+0x15c>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	079b      	lsls	r3, r3, #30
 8003a7c:	d413      	bmi.n	8003aa6 <_printf_i+0x22e>
 8003a7e:	68e0      	ldr	r0, [r4, #12]
 8003a80:	9b03      	ldr	r3, [sp, #12]
 8003a82:	4298      	cmp	r0, r3
 8003a84:	bfb8      	it	lt
 8003a86:	4618      	movlt	r0, r3
 8003a88:	e7a6      	b.n	80039d8 <_printf_i+0x160>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	4632      	mov	r2, r6
 8003a8e:	4649      	mov	r1, r9
 8003a90:	4640      	mov	r0, r8
 8003a92:	47d0      	blx	sl
 8003a94:	3001      	adds	r0, #1
 8003a96:	d09d      	beq.n	80039d4 <_printf_i+0x15c>
 8003a98:	3501      	adds	r5, #1
 8003a9a:	68e3      	ldr	r3, [r4, #12]
 8003a9c:	9903      	ldr	r1, [sp, #12]
 8003a9e:	1a5b      	subs	r3, r3, r1
 8003aa0:	42ab      	cmp	r3, r5
 8003aa2:	dcf2      	bgt.n	8003a8a <_printf_i+0x212>
 8003aa4:	e7eb      	b.n	8003a7e <_printf_i+0x206>
 8003aa6:	2500      	movs	r5, #0
 8003aa8:	f104 0619 	add.w	r6, r4, #25
 8003aac:	e7f5      	b.n	8003a9a <_printf_i+0x222>
 8003aae:	bf00      	nop
 8003ab0:	08003d25 	.word	0x08003d25
 8003ab4:	08003d36 	.word	0x08003d36

08003ab8 <memmove>:
 8003ab8:	4288      	cmp	r0, r1
 8003aba:	b510      	push	{r4, lr}
 8003abc:	eb01 0402 	add.w	r4, r1, r2
 8003ac0:	d902      	bls.n	8003ac8 <memmove+0x10>
 8003ac2:	4284      	cmp	r4, r0
 8003ac4:	4623      	mov	r3, r4
 8003ac6:	d807      	bhi.n	8003ad8 <memmove+0x20>
 8003ac8:	1e43      	subs	r3, r0, #1
 8003aca:	42a1      	cmp	r1, r4
 8003acc:	d008      	beq.n	8003ae0 <memmove+0x28>
 8003ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ad6:	e7f8      	b.n	8003aca <memmove+0x12>
 8003ad8:	4402      	add	r2, r0
 8003ada:	4601      	mov	r1, r0
 8003adc:	428a      	cmp	r2, r1
 8003ade:	d100      	bne.n	8003ae2 <memmove+0x2a>
 8003ae0:	bd10      	pop	{r4, pc}
 8003ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003aea:	e7f7      	b.n	8003adc <memmove+0x24>

08003aec <_sbrk_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4d06      	ldr	r5, [pc, #24]	@ (8003b08 <_sbrk_r+0x1c>)
 8003af0:	2300      	movs	r3, #0
 8003af2:	4604      	mov	r4, r0
 8003af4:	4608      	mov	r0, r1
 8003af6:	602b      	str	r3, [r5, #0]
 8003af8:	f7fd fad4 	bl	80010a4 <_sbrk>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d102      	bne.n	8003b06 <_sbrk_r+0x1a>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	b103      	cbz	r3, 8003b06 <_sbrk_r+0x1a>
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
 8003b08:	200002d8 	.word	0x200002d8

08003b0c <memcpy>:
 8003b0c:	440a      	add	r2, r1
 8003b0e:	4291      	cmp	r1, r2
 8003b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b14:	d100      	bne.n	8003b18 <memcpy+0xc>
 8003b16:	4770      	bx	lr
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b22:	4291      	cmp	r1, r2
 8003b24:	d1f9      	bne.n	8003b1a <memcpy+0xe>
 8003b26:	bd10      	pop	{r4, pc}

08003b28 <_realloc_r>:
 8003b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	4615      	mov	r5, r2
 8003b30:	460c      	mov	r4, r1
 8003b32:	b921      	cbnz	r1, 8003b3e <_realloc_r+0x16>
 8003b34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b38:	4611      	mov	r1, r2
 8003b3a:	f7ff bc4b 	b.w	80033d4 <_malloc_r>
 8003b3e:	b92a      	cbnz	r2, 8003b4c <_realloc_r+0x24>
 8003b40:	f7ff fbdc 	bl	80032fc <_free_r>
 8003b44:	2400      	movs	r4, #0
 8003b46:	4620      	mov	r0, r4
 8003b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b4c:	f000 f81a 	bl	8003b84 <_malloc_usable_size_r>
 8003b50:	4285      	cmp	r5, r0
 8003b52:	4606      	mov	r6, r0
 8003b54:	d802      	bhi.n	8003b5c <_realloc_r+0x34>
 8003b56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b5a:	d8f4      	bhi.n	8003b46 <_realloc_r+0x1e>
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	4640      	mov	r0, r8
 8003b60:	f7ff fc38 	bl	80033d4 <_malloc_r>
 8003b64:	4607      	mov	r7, r0
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d0ec      	beq.n	8003b44 <_realloc_r+0x1c>
 8003b6a:	42b5      	cmp	r5, r6
 8003b6c:	462a      	mov	r2, r5
 8003b6e:	4621      	mov	r1, r4
 8003b70:	bf28      	it	cs
 8003b72:	4632      	movcs	r2, r6
 8003b74:	f7ff ffca 	bl	8003b0c <memcpy>
 8003b78:	4621      	mov	r1, r4
 8003b7a:	4640      	mov	r0, r8
 8003b7c:	f7ff fbbe 	bl	80032fc <_free_r>
 8003b80:	463c      	mov	r4, r7
 8003b82:	e7e0      	b.n	8003b46 <_realloc_r+0x1e>

08003b84 <_malloc_usable_size_r>:
 8003b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b88:	1f18      	subs	r0, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bfbc      	itt	lt
 8003b8e:	580b      	ldrlt	r3, [r1, r0]
 8003b90:	18c0      	addlt	r0, r0, r3
 8003b92:	4770      	bx	lr

08003b94 <_init>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr

08003ba0 <_fini>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr
