
STM32F405_CAN_LL_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08003ca0  08003ca0  00004ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e3c  08003e3c  00005064  2**0
                  CONTENTS
  4 .ARM          00000008  08003e3c  08003e3c  00004e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e44  08003e44  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e44  08003e44  00004e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e48  08003e48  00004e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003e4c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005064  2**0
                  CONTENTS
 10 .bss          00000284  20000064  20000064  00005064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  00005064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a335  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6e  00000000  00000000  0000f3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  00011038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073b  00000000  00000000  000119c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020812  00000000  00000000  00012103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b5f2  00000000  00000000  00032915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3ced  00000000  00000000  0003df07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00101bf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b88  00000000  00000000  00101c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001047c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c88 	.word	0x08003c88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08003c88 	.word	0x08003c88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <__NVIC_GetPriorityGrouping+0x18>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	f003 0307 	and.w	r3, r3, #7
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	@ (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db0a      	blt.n	80005f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	490c      	ldr	r1, [pc, #48]	@ (8000614 <__NVIC_SetPriority+0x4c>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f0:	e00a      	b.n	8000608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4908      	ldr	r1, [pc, #32]	@ (8000618 <__NVIC_SetPriority+0x50>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	3b04      	subs	r3, #4
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	440b      	add	r3, r1
 8000606:	761a      	strb	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800061c:	b480      	push	{r7}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	f1c3 0307 	rsb	r3, r3, #7
 8000636:	2b04      	cmp	r3, #4
 8000638:	bf28      	it	cs
 800063a:	2304      	movcs	r3, #4
 800063c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	3304      	adds	r3, #4
 8000642:	2b06      	cmp	r3, #6
 8000644:	d902      	bls.n	800064c <NVIC_EncodePriority+0x30>
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3b03      	subs	r3, #3
 800064a:	e000      	b.n	800064e <NVIC_EncodePriority+0x32>
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	f04f 32ff 	mov.w	r2, #4294967295
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	43da      	mvns	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	401a      	ands	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000664:	f04f 31ff 	mov.w	r1, #4294967295
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43d9      	mvns	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	4313      	orrs	r3, r2
         );
}
 8000676:	4618      	mov	r0, r3
 8000678:	3724      	adds	r7, #36	@ 0x24
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <LL_RCC_HSE_Enable+0x1c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <LL_RCC_HSE_Enable+0x1c>)
 800068e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <LL_RCC_HSE_IsReady+0x24>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80006b4:	bf0c      	ite	eq
 80006b6:	2301      	moveq	r3, #1
 80006b8:	2300      	movne	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <LL_RCC_SetSysClkSource+0x24>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f023 0203 	bic.w	r2, r3, #3
 80006dc:	4904      	ldr	r1, [pc, #16]	@ (80006f0 <LL_RCC_SetSysClkSource+0x24>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	608b      	str	r3, [r1, #8]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40023800 	.word	0x40023800

080006f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006f8:	4b04      	ldr	r3, [pc, #16]	@ (800070c <LL_RCC_GetSysClkSource+0x18>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	f003 030c 	and.w	r3, r3, #12
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <LL_RCC_SetAHBPrescaler+0x24>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000720:	4904      	ldr	r1, [pc, #16]	@ (8000734 <LL_RCC_SetAHBPrescaler+0x24>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	608b      	str	r3, [r1, #8]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	40023800 	.word	0x40023800

08000738 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000748:	4904      	ldr	r1, [pc, #16]	@ (800075c <LL_RCC_SetAPB1Prescaler+0x24>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	608b      	str	r3, [r1, #8]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40023800 	.word	0x40023800

08000760 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <LL_RCC_SetAPB2Prescaler+0x24>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000770:	4904      	ldr	r1, [pc, #16]	@ (8000784 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4313      	orrs	r3, r2
 8000776:	608b      	str	r3, [r1, #8]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	40023800 	.word	0x40023800

08000788 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <LL_RCC_PLL_Enable+0x1c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <LL_RCC_PLL_Enable+0x1c>)
 8000792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <LL_RCC_PLL_IsReady+0x24>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80007b8:	bf0c      	ite	eq
 80007ba:	2301      	moveq	r3, #1
 80007bc:	2300      	movne	r3, #0
 80007be:	b2db      	uxtb	r3, r3
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80007e4:	4013      	ands	r3, r2
 80007e6:	68f9      	ldr	r1, [r7, #12]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	4311      	orrs	r1, r2
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	0192      	lsls	r2, r2, #6
 80007f0:	430a      	orrs	r2, r1
 80007f2:	4908      	ldr	r1, [pc, #32]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007f4:	4313      	orrs	r3, r2
 80007f6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000800:	4904      	ldr	r1, [pc, #16]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	4313      	orrs	r3, r2
 8000806:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	40023800 	.word	0x40023800
 8000818:	ffbf8000 	.word	0xffbf8000

0800081c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000828:	4907      	ldr	r1, [pc, #28]	@ (8000848 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4313      	orrs	r3, r2
 800082e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4013      	ands	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40023800 	.word	0x40023800

0800084c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <LL_FLASH_SetLatency+0x24>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f023 0207 	bic.w	r2, r3, #7
 800085c:	4904      	ldr	r1, [pc, #16]	@ (8000870 <LL_FLASH_SetLatency+0x24>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4313      	orrs	r3, r2
 8000862:	600b      	str	r3, [r1, #0]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	40023c00 	.word	0x40023c00

08000874 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <LL_FLASH_GetLatency+0x18>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f003 0307 	and.w	r3, r3, #7
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023c00 	.word	0x40023c00

08000890 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80008a0:	4904      	ldr	r1, [pc, #16]	@ (80008b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	600b      	str	r3, [r1, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40007000 	.word	0x40007000

080008b8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <LL_PWR_IsActiveFlag_VOS+0x24>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008c8:	bf0c      	ite	eq
 80008ca:	2301      	moveq	r3, #1
 80008cc:	2300      	movne	r3, #0
 80008ce:	b2db      	uxtb	r3, r3
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40007000 	.word	0x40007000

080008e0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	683a      	ldr	r2, [r7, #0]
 80008ee:	619a      	str	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	041a      	lsls	r2, r3, #16
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	619a      	str	r2, [r3, #24]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800091a:	b480      	push	{r7}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	4013      	ands	r3, r2
 8000930:	041a      	lsls	r2, r3, #16
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	43d9      	mvns	r1, r3
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	400b      	ands	r3, r1
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	619a      	str	r2, [r3, #24]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fc06 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f906 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 f97e 	bl	8000c58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800095c:	f000 f952 	bl	8000c04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  hcan1.Instance = _CAN1;
 8000960:	4b74      	ldr	r3, [pc, #464]	@ (8000b34 <main+0x1e8>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]

  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_5);
 8000966:	2120      	movs	r1, #32
 8000968:	4873      	ldr	r0, [pc, #460]	@ (8000b38 <main+0x1ec>)
 800096a:	f7ff ffb9 	bl	80008e0 <LL_GPIO_SetOutputPin>

  if (LL_CAN_GPIO_Init(&hcan1) == ERROR)
 800096e:	4871      	ldr	r0, [pc, #452]	@ (8000b34 <main+0x1e8>)
 8000970:	f001 fd1e 	bl	80023b0 <LL_CAN_GPIO_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d10b      	bne.n	8000992 <main+0x46>
  {
    sprintf(msg, "GPIO initialization fail\n");
 800097a:	4970      	ldr	r1, [pc, #448]	@ (8000b3c <main+0x1f0>)
 800097c:	4870      	ldr	r0, [pc, #448]	@ (8000b40 <main+0x1f4>)
 800097e:	f002 fceb 	bl	8003358 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, 50, 1000);
 8000982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000986:	2232      	movs	r2, #50	@ 0x32
 8000988:	496d      	ldr	r1, [pc, #436]	@ (8000b40 <main+0x1f4>)
 800098a:	486e      	ldr	r0, [pc, #440]	@ (8000b44 <main+0x1f8>)
 800098c:	f000 ff60 	bl	8001850 <HAL_UART_Transmit>
 8000990:	e00a      	b.n	80009a8 <main+0x5c>
  }
  else
  {
    sprintf(msg, "GPIO initialization successfully\n");
 8000992:	496d      	ldr	r1, [pc, #436]	@ (8000b48 <main+0x1fc>)
 8000994:	486a      	ldr	r0, [pc, #424]	@ (8000b40 <main+0x1f4>)
 8000996:	f002 fcdf 	bl	8003358 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, 50, 1000);
 800099a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099e:	2232      	movs	r2, #50	@ 0x32
 80009a0:	4967      	ldr	r1, [pc, #412]	@ (8000b40 <main+0x1f4>)
 80009a2:	4868      	ldr	r0, [pc, #416]	@ (8000b44 <main+0x1f8>)
 80009a4:	f000 ff54 	bl	8001850 <HAL_UART_Transmit>
  }

  //  // Config NVIC
  NVIC_SetPriority(CAN1_TX_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 80009a8:	f7ff fde2 	bl	8000570 <__NVIC_GetPriorityGrouping>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2200      	movs	r2, #0
 80009b0:	210f      	movs	r1, #15
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe32 	bl	800061c <NVIC_EncodePriority>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4619      	mov	r1, r3
 80009bc:	2013      	movs	r0, #19
 80009be:	f7ff fe03 	bl	80005c8 <__NVIC_SetPriority>
  NVIC_SetPriority(CAN1_RX0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 80009c2:	f7ff fdd5 	bl	8000570 <__NVIC_GetPriorityGrouping>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2200      	movs	r2, #0
 80009ca:	210f      	movs	r1, #15
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe25 	bl	800061c <NVIC_EncodePriority>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4619      	mov	r1, r3
 80009d6:	2014      	movs	r0, #20
 80009d8:	f7ff fdf6 	bl	80005c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009dc:	2014      	movs	r0, #20
 80009de:	f7ff fdd5 	bl	800058c <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(CAN1_TX_IRQn);
 80009e2:	2013      	movs	r0, #19
 80009e4:	f7ff fdd2 	bl	800058c <__NVIC_EnableIRQ>

  // Enable interrupt
  LL_CAN_ActivateInterrupt(&hcan1, _CAN_IT_RX_FIFO0_MSG_PENDING_Pos | _CAN_IT_TX_MAILBOX_EMPTY_Pos);
 80009e8:	2103      	movs	r1, #3
 80009ea:	4852      	ldr	r0, [pc, #328]	@ (8000b34 <main+0x1e8>)
 80009ec:	f002 fa2e 	bl	8002e4c <LL_CAN_ActivateInterrupt>

  // Set flag to
  hcan1.Init.Mode = _NORMAL_MODE;
 80009f0:	4b50      	ldr	r3, [pc, #320]	@ (8000b34 <main+0x1e8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	751a      	strb	r2, [r3, #20]
  hcan1.Init.status.AutoBusOff = DISABLE;
 80009f6:	4a4f      	ldr	r2, [pc, #316]	@ (8000b34 <main+0x1e8>)
 80009f8:	7d53      	ldrb	r3, [r2, #21]
 80009fa:	f36f 0341 	bfc	r3, #1, #1
 80009fe:	7553      	strb	r3, [r2, #21]
  hcan1.Init.status.AutoRetransmission = ENABLE;
 8000a00:	4a4c      	ldr	r2, [pc, #304]	@ (8000b34 <main+0x1e8>)
 8000a02:	7d53      	ldrb	r3, [r2, #21]
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	7553      	strb	r3, [r2, #21]
  hcan1.Init.status.AutoWakeUp = DISABLE;
 8000a0a:	4a4a      	ldr	r2, [pc, #296]	@ (8000b34 <main+0x1e8>)
 8000a0c:	7d53      	ldrb	r3, [r2, #21]
 8000a0e:	f36f 0382 	bfc	r3, #2, #1
 8000a12:	7553      	strb	r3, [r2, #21]
  hcan1.Init.status.ReceiveFifoLocked = DISABLE;
 8000a14:	4a47      	ldr	r2, [pc, #284]	@ (8000b34 <main+0x1e8>)
 8000a16:	7d53      	ldrb	r3, [r2, #21]
 8000a18:	f36f 1304 	bfc	r3, #4, #1
 8000a1c:	7553      	strb	r3, [r2, #21]
  hcan1.Init.status.TimeTriggeredMode = DISABLE;
 8000a1e:	4a45      	ldr	r2, [pc, #276]	@ (8000b34 <main+0x1e8>)
 8000a20:	7d53      	ldrb	r3, [r2, #21]
 8000a22:	f36f 0300 	bfc	r3, #0, #1
 8000a26:	7553      	strb	r3, [r2, #21]
  hcan1.Init.status.TransmitFifoPriority = DISABLE;
 8000a28:	4a42      	ldr	r2, [pc, #264]	@ (8000b34 <main+0x1e8>)
 8000a2a:	7d53      	ldrb	r3, [r2, #21]
 8000a2c:	f36f 1345 	bfc	r3, #5, #1
 8000a30:	7553      	strb	r3, [r2, #21]

  if (LL_CAN_Init(&hcan1) == ERROR)
 8000a32:	4840      	ldr	r0, [pc, #256]	@ (8000b34 <main+0x1e8>)
 8000a34:	f001 fd24 	bl	8002480 <LL_CAN_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d10f      	bne.n	8000a5e <main+0x112>
  {
    sprintf(msg, "Can initialization fail\n");
 8000a3e:	4943      	ldr	r1, [pc, #268]	@ (8000b4c <main+0x200>)
 8000a40:	483f      	ldr	r0, [pc, #252]	@ (8000b40 <main+0x1f4>)
 8000a42:	f002 fc89 	bl	8003358 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000a46:	483e      	ldr	r0, [pc, #248]	@ (8000b40 <main+0x1f4>)
 8000a48:	f7ff fbc2 	bl	80001d0 <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a54:	493a      	ldr	r1, [pc, #232]	@ (8000b40 <main+0x1f4>)
 8000a56:	483b      	ldr	r0, [pc, #236]	@ (8000b44 <main+0x1f8>)
 8000a58:	f000 fefa 	bl	8001850 <HAL_UART_Transmit>
 8000a5c:	e00e      	b.n	8000a7c <main+0x130>
  }
  else
  {
    sprintf(msg, "CAN initialization successfully\n");
 8000a5e:	493c      	ldr	r1, [pc, #240]	@ (8000b50 <main+0x204>)
 8000a60:	4837      	ldr	r0, [pc, #220]	@ (8000b40 <main+0x1f4>)
 8000a62:	f002 fc79 	bl	8003358 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000a66:	4836      	ldr	r0, [pc, #216]	@ (8000b40 <main+0x1f4>)
 8000a68:	f7ff fbb2 	bl	80001d0 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a74:	4932      	ldr	r1, [pc, #200]	@ (8000b40 <main+0x1f4>)
 8000a76:	4833      	ldr	r0, [pc, #204]	@ (8000b44 <main+0x1f8>)
 8000a78:	f000 feea 	bl	8001850 <HAL_UART_Transmit>
  }

  // Set up config filter
  hfilter1.FilterActivation = _CAN_FILTER_ENABLE;
 8000a7c:	4b35      	ldr	r3, [pc, #212]	@ (8000b54 <main+0x208>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	621a      	str	r2, [r3, #32]
  hfilter1.FilterBank = 0;
 8000a82:	4b34      	ldr	r3, [pc, #208]	@ (8000b54 <main+0x208>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hfilter1.FilterFIFOAssignment = _CAN_FILTER_FIFO0;
 8000a88:	4b32      	ldr	r3, [pc, #200]	@ (8000b54 <main+0x208>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hfilter1.FilterIdHigh = 0;
 8000a8e:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <main+0x208>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
  hfilter1.FilterIdLow = 0;
 8000a94:	4b2f      	ldr	r3, [pc, #188]	@ (8000b54 <main+0x208>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  hfilter1.FilterMaskIdHigh = 0;
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <main+0x208>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hfilter1.FilterMaskIdLow = 0;
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <main+0x208>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  hfilter1.FilterMode = _CAN_FILTERMODE_IDMASK;
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b54 <main+0x208>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hfilter1.FilterScale = _CAN_FILTERSCALE_32BIT;
 8000aac:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <main+0x208>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	61da      	str	r2, [r3, #28]
  LL_CAN_ConfigFilter(&hcan1, &hfilter1);
 8000ab2:	4928      	ldr	r1, [pc, #160]	@ (8000b54 <main+0x208>)
 8000ab4:	481f      	ldr	r0, [pc, #124]	@ (8000b34 <main+0x1e8>)
 8000ab6:	f001 fe7b 	bl	80027b0 <LL_CAN_ConfigFilter>

  // Enable interrupt
  LL_CAN_ActivateInterrupt(&hcan1, _CAN_IT_RX_FIFO0_MSG_PENDING_Pos | _CAN_IT_TX_MAILBOX_EMPTY_Pos);
 8000aba:	2103      	movs	r1, #3
 8000abc:	481d      	ldr	r0, [pc, #116]	@ (8000b34 <main+0x1e8>)
 8000abe:	f002 f9c5 	bl	8002e4c <LL_CAN_ActivateInterrupt>

  // Start Can
  if (LL_CAN_Start(&hcan1) == ERROR)
 8000ac2:	481c      	ldr	r0, [pc, #112]	@ (8000b34 <main+0x1e8>)
 8000ac4:	f001 ff80 	bl	80029c8 <LL_CAN_Start>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d10f      	bne.n	8000aee <main+0x1a2>
  {
    sprintf(msg, "Can start fail\n");
 8000ace:	4922      	ldr	r1, [pc, #136]	@ (8000b58 <main+0x20c>)
 8000ad0:	481b      	ldr	r0, [pc, #108]	@ (8000b40 <main+0x1f4>)
 8000ad2:	f002 fc41 	bl	8003358 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000ad6:	481a      	ldr	r0, [pc, #104]	@ (8000b40 <main+0x1f4>)
 8000ad8:	f7ff fb7a 	bl	80001d0 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae4:	4916      	ldr	r1, [pc, #88]	@ (8000b40 <main+0x1f4>)
 8000ae6:	4817      	ldr	r0, [pc, #92]	@ (8000b44 <main+0x1f8>)
 8000ae8:	f000 feb2 	bl	8001850 <HAL_UART_Transmit>
 8000aec:	e00e      	b.n	8000b0c <main+0x1c0>
  }
  else
  {
    sprintf(msg, "CAN start successfully\n");
 8000aee:	491b      	ldr	r1, [pc, #108]	@ (8000b5c <main+0x210>)
 8000af0:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <main+0x1f4>)
 8000af2:	f002 fc31 	bl	8003358 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000af6:	4812      	ldr	r0, [pc, #72]	@ (8000b40 <main+0x1f4>)
 8000af8:	f7ff fb6a 	bl	80001d0 <strlen>
 8000afc:	4603      	mov	r3, r0
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b04:	490e      	ldr	r1, [pc, #56]	@ (8000b40 <main+0x1f4>)
 8000b06:	480f      	ldr	r0, [pc, #60]	@ (8000b44 <main+0x1f8>)
 8000b08:	f000 fea2 	bl	8001850 <HAL_UART_Transmit>
  }

  Txheader.StdId = 135;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <main+0x214>)
 8000b0e:	2287      	movs	r2, #135	@ 0x87
 8000b10:	601a      	str	r2, [r3, #0]
  Txheader._DLC = 6;
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <main+0x214>)
 8000b14:	2206      	movs	r2, #6
 8000b16:	611a      	str	r2, [r3, #16]
  Txheader._RTR = _CAN_RTR_DATA;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <main+0x214>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  Txheader._IDE = _CAN_ID_STD;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <main+0x214>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  Txheader.TransmitGlobalTime = DISABLE;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <main+0x214>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	751a      	strb	r2, [r3, #20]

  /* USER CODE END 2 */

  Can_Tx();
 8000b2a:	f000 f8d7 	bl	8000cdc <Can_Tx>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b2e:	bf00      	nop
 8000b30:	e7fd      	b.n	8000b2e <main+0x1e2>
 8000b32:	bf00      	nop
 8000b34:	200000c8 	.word	0x200000c8
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	08003ca0 	.word	0x08003ca0
 8000b40:	20000148 	.word	0x20000148
 8000b44:	20000080 	.word	0x20000080
 8000b48:	08003cbc 	.word	0x08003cbc
 8000b4c:	08003ce0 	.word	0x08003ce0
 8000b50:	08003cfc 	.word	0x08003cfc
 8000b54:	200000e4 	.word	0x200000e4
 8000b58:	08003d20 	.word	0x08003d20
 8000b5c:	08003d30 	.word	0x08003d30
 8000b60:	2000010c 	.word	0x2000010c

08000b64 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f7ff fe6f 	bl	800084c <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8000b6e:	bf00      	nop
 8000b70:	f7ff fe80 	bl	8000874 <LL_FLASH_GetLatency>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d1fa      	bne.n	8000b70 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000b7a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b7e:	f7ff fe87 	bl	8000890 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000b82:	f7ff fd7f 	bl	8000684 <LL_RCC_HSE_Enable>

  /* Wait till HSE is ready */
  while (LL_RCC_HSE_IsReady() != 1)
 8000b86:	bf00      	nop
 8000b88:	f7ff fd8c 	bl	80006a4 <LL_RCC_HSE_IsReady>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d1fa      	bne.n	8000b88 <SystemClock_Config+0x24>
  {
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 192, LL_RCC_PLLP_DIV_4);
 8000b92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b96:	22c0      	movs	r2, #192	@ 0xc0
 8000b98:	2104      	movs	r1, #4
 8000b9a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000b9e:	f7ff fe17 	bl	80007d0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000ba2:	f7ff fdf1 	bl	8000788 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff fdfe 	bl	80007a8 <LL_RCC_PLL_IsReady>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d1fa      	bne.n	8000ba8 <SystemClock_Config+0x44>
  {
  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff fe80 	bl	80008b8 <LL_PWR_IsActiveFlag_VOS>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0fa      	beq.n	8000bb4 <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000bbe:	2080      	movs	r0, #128	@ 0x80
 8000bc0:	f7ff fda6 	bl	8000710 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000bc4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000bc8:	f7ff fdb6 	bl	8000738 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff fdc7 	bl	8000760 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff fd7a 	bl	80006cc <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000bd8:	bf00      	nop
 8000bda:	f7ff fd8b 	bl	80006f4 <LL_RCC_GetSysClkSource>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b08      	cmp	r3, #8
 8000be2:	d1fa      	bne.n	8000bda <SystemClock_Config+0x76>
  {
  }
  LL_SetSystemCoreClock(48000000);
 8000be4:	4806      	ldr	r0, [pc, #24]	@ (8000c00 <SystemClock_Config+0x9c>)
 8000be6:	f001 fbbb 	bl	8002360 <LL_SetSystemCoreClock>

  /* Update the time base */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bea:	200f      	movs	r0, #15
 8000bec:	f000 fada 	bl	80011a4 <HAL_InitTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bf6:	f000 f973 	bl	8000ee0 <Error_Handler>
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	02dc6c00 	.word	0x02dc6c00

08000c04 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <MX_USART2_UART_Init+0x50>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f000 fdb8 	bl	80017b0 <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c46:	f000 f94b 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000080 	.word	0x20000080
 8000c54:	40004400 	.word	0x40004400

08000c58 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000c6e:	2080      	movs	r0, #128	@ 0x80
 8000c70:	f7ff fdd4 	bl	800081c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff fdd1 	bl	800081c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000c7a:	2004      	movs	r0, #4
 8000c7c:	f7ff fdce 	bl	800081c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Anti_WDG_GPIO_Port, Anti_WDG_Pin);
 8000c80:	2102      	movs	r1, #2
 8000c82:	4814      	ldr	r0, [pc, #80]	@ (8000cd4 <MX_GPIO_Init+0x7c>)
 8000c84:	f7ff fe3a 	bl	80008fc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000c88:	2120      	movs	r1, #32
 8000c8a:	4813      	ldr	r0, [pc, #76]	@ (8000cd8 <MX_GPIO_Init+0x80>)
 8000c8c:	f7ff fe36 	bl	80008fc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Anti_WDG_Pin;
 8000c90:	2302      	movs	r3, #2
 8000c92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c94:	2301      	movs	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Anti_WDG_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480a      	ldr	r0, [pc, #40]	@ (8000cd4 <MX_GPIO_Init+0x7c>)
 8000caa:	f001 fad8 	bl	800225e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <MX_GPIO_Init+0x80>)
 8000cc8:	f001 fac9 	bl	800225e <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020800 	.word	0x40020800

08000cdc <Can_Tx>:
      HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
    }
  }
}
void Can_Tx()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  if (LL_CAN_AddTxMessage(&hcan1, data1, &Txheader, &TxMailBox) == ERROR)
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <Can_Tx+0x38>)
 8000ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <Can_Tx+0x3c>)
 8000ce4:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <Can_Tx+0x40>)
 8000ce6:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <Can_Tx+0x44>)
 8000ce8:	f001 feb8 	bl	8002a5c <LL_CAN_AddTxMessage>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d10e      	bne.n	8000d10 <Can_Tx+0x34>
  {
    //          if (LL_CAN_IsTxMessagePending(&hcan1, &TxMailBox) == SUCCESS)
    //          {
    //            LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_5);
    //          }
    sprintf(msg, "Transmit Fail\n");
 8000cf2:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <Can_Tx+0x48>)
 8000cf4:	480c      	ldr	r0, [pc, #48]	@ (8000d28 <Can_Tx+0x4c>)
 8000cf6:	f002 fb2f 	bl	8003358 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000cfa:	480b      	ldr	r0, [pc, #44]	@ (8000d28 <Can_Tx+0x4c>)
 8000cfc:	f7ff fa68 	bl	80001d0 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d08:	4907      	ldr	r1, [pc, #28]	@ (8000d28 <Can_Tx+0x4c>)
 8000d0a:	4808      	ldr	r0, [pc, #32]	@ (8000d2c <Can_Tx+0x50>)
 8000d0c:	f000 fda0 	bl	8001850 <HAL_UART_Transmit>
  }
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000190 	.word	0x20000190
 8000d18:	2000010c 	.word	0x2000010c
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	200000c8 	.word	0x200000c8
 8000d24:	08003d58 	.word	0x08003d58
 8000d28:	20000148 	.word	0x20000148
 8000d2c:	20000080 	.word	0x20000080

08000d30 <LL_CAN_TxMailbox0CompleteCallback>:

void LL_CAN_TxMailbox0CompleteCallback(LL_CAN_Handler_t *hcan)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  sprintf(msg, "Transmit Successfully M0\n");
 8000d38:	4909      	ldr	r1, [pc, #36]	@ (8000d60 <LL_CAN_TxMailbox0CompleteCallback+0x30>)
 8000d3a:	480a      	ldr	r0, [pc, #40]	@ (8000d64 <LL_CAN_TxMailbox0CompleteCallback+0x34>)
 8000d3c:	f002 fb0c 	bl	8003358 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000d40:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <LL_CAN_TxMailbox0CompleteCallback+0x34>)
 8000d42:	f7ff fa45 	bl	80001d0 <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4e:	4905      	ldr	r1, [pc, #20]	@ (8000d64 <LL_CAN_TxMailbox0CompleteCallback+0x34>)
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <LL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000d52:	f000 fd7d 	bl	8001850 <HAL_UART_Transmit>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	08003d68 	.word	0x08003d68
 8000d64:	20000148 	.word	0x20000148
 8000d68:	20000080 	.word	0x20000080

08000d6c <LL_CAN_TxMailbox1CompleteCallback>:
void LL_CAN_TxMailbox1CompleteCallback(LL_CAN_Handler_t *hcan)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  sprintf(msg, "Transmit Successfully M1\n");
 8000d74:	4909      	ldr	r1, [pc, #36]	@ (8000d9c <LL_CAN_TxMailbox1CompleteCallback+0x30>)
 8000d76:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <LL_CAN_TxMailbox1CompleteCallback+0x34>)
 8000d78:	f002 faee 	bl	8003358 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000d7c:	4808      	ldr	r0, [pc, #32]	@ (8000da0 <LL_CAN_TxMailbox1CompleteCallback+0x34>)
 8000d7e:	f7ff fa27 	bl	80001d0 <strlen>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8a:	4905      	ldr	r1, [pc, #20]	@ (8000da0 <LL_CAN_TxMailbox1CompleteCallback+0x34>)
 8000d8c:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <LL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000d8e:	f000 fd5f 	bl	8001850 <HAL_UART_Transmit>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08003d84 	.word	0x08003d84
 8000da0:	20000148 	.word	0x20000148
 8000da4:	20000080 	.word	0x20000080

08000da8 <LL_CAN_TxMailbox2CompleteCallback>:
void LL_CAN_TxMailbox2CompleteCallback(LL_CAN_Handler_t *hcan)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  sprintf(msg, "Transmit Successfully M2\n");
 8000db0:	4909      	ldr	r1, [pc, #36]	@ (8000dd8 <LL_CAN_TxMailbox2CompleteCallback+0x30>)
 8000db2:	480a      	ldr	r0, [pc, #40]	@ (8000ddc <LL_CAN_TxMailbox2CompleteCallback+0x34>)
 8000db4:	f002 fad0 	bl	8003358 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000db8:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <LL_CAN_TxMailbox2CompleteCallback+0x34>)
 8000dba:	f7ff fa09 	bl	80001d0 <strlen>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc6:	4905      	ldr	r1, [pc, #20]	@ (8000ddc <LL_CAN_TxMailbox2CompleteCallback+0x34>)
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <LL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000dca:	f000 fd41 	bl	8001850 <HAL_UART_Transmit>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	08003da0 	.word	0x08003da0
 8000ddc:	20000148 	.word	0x20000148
 8000de0:	20000080 	.word	0x20000080

08000de4 <LL_CAN_RxFifo0MsgPendingCallback>:
void LL_CAN_RxFifo0MsgPendingCallback(LL_CAN_Handler_t *hcan)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if (LL_CAN_GetRxMessage(&hcan1, &Rxheader, rxdata, _CAN_RX_FIFO0) == ERROR)
 8000dec:	2300      	movs	r3, #0
 8000dee:	4a30      	ldr	r2, [pc, #192]	@ (8000eb0 <LL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000df0:	4930      	ldr	r1, [pc, #192]	@ (8000eb4 <LL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000df2:	4831      	ldr	r0, [pc, #196]	@ (8000eb8 <LL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000df4:	f001 ff08 	bl	8002c08 <LL_CAN_GetRxMessage>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d10f      	bne.n	8000e1e <LL_CAN_RxFifo0MsgPendingCallback+0x3a>
  {
    sprintf(msg, "Receive Fail\n");
 8000dfe:	492f      	ldr	r1, [pc, #188]	@ (8000ebc <LL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000e00:	482f      	ldr	r0, [pc, #188]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e02:	f002 faa9 	bl	8003358 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000e06:	482e      	ldr	r0, [pc, #184]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e08:	f7ff f9e2 	bl	80001d0 <strlen>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e14:	492a      	ldr	r1, [pc, #168]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e16:	482b      	ldr	r0, [pc, #172]	@ (8000ec4 <LL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000e18:	f000 fd1a 	bl	8001850 <HAL_UART_Transmit>
    }
    sprintf(msg, "Receive Successfully\n");
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
    LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_5);
  }
}
 8000e1c:	e044      	b.n	8000ea8 <LL_CAN_RxFifo0MsgPendingCallback+0xc4>
	  if (LL_CAN_AddTxMessage(&hcan1, rxdata, &Txheader, &TxMailBox) == ERROR)
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec8 <LL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000e20:	4a2a      	ldr	r2, [pc, #168]	@ (8000ecc <LL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000e22:	4923      	ldr	r1, [pc, #140]	@ (8000eb0 <LL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000e24:	4824      	ldr	r0, [pc, #144]	@ (8000eb8 <LL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000e26:	f001 fe19 	bl	8002a5c <LL_CAN_AddTxMessage>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10e      	bne.n	8000e4e <LL_CAN_RxFifo0MsgPendingCallback+0x6a>
	    sprintf(msg, "Receive and Transmit Successfully\n");
 8000e30:	4927      	ldr	r1, [pc, #156]	@ (8000ed0 <LL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000e32:	4823      	ldr	r0, [pc, #140]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e34:	f002 fa90 	bl	8003358 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000e38:	4821      	ldr	r0, [pc, #132]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e3a:	f7ff f9c9 	bl	80001d0 <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e46:	491e      	ldr	r1, [pc, #120]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e48:	481e      	ldr	r0, [pc, #120]	@ (8000ec4 <LL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000e4a:	f000 fd01 	bl	8001850 <HAL_UART_Transmit>
    sprintf(msg, "string\n");
 8000e4e:	4921      	ldr	r1, [pc, #132]	@ (8000ed4 <LL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000e50:	481b      	ldr	r0, [pc, #108]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e52:	f002 fa81 	bl	8003358 <siprintf>
    for (int i = 0; i < Rxheader._DLC; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	e00d      	b.n	8000e78 <LL_CAN_RxFifo0MsgPendingCallback+0x94>
    	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000e5c:	4818      	ldr	r0, [pc, #96]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e5e:	f7ff f9b7 	bl	80001d0 <strlen>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6a:	4915      	ldr	r1, [pc, #84]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e6c:	4815      	ldr	r0, [pc, #84]	@ (8000ec4 <LL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000e6e:	f000 fcef 	bl	8001850 <HAL_UART_Transmit>
    for (int i = 0; i < Rxheader._DLC; i++)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <LL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d8ec      	bhi.n	8000e5c <LL_CAN_RxFifo0MsgPendingCallback+0x78>
    sprintf(msg, "Receive Successfully\n");
 8000e82:	4915      	ldr	r1, [pc, #84]	@ (8000ed8 <LL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000e84:	480e      	ldr	r0, [pc, #56]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e86:	f002 fa67 	bl	8003358 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000e8a:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e8c:	f7ff f9a0 	bl	80001d0 <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e98:	4909      	ldr	r1, [pc, #36]	@ (8000ec0 <LL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e9a:	480a      	ldr	r0, [pc, #40]	@ (8000ec4 <LL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000e9c:	f000 fcd8 	bl	8001850 <HAL_UART_Transmit>
    LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_5);
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	480e      	ldr	r0, [pc, #56]	@ (8000edc <LL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000ea4:	f7ff fd39 	bl	800091a <LL_GPIO_TogglePin>
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000140 	.word	0x20000140
 8000eb4:	20000124 	.word	0x20000124
 8000eb8:	200000c8 	.word	0x200000c8
 8000ebc:	08003d48 	.word	0x08003d48
 8000ec0:	20000148 	.word	0x20000148
 8000ec4:	20000080 	.word	0x20000080
 8000ec8:	20000190 	.word	0x20000190
 8000ecc:	2000010c 	.word	0x2000010c
 8000ed0:	08003dbc 	.word	0x08003dbc
 8000ed4:	08003de0 	.word	0x08003de0
 8000ed8:	08003de8 	.word	0x08003de8
 8000edc:	40020800 	.word	0x40020800

08000ee0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <Error_Handler+0x8>

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	4a0f      	ldr	r2, [pc, #60]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f02:	4b0d      	ldr	r3, [pc, #52]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	4a08      	ldr	r2, [pc, #32]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a19      	ldr	r2, [pc, #100]	@ (8000fc0 <HAL_UART_MspInit+0x84>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d12b      	bne.n	8000fb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	4a17      	ldr	r2, [pc, #92]	@ (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a10      	ldr	r2, [pc, #64]	@ (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <HAL_UART_MspInit+0x88>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f96:	230c      	movs	r3, #12
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000fb2:	f000 fa2d 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	@ 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001022:	f000 f8ef 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <CAN1_TX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  LL_CAN_IRQHandler(&hcan1);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <CAN1_TX_IRQHandler+0x10>)
 8001032:	f001 ff89 	bl	8002f48 <LL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000c8 	.word	0x200000c8

08001040 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  LL_CAN_IRQHandler(&hcan1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <CAN1_RX0_IRQHandler+0x10>)
 8001046:	f001 ff7f 	bl	8002f48 <LL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000c8 	.word	0x200000c8

08001054 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
//
  /* USER CODE END CAN1_RX1_IRQn 0 */
  LL_CAN_IRQHandler(&hcan1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <CAN1_RX1_IRQHandler+0x10>)
 800105a:	f001 ff75 	bl	8002f48 <LL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
//
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000c8 	.word	0x200000c8

08001068 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */
//
  /* USER CODE END CAN1_SCE_IRQn 0 */
  LL_CAN_IRQHandler(&hcan1);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <CAN1_SCE_IRQHandler+0x10>)
 800106e:	f001 ff6b 	bl	8002f48 <LL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */
//
  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000c8 	.word	0x200000c8

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f002 f974 	bl	8003398 <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20020000 	.word	0x20020000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	20000194 	.word	0x20000194
 80010e4:	200002e8 	.word	0x200002e8

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001144 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001110:	f7ff ffea 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	@ (800114c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	@ (8001158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800113a:	f002 f933 	bl	80033a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fc05 	bl	800094c <main>
  bx  lr    
 8001142:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001150:	08003e4c 	.word	0x08003e4c
  ldr r2, =_sbss
 8001154:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001158:	200002e8 	.word	0x200002e8

0800115c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <HAL_Init+0x40>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_Init+0x40>)
 8001176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <HAL_Init+0x40>)
 8001182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f90d 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff feaa 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f917 	bl	80013f6 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 f8ed 	bl	80013be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000010 	.word	0x20000010
 8001200:	2000000c 	.word	0x2000000c

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000010 	.word	0x20000010
 8001228:	20000198 	.word	0x20000198

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000198 	.word	0x20000198

08001244 <__NVIC_SetPriorityGrouping>:
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800126c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_GetPriorityGrouping>:
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_SetPriority>:
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	@ (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	@ 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	@ 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001374:	d301      	bcc.n	800137a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001376:	2301      	movs	r3, #1
 8001378:	e00f      	b.n	800139a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <SysTick_Config+0x40>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001382:	210f      	movs	r1, #15
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f7ff ff8e 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <SysTick_Config+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <SysTick_Config+0x40>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff47 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff5c 	bl	800128c <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff8e 	bl	80012fc <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5d 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffb0 	bl	8001364 <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e16b      	b.n	8001704 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800142c:	2201      	movs	r2, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 815a 	bne.w	80016fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d005      	beq.n	8001462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	2b02      	cmp	r3, #2
 8001460:	d130      	bne.n	80014c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d017      	beq.n	8001500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80b4 	beq.w	80016fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b60      	ldr	r3, [pc, #384]	@ (800171c <HAL_GPIO_Init+0x30c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	4a5f      	ldr	r2, [pc, #380]	@ (800171c <HAL_GPIO_Init+0x30c>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a6:	4b5d      	ldr	r3, [pc, #372]	@ (800171c <HAL_GPIO_Init+0x30c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <HAL_GPIO_Init+0x310>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <HAL_GPIO_Init+0x314>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d02b      	beq.n	8001636 <HAL_GPIO_Init+0x226>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a51      	ldr	r2, [pc, #324]	@ (8001728 <HAL_GPIO_Init+0x318>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d025      	beq.n	8001632 <HAL_GPIO_Init+0x222>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a50      	ldr	r2, [pc, #320]	@ (800172c <HAL_GPIO_Init+0x31c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01f      	beq.n	800162e <HAL_GPIO_Init+0x21e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001730 <HAL_GPIO_Init+0x320>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x21a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001734 <HAL_GPIO_Init+0x324>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x216>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4d      	ldr	r2, [pc, #308]	@ (8001738 <HAL_GPIO_Init+0x328>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x212>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4c      	ldr	r2, [pc, #304]	@ (800173c <HAL_GPIO_Init+0x32c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x20e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4b      	ldr	r2, [pc, #300]	@ (8001740 <HAL_GPIO_Init+0x330>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x20a>
 8001616:	2307      	movs	r3, #7
 8001618:	e00e      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800161a:	2308      	movs	r3, #8
 800161c:	e00c      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800161e:	2306      	movs	r3, #6
 8001620:	e00a      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001622:	2305      	movs	r3, #5
 8001624:	e008      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001626:	2304      	movs	r3, #4
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800162a:	2303      	movs	r3, #3
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001636:	2300      	movs	r3, #0
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4093      	lsls	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001648:	4935      	ldr	r1, [pc, #212]	@ (8001720 <HAL_GPIO_Init+0x310>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001656:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <HAL_GPIO_Init+0x334>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167a:	4a32      	ldr	r2, [pc, #200]	@ (8001744 <HAL_GPIO_Init+0x334>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001680:	4b30      	ldr	r3, [pc, #192]	@ (8001744 <HAL_GPIO_Init+0x334>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a4:	4a27      	ldr	r2, [pc, #156]	@ (8001744 <HAL_GPIO_Init+0x334>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016aa:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <HAL_GPIO_Init+0x334>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <HAL_GPIO_Init+0x334>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <HAL_GPIO_Init+0x334>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f8:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <HAL_GPIO_Init+0x334>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f ae90 	bls.w	800142c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3724      	adds	r7, #36	@ 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40013800 	.word	0x40013800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40021400 	.word	0x40021400
 800173c:	40021800 	.word	0x40021800
 8001740:	40021c00 	.word	0x40021c00
 8001744:	40013c00 	.word	0x40013c00

08001748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <HAL_RCC_GetHCLKFreq+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008

08001760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001764:	f7ff fff0 	bl	8001748 <HAL_RCC_GetHCLKFreq>
 8001768:	4602      	mov	r2, r0
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	0a9b      	lsrs	r3, r3, #10
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	4903      	ldr	r1, [pc, #12]	@ (8001784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001776:	5ccb      	ldrb	r3, [r1, r3]
 8001778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800
 8001784:	08003e00 	.word	0x08003e00

08001788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800178c:	f7ff ffdc 	bl	8001748 <HAL_RCC_GetHCLKFreq>
 8001790:	4602      	mov	r2, r0
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	0b5b      	lsrs	r3, r3, #13
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	4903      	ldr	r1, [pc, #12]	@ (80017ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800179e:	5ccb      	ldrb	r3, [r1, r3]
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	08003e00 	.word	0x08003e00

080017b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e042      	b.n	8001848 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fbb0 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2224      	movs	r2, #36	@ 0x24
 80017e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80017f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f973 	bl	8001ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695a      	ldr	r2, [r3, #20]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af02      	add	r7, sp, #8
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b20      	cmp	r3, #32
 800186e:	d175      	bne.n	800195c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <HAL_UART_Transmit+0x2c>
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e06e      	b.n	800195e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2221      	movs	r2, #33	@ 0x21
 800188a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800188e:	f7ff fccd 	bl	800122c <HAL_GetTick>
 8001892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	88fa      	ldrh	r2, [r7, #6]
 8001898:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	88fa      	ldrh	r2, [r7, #6]
 800189e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018a8:	d108      	bne.n	80018bc <HAL_UART_Transmit+0x6c>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	e003      	b.n	80018c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80018c4:	e02e      	b.n	8001924 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2200      	movs	r2, #0
 80018ce:	2180      	movs	r1, #128	@ 0x80
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f848 	bl	8001966 <UART_WaitOnFlagUntilTimeout>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2220      	movs	r2, #32
 80018e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e03a      	b.n	800195e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10b      	bne.n	8001906 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	3302      	adds	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	e007      	b.n	8001916 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	3301      	adds	r3, #1
 8001914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800191a:	b29b      	uxth	r3, r3
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1cb      	bne.n	80018c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2200      	movs	r2, #0
 8001936:	2140      	movs	r1, #64	@ 0x40
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f814 	bl	8001966 <UART_WaitOnFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e006      	b.n	800195e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2220      	movs	r2, #32
 8001954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e000      	b.n	800195e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800195c:	2302      	movs	r3, #2
  }
}
 800195e:	4618      	mov	r0, r3
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4613      	mov	r3, r2
 8001974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001976:	e03b      	b.n	80019f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197e:	d037      	beq.n	80019f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001980:	f7ff fc54 	bl	800122c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	6a3a      	ldr	r2, [r7, #32]
 800198c:	429a      	cmp	r2, r3
 800198e:	d302      	bcc.n	8001996 <UART_WaitOnFlagUntilTimeout+0x30>
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e03a      	b.n	8001a10 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d023      	beq.n	80019f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b80      	cmp	r3, #128	@ 0x80
 80019ac:	d020      	beq.n	80019f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b40      	cmp	r3, #64	@ 0x40
 80019b2:	d01d      	beq.n	80019f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d116      	bne.n	80019f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 f81d 	bl	8001a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2208      	movs	r2, #8
 80019e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e00f      	b.n	8001a10 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	4013      	ands	r3, r2
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d0b4      	beq.n	8001978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b095      	sub	sp, #84	@ 0x54
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	330c      	adds	r3, #12
 8001a26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2a:	e853 3f00 	ldrex	r3, [r3]
 8001a2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	330c      	adds	r3, #12
 8001a3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a40:	643a      	str	r2, [r7, #64]	@ 0x40
 8001a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a48:	e841 2300 	strex	r3, r2, [r1]
 8001a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1e5      	bne.n	8001a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3314      	adds	r3, #20
 8001a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	e853 3f00 	ldrex	r3, [r3]
 8001a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3314      	adds	r3, #20
 8001a72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a7c:	e841 2300 	strex	r3, r2, [r1]
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e5      	bne.n	8001a54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d119      	bne.n	8001ac4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	330c      	adds	r3, #12
 8001a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	e853 3f00 	ldrex	r3, [r3]
 8001a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f023 0310 	bic.w	r3, r3, #16
 8001aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	330c      	adds	r3, #12
 8001aae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ab0:	61ba      	str	r2, [r7, #24]
 8001ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ab4:	6979      	ldr	r1, [r7, #20]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	e841 2300 	strex	r3, r2, [r1]
 8001abc:	613b      	str	r3, [r7, #16]
   return(result);
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e5      	bne.n	8001a90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001ad2:	bf00      	nop
 8001ad4:	3754      	adds	r7, #84	@ 0x54
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae4:	b0c0      	sub	sp, #256	@ 0x100
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001afc:	68d9      	ldr	r1, [r3, #12]
 8001afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	ea40 0301 	orr.w	r3, r0, r1
 8001b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001b38:	f021 010c 	bic.w	r1, r1, #12
 8001b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001b46:	430b      	orrs	r3, r1
 8001b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b5a:	6999      	ldr	r1, [r3, #24]
 8001b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	ea40 0301 	orr.w	r3, r0, r1
 8001b66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b8f      	ldr	r3, [pc, #572]	@ (8001dac <UART_SetConfig+0x2cc>)
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d005      	beq.n	8001b80 <UART_SetConfig+0xa0>
 8001b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b8d      	ldr	r3, [pc, #564]	@ (8001db0 <UART_SetConfig+0x2d0>)
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d104      	bne.n	8001b8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b80:	f7ff fe02 	bl	8001788 <HAL_RCC_GetPCLK2Freq>
 8001b84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001b88:	e003      	b.n	8001b92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b8a:	f7ff fde9 	bl	8001760 <HAL_RCC_GetPCLK1Freq>
 8001b8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b9c:	f040 810c 	bne.w	8001db8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001baa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001bae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001bb2:	4622      	mov	r2, r4
 8001bb4:	462b      	mov	r3, r5
 8001bb6:	1891      	adds	r1, r2, r2
 8001bb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001bba:	415b      	adcs	r3, r3
 8001bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001bbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	eb12 0801 	adds.w	r8, r2, r1
 8001bc8:	4629      	mov	r1, r5
 8001bca:	eb43 0901 	adc.w	r9, r3, r1
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001be2:	4690      	mov	r8, r2
 8001be4:	4699      	mov	r9, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	eb18 0303 	adds.w	r3, r8, r3
 8001bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	eb49 0303 	adc.w	r3, r9, r3
 8001bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001c06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001c0e:	460b      	mov	r3, r1
 8001c10:	18db      	adds	r3, r3, r3
 8001c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c14:	4613      	mov	r3, r2
 8001c16:	eb42 0303 	adc.w	r3, r2, r3
 8001c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001c24:	f7fe fb2c 	bl	8000280 <__aeabi_uldivmod>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4b61      	ldr	r3, [pc, #388]	@ (8001db4 <UART_SetConfig+0x2d4>)
 8001c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	011c      	lsls	r4, r3, #4
 8001c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001c40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001c44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001c48:	4642      	mov	r2, r8
 8001c4a:	464b      	mov	r3, r9
 8001c4c:	1891      	adds	r1, r2, r2
 8001c4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001c50:	415b      	adcs	r3, r3
 8001c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c58:	4641      	mov	r1, r8
 8001c5a:	eb12 0a01 	adds.w	sl, r2, r1
 8001c5e:	4649      	mov	r1, r9
 8001c60:	eb43 0b01 	adc.w	fp, r3, r1
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c78:	4692      	mov	sl, r2
 8001c7a:	469b      	mov	fp, r3
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	eb1a 0303 	adds.w	r3, sl, r3
 8001c82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001c86:	464b      	mov	r3, r9
 8001c88:	eb4b 0303 	adc.w	r3, fp, r3
 8001c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001c9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	18db      	adds	r3, r3, r3
 8001ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8001caa:	4613      	mov	r3, r2
 8001cac:	eb42 0303 	adc.w	r3, r2, r3
 8001cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001cba:	f7fe fae1 	bl	8000280 <__aeabi_uldivmod>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001db4 <UART_SetConfig+0x2d4>)
 8001cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2264      	movs	r2, #100	@ 0x64
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	1acb      	subs	r3, r1, r3
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001cda:	4b36      	ldr	r3, [pc, #216]	@ (8001db4 <UART_SetConfig+0x2d4>)
 8001cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8001ce0:	095b      	lsrs	r3, r3, #5
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001ce8:	441c      	add	r4, r3
 8001cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001cf4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001cf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001cfc:	4642      	mov	r2, r8
 8001cfe:	464b      	mov	r3, r9
 8001d00:	1891      	adds	r1, r2, r2
 8001d02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d04:	415b      	adcs	r3, r3
 8001d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d0c:	4641      	mov	r1, r8
 8001d0e:	1851      	adds	r1, r2, r1
 8001d10:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d12:	4649      	mov	r1, r9
 8001d14:	414b      	adcs	r3, r1
 8001d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001d24:	4659      	mov	r1, fp
 8001d26:	00cb      	lsls	r3, r1, #3
 8001d28:	4651      	mov	r1, sl
 8001d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d2e:	4651      	mov	r1, sl
 8001d30:	00ca      	lsls	r2, r1, #3
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	4642      	mov	r2, r8
 8001d3a:	189b      	adds	r3, r3, r2
 8001d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d40:	464b      	mov	r3, r9
 8001d42:	460a      	mov	r2, r1
 8001d44:	eb42 0303 	adc.w	r3, r2, r3
 8001d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001d58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001d60:	460b      	mov	r3, r1
 8001d62:	18db      	adds	r3, r3, r3
 8001d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d66:	4613      	mov	r3, r2
 8001d68:	eb42 0303 	adc.w	r3, r2, r3
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001d76:	f7fe fa83 	bl	8000280 <__aeabi_uldivmod>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <UART_SetConfig+0x2d4>)
 8001d80:	fba3 1302 	umull	r1, r3, r3, r2
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	2164      	movs	r1, #100	@ 0x64
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	3332      	adds	r3, #50	@ 0x32
 8001d92:	4a08      	ldr	r2, [pc, #32]	@ (8001db4 <UART_SetConfig+0x2d4>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	f003 0207 	and.w	r2, r3, #7
 8001d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4422      	add	r2, r4
 8001da6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001da8:	e106      	b.n	8001fb8 <UART_SetConfig+0x4d8>
 8001daa:	bf00      	nop
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40011400 	.word	0x40011400
 8001db4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001dc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001dca:	4642      	mov	r2, r8
 8001dcc:	464b      	mov	r3, r9
 8001dce:	1891      	adds	r1, r2, r2
 8001dd0:	6239      	str	r1, [r7, #32]
 8001dd2:	415b      	adcs	r3, r3
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dda:	4641      	mov	r1, r8
 8001ddc:	1854      	adds	r4, r2, r1
 8001dde:	4649      	mov	r1, r9
 8001de0:	eb43 0501 	adc.w	r5, r3, r1
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	00eb      	lsls	r3, r5, #3
 8001dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df2:	00e2      	lsls	r2, r4, #3
 8001df4:	4614      	mov	r4, r2
 8001df6:	461d      	mov	r5, r3
 8001df8:	4643      	mov	r3, r8
 8001dfa:	18e3      	adds	r3, r4, r3
 8001dfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e00:	464b      	mov	r3, r9
 8001e02:	eb45 0303 	adc.w	r3, r5, r3
 8001e06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e26:	4629      	mov	r1, r5
 8001e28:	008b      	lsls	r3, r1, #2
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e30:	4621      	mov	r1, r4
 8001e32:	008a      	lsls	r2, r1, #2
 8001e34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001e38:	f7fe fa22 	bl	8000280 <__aeabi_uldivmod>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4b60      	ldr	r3, [pc, #384]	@ (8001fc4 <UART_SetConfig+0x4e4>)
 8001e42:	fba3 2302 	umull	r2, r3, r3, r2
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	011c      	lsls	r4, r3, #4
 8001e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001e5c:	4642      	mov	r2, r8
 8001e5e:	464b      	mov	r3, r9
 8001e60:	1891      	adds	r1, r2, r2
 8001e62:	61b9      	str	r1, [r7, #24]
 8001e64:	415b      	adcs	r3, r3
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e6c:	4641      	mov	r1, r8
 8001e6e:	1851      	adds	r1, r2, r1
 8001e70:	6139      	str	r1, [r7, #16]
 8001e72:	4649      	mov	r1, r9
 8001e74:	414b      	adcs	r3, r1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e84:	4659      	mov	r1, fp
 8001e86:	00cb      	lsls	r3, r1, #3
 8001e88:	4651      	mov	r1, sl
 8001e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e8e:	4651      	mov	r1, sl
 8001e90:	00ca      	lsls	r2, r1, #3
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	4642      	mov	r2, r8
 8001e9a:	189b      	adds	r3, r3, r2
 8001e9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ea0:	464b      	mov	r3, r9
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	eb42 0303 	adc.w	r3, r2, r3
 8001ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001eb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	008b      	lsls	r3, r1, #2
 8001ec8:	4641      	mov	r1, r8
 8001eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ece:	4641      	mov	r1, r8
 8001ed0:	008a      	lsls	r2, r1, #2
 8001ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ed6:	f7fe f9d3 	bl	8000280 <__aeabi_uldivmod>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4b38      	ldr	r3, [pc, #224]	@ (8001fc4 <UART_SetConfig+0x4e4>)
 8001ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2264      	movs	r2, #100	@ 0x64
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	1acb      	subs	r3, r1, r3
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	3332      	adds	r3, #50	@ 0x32
 8001ef4:	4a33      	ldr	r2, [pc, #204]	@ (8001fc4 <UART_SetConfig+0x4e4>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f00:	441c      	add	r4, r3
 8001f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f06:	2200      	movs	r2, #0
 8001f08:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001f10:	4642      	mov	r2, r8
 8001f12:	464b      	mov	r3, r9
 8001f14:	1891      	adds	r1, r2, r2
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	415b      	adcs	r3, r3
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f20:	4641      	mov	r1, r8
 8001f22:	1851      	adds	r1, r2, r1
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	4649      	mov	r1, r9
 8001f28:	414b      	adcs	r3, r1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f38:	4659      	mov	r1, fp
 8001f3a:	00cb      	lsls	r3, r1, #3
 8001f3c:	4651      	mov	r1, sl
 8001f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f42:	4651      	mov	r1, sl
 8001f44:	00ca      	lsls	r2, r1, #3
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	189b      	adds	r3, r3, r2
 8001f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f52:	464b      	mov	r3, r9
 8001f54:	460a      	mov	r2, r1
 8001f56:	eb42 0303 	adc.w	r3, r2, r3
 8001f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f66:	667a      	str	r2, [r7, #100]	@ 0x64
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001f74:	4649      	mov	r1, r9
 8001f76:	008b      	lsls	r3, r1, #2
 8001f78:	4641      	mov	r1, r8
 8001f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f7e:	4641      	mov	r1, r8
 8001f80:	008a      	lsls	r2, r1, #2
 8001f82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001f86:	f7fe f97b 	bl	8000280 <__aeabi_uldivmod>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <UART_SetConfig+0x4e4>)
 8001f90:	fba3 1302 	umull	r1, r3, r3, r2
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	2164      	movs	r1, #100	@ 0x64
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	3332      	adds	r3, #50	@ 0x32
 8001fa2:	4a08      	ldr	r2, [pc, #32]	@ (8001fc4 <UART_SetConfig+0x4e4>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	f003 020f 	and.w	r2, r3, #15
 8001fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4422      	add	r2, r4
 8001fb6:	609a      	str	r2, [r3, #8]
}
 8001fb8:	bf00      	nop
 8001fba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc4:	51eb851f 	.word	0x51eb851f

08001fc8 <LL_GPIO_SetPinMode>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b08b      	sub	sp, #44	@ 0x2c
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	613b      	str	r3, [r7, #16]
  return result;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001fee:	2320      	movs	r3, #32
 8001ff0:	e003      	b.n	8001ffa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2103      	movs	r1, #3
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	401a      	ands	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	61fb      	str	r3, [r7, #28]
  return result;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800201c:	2320      	movs	r3, #32
 800201e:	e003      	b.n	8002028 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	431a      	orrs	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	601a      	str	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	372c      	adds	r7, #44	@ 0x2c
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_GPIO_SetPinOutputType>:
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	43db      	mvns	r3, r3
 8002056:	401a      	ands	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	431a      	orrs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	605a      	str	r2, [r3, #4]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_GPIO_SetPinSpeed>:
{
 8002072:	b480      	push	{r7}
 8002074:	b08b      	sub	sp, #44	@ 0x2c
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	613b      	str	r3, [r7, #16]
  return result;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002098:	2320      	movs	r3, #32
 800209a:	e003      	b.n	80020a4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2103      	movs	r1, #3
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	401a      	ands	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	61fb      	str	r3, [r7, #28]
  return result;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80020c6:	2320      	movs	r3, #32
 80020c8:	e003      	b.n	80020d2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	431a      	orrs	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	609a      	str	r2, [r3, #8]
}
 80020e0:	bf00      	nop
 80020e2:	372c      	adds	r7, #44	@ 0x2c
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_GPIO_SetPinPull>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b08b      	sub	sp, #44	@ 0x2c
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	613b      	str	r3, [r7, #16]
  return result;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e003      	b.n	800211e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2103      	movs	r1, #3
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	401a      	ands	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	61fb      	str	r3, [r7, #28]
  return result;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002140:	2320      	movs	r3, #32
 8002142:	e003      	b.n	800214c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	431a      	orrs	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	60da      	str	r2, [r3, #12]
}
 800215a:	bf00      	nop
 800215c:	372c      	adds	r7, #44	@ 0x2c
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_GPIO_SetAFPin_0_7>:
{
 8002166:	b480      	push	{r7}
 8002168:	b08b      	sub	sp, #44	@ 0x2c
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a1a      	ldr	r2, [r3, #32]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	613b      	str	r3, [r7, #16]
  return result;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800218c:	2320      	movs	r3, #32
 800218e:	e003      	b.n	8002198 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	210f      	movs	r1, #15
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	61fb      	str	r3, [r7, #28]
  return result;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80021ba:	2320      	movs	r3, #32
 80021bc:	e003      	b.n	80021c6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	431a      	orrs	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	621a      	str	r2, [r3, #32]
}
 80021d4:	bf00      	nop
 80021d6:	372c      	adds	r7, #44	@ 0x2c
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_GPIO_SetAFPin_8_15>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b08b      	sub	sp, #44	@ 0x2c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	613b      	str	r3, [r7, #16]
  return result;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e003      	b.n	8002214 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	210f      	movs	r1, #15
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	401a      	ands	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	61fb      	str	r3, [r7, #28]
  return result;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e003      	b.n	8002244 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	431a      	orrs	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002252:	bf00      	nop
 8002254:	372c      	adds	r7, #44	@ 0x2c
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b08a      	sub	sp, #40	@ 0x28
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	617b      	str	r3, [r7, #20]
  return result;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <LL_GPIO_Init+0x2e>
    return 32U;
 8002288:	2320      	movs	r3, #32
 800228a:	e003      	b.n	8002294 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002296:	e057      	b.n	8002348 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	4013      	ands	r3, r2
 80022a6:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d049      	beq.n	8002342 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d003      	beq.n	80022be <LL_GPIO_Init+0x60>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d10d      	bne.n	80022da <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	461a      	mov	r2, r3
 80022c4:	6a39      	ldr	r1, [r7, #32]
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fed3 	bl	8002072 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	461a      	mov	r2, r3
 80022d2:	6a39      	ldr	r1, [r7, #32]
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff feb4 	bl	8002042 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	461a      	mov	r2, r3
 80022e0:	6a39      	ldr	r1, [r7, #32]
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ff02 	bl	80020ec <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d121      	bne.n	8002334 <LL_GPIO_Init+0xd6>
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	60bb      	str	r3, [r7, #8]
  return result;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <LL_GPIO_Init+0xac>
    return 32U;
 8002306:	2320      	movs	r3, #32
 8002308:	e003      	b.n	8002312 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002312:	2b07      	cmp	r3, #7
 8002314:	d807      	bhi.n	8002326 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	461a      	mov	r2, r3
 800231c:	6a39      	ldr	r1, [r7, #32]
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ff21 	bl	8002166 <LL_GPIO_SetAFPin_0_7>
 8002324:	e006      	b.n	8002334 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	461a      	mov	r2, r3
 800232c:	6a39      	ldr	r1, [r7, #32]
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ff56 	bl	80021e0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	461a      	mov	r2, r3
 800233a:	6a39      	ldr	r1, [r7, #32]
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff fe43 	bl	8001fc8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	3301      	adds	r3, #1
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1a0      	bne.n	8002298 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3728      	adds	r7, #40	@ 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002368:	4a04      	ldr	r2, [pc, #16]	@ (800237c <LL_SetSystemCoreClock+0x1c>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000008 	.word	0x20000008

08002380 <LL_AHB1_GRP1_EnableClock>:
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002388:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800238a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800238c:	4907      	ldr	r1, [pc, #28]	@ (80023ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4313      	orrs	r3, r2
 8002392:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4013      	ands	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40023800 	.word	0x40023800

080023b0 <LL_CAN_GPIO_Init>:
 * @param can_type The `can_type` parameter in the `LL_CAN_GPIO_Init` function is used to determine
 * which CAN bus (CAN1 or CAN2) configuration to initialize based on the value passed to it. The
 * function configures the GPIO pins for CAN communication based on the specified CAN type.
 */
ErrorStatus LL_CAN_GPIO_Init(LL_CAN_Handler_t *hcan)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	@ 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

	ErrorStatus status = ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	611a      	str	r2, [r3, #16]
 80023ce:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	if (hcan->Instance == _CAN1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <LL_CAN_GPIO_Init+0x36>
		RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 80023d8:	4b27      	ldr	r3, [pc, #156]	@ (8002478 <LL_CAN_GPIO_Init+0xc8>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	4a26      	ldr	r2, [pc, #152]	@ (8002478 <LL_CAN_GPIO_Init+0xc8>)
 80023de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e4:	e005      	b.n	80023f2 <LL_CAN_GPIO_Init+0x42>
	else
		RCC->APB1ENR |= RCC_APB1ENR_CAN2EN;
 80023e6:	4b24      	ldr	r3, [pc, #144]	@ (8002478 <LL_CAN_GPIO_Init+0xc8>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	4a23      	ldr	r2, [pc, #140]	@ (8002478 <LL_CAN_GPIO_Init+0xc8>)
 80023ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023f0:	6413      	str	r3, [r2, #64]	@ 0x40

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80023f2:	2002      	movs	r0, #2
 80023f4:	f7ff ffc4 	bl	8002380 <LL_AHB1_GRP1_EnableClock>

	if (hcan->Instance == _CAN1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d116      	bne.n	800242e <LL_CAN_GPIO_Init+0x7e>
	{
		/**CAN1 GPIO Configuration
		PB8   ------> CAN1_RX
		PB9   ------> CAN1_TX
		*/
		GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_9;
 8002400:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002404:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002406:	2302      	movs	r3, #2
 8002408:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8002416:	2309      	movs	r3, #9
 8002418:	623b      	str	r3, [r7, #32]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	4619      	mov	r1, r3
 8002420:	4816      	ldr	r0, [pc, #88]	@ (800247c <LL_CAN_GPIO_Init+0xcc>)
 8002422:	f7ff ff1c 	bl	800225e <LL_GPIO_Init>
		status = SUCCESS;
 8002426:	2300      	movs	r3, #0
 8002428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800242c:	e01d      	b.n	800246a <LL_CAN_GPIO_Init+0xba>
	}
	else if (hcan->Instance == _CAN2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d116      	bne.n	8002464 <LL_CAN_GPIO_Init+0xb4>
	{
		/**CAN1 GPIO Configuration
		PB12   ------> CAN2_RX
		PB13   ------> CAN2_TX
		*/
		GPIO_InitStruct.Pin = LL_GPIO_PIN_12 | LL_GPIO_PIN_13;
 8002436:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800243a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800243c:	2302      	movs	r3, #2
 800243e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 800244c:	2309      	movs	r3, #9
 800244e:	623b      	str	r3, [r7, #32]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	4619      	mov	r1, r3
 8002456:	4809      	ldr	r0, [pc, #36]	@ (800247c <LL_CAN_GPIO_Init+0xcc>)
 8002458:	f7ff ff01 	bl	800225e <LL_GPIO_Init>
		status = SUCCESS;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002462:	e002      	b.n	800246a <LL_CAN_GPIO_Init+0xba>
	}

	else
		status = ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	return status;
 800246a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800246e:	4618      	mov	r0, r3
 8002470:	3728      	adds	r7, #40	@ 0x28
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40020400 	.word	0x40020400

08002480 <LL_CAN_Init>:
 *
 * @return The function `LL_CAN_Init` is returning an `ErrorStatus` enum value, which is either `ERROR`
 * or `SUCCESS`.
 */
ErrorStatus LL_CAN_Init(LL_CAN_Handler_t *hcan)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

	ErrorStatus status = ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
	uint8_t time_out = 50;
 800248c:	2332      	movs	r3, #50	@ 0x32
 800248e:	737b      	strb	r3, [r7, #13]
	uint8_t time_start = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	73bb      	strb	r3, [r7, #14]
	assert_param(hcan->Init.status.ReceiveFifoLocked);
	assert_param(hcan->Init.status.TimeTriggeredMode);
	assert_param(hcan->Init.status.TransmitFifoPriority);

	// Check CAN instance is CAN1 or CAN2
	if (hcan->Instance == _CAN1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <LL_CAN_Init+0x28>
	{
		canbase = _CAN1_REG_BASE;
 800249c:	4b91      	ldr	r3, [pc, #580]	@ (80026e4 <LL_CAN_Init+0x264>)
 800249e:	4a92      	ldr	r2, [pc, #584]	@ (80026e8 <LL_CAN_Init+0x268>)
 80024a0:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e008      	b.n	80024ba <LL_CAN_Init+0x3a>
	}
	else if (hcan->Instance == _CAN2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d104      	bne.n	80024ba <LL_CAN_Init+0x3a>
	{
		canbase = _CAN2_REG_BASE;
 80024b0:	4b8c      	ldr	r3, [pc, #560]	@ (80026e4 <LL_CAN_Init+0x264>)
 80024b2:	4a8e      	ldr	r2, [pc, #568]	@ (80026ec <LL_CAN_Init+0x26c>)
 80024b4:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
	}

	// Enter Initialization mode
	(canbase->CAN_MCR) |= (1U << INRQ);
 80024ba:	4b8a      	ldr	r3, [pc, #552]	@ (80026e4 <LL_CAN_Init+0x264>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b88      	ldr	r3, [pc, #544]	@ (80026e4 <LL_CAN_Init+0x264>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 0201 	orr.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

	// Wait until INAK bit has been set by hardware.
	while (!((canbase->CAN_MSR) & (1U << INAK)) && (time_start < time_out))
 80024ca:	e002      	b.n	80024d2 <LL_CAN_Init+0x52>
	{
		++time_start;
 80024cc:	7bbb      	ldrb	r3, [r7, #14]
 80024ce:	3301      	adds	r3, #1
 80024d0:	73bb      	strb	r3, [r7, #14]
	while (!((canbase->CAN_MSR) & (1U << INAK)) && (time_start < time_out))
 80024d2:	4b84      	ldr	r3, [pc, #528]	@ (80026e4 <LL_CAN_Init+0x264>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <LL_CAN_Init+0x68>
 80024e0:	7bba      	ldrb	r2, [r7, #14]
 80024e2:	7b7b      	ldrb	r3, [r7, #13]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d3f1      	bcc.n	80024cc <LL_CAN_Init+0x4c>
	}
	if (time_start > time_out)
 80024e8:	7bba      	ldrb	r2, [r7, #14]
 80024ea:	7b7b      	ldrb	r3, [r7, #13]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d901      	bls.n	80024f4 <LL_CAN_Init+0x74>
		return ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e156      	b.n	80027a2 <LL_CAN_Init+0x322>
	// Reset time start
	time_start = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73bb      	strb	r3, [r7, #14]

	// Exit sleep mode
	(canbase->CAN_MCR) &= ~(1U << SLEEP);
 80024f8:	4b7a      	ldr	r3, [pc, #488]	@ (80026e4 <LL_CAN_Init+0x264>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b79      	ldr	r3, [pc, #484]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0202 	bic.w	r2, r2, #2
 8002506:	601a      	str	r2, [r3, #0]

	// Wait until bit SLAK=0 of MSR register
	while (!((canbase->CAN_MSR) & (1U << SLAK)) && (time_start < time_out))
 8002508:	e002      	b.n	8002510 <LL_CAN_Init+0x90>
	{
		++time_start;
 800250a:	7bbb      	ldrb	r3, [r7, #14]
 800250c:	3301      	adds	r3, #1
 800250e:	73bb      	strb	r3, [r7, #14]
	while (!((canbase->CAN_MSR) & (1U << SLAK)) && (time_start < time_out))
 8002510:	4b74      	ldr	r3, [pc, #464]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <LL_CAN_Init+0xa6>
 800251e:	7bba      	ldrb	r2, [r7, #14]
 8002520:	7b7b      	ldrb	r3, [r7, #13]
 8002522:	429a      	cmp	r2, r3
 8002524:	d3f1      	bcc.n	800250a <LL_CAN_Init+0x8a>
	}
	if (time_start > time_out)
 8002526:	7bba      	ldrb	r2, [r7, #14]
 8002528:	7b7b      	ldrb	r3, [r7, #13]
 800252a:	429a      	cmp	r2, r3
 800252c:	d901      	bls.n	8002532 <LL_CAN_Init+0xb2>
		return ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e137      	b.n	80027a2 <LL_CAN_Init+0x322>

	// Configure CAN mode
	switch (hcan->Init.Mode)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	7d1b      	ldrb	r3, [r3, #20]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d82c      	bhi.n	8002594 <LL_CAN_Init+0x114>
 800253a:	a201      	add	r2, pc, #4	@ (adr r2, 8002540 <LL_CAN_Init+0xc0>)
 800253c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002540:	08002551 	.word	0x08002551
 8002544:	0800255f 	.word	0x0800255f
 8002548:	08002571 	.word	0x08002571
 800254c:	08002583 	.word	0x08002583
	{
	case _NORMAL_MODE:
		(canbase->CAN_BTR) |= _CAN_MODE_NORMAL;
 8002550:	4b64      	ldr	r3, [pc, #400]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b63      	ldr	r3, [pc, #396]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	69d2      	ldr	r2, [r2, #28]
 800255a:	61da      	str	r2, [r3, #28]
		break;
 800255c:	e01a      	b.n	8002594 <LL_CAN_Init+0x114>
	case _LOOPBACK_MODE:
		(canbase->CAN_BTR) |= _CAN_MODE_LOOPBACK;
 800255e:	4b61      	ldr	r3, [pc, #388]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	4b5f      	ldr	r3, [pc, #380]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800256c:	61da      	str	r2, [r3, #28]
		break;
 800256e:	e011      	b.n	8002594 <LL_CAN_Init+0x114>
	case _SILENT_MODE:
		(canbase->CAN_BTR) |= _CAN_MODE_SILENT;
 8002570:	4b5c      	ldr	r3, [pc, #368]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	4b5b      	ldr	r3, [pc, #364]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800257e:	61da      	str	r2, [r3, #28]
		break;
 8002580:	e008      	b.n	8002594 <LL_CAN_Init+0x114>
	case _SILENT_LOOPBACK_MODE:
		(canbase->CAN_BTR) |= _CAN_MODE_SILENT_LOOPBACK;
 8002582:	4b58      	ldr	r3, [pc, #352]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	4b56      	ldr	r3, [pc, #344]	@ (80026e4 <LL_CAN_Init+0x264>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8002590:	61da      	str	r2, [r3, #28]
		break;
 8002592:	bf00      	nop
	}

	// Clear bits of SJW | BRP | TS1 | TS2
	(canbase->CAN_BTR) &= 0xF0000000;
 8002594:	4b53      	ldr	r3, [pc, #332]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	4b52      	ldr	r3, [pc, #328]	@ (80026e4 <LL_CAN_Init+0x264>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80025a2:	61da      	str	r2, [r3, #28]

	switch(Calculate_APB1_clk())
 80025a4:	f000 fe9a 	bl	80032dc <Calculate_APB1_clk>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4a51      	ldr	r2, [pc, #324]	@ (80026f0 <LL_CAN_Init+0x270>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d036      	beq.n	800261e <LL_CAN_Init+0x19e>
 80025b0:	4a4f      	ldr	r2, [pc, #316]	@ (80026f0 <LL_CAN_Init+0x270>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d840      	bhi.n	8002638 <LL_CAN_Init+0x1b8>
 80025b6:	4a4f      	ldr	r2, [pc, #316]	@ (80026f4 <LL_CAN_Init+0x274>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d023      	beq.n	8002604 <LL_CAN_Init+0x184>
 80025bc:	4a4d      	ldr	r2, [pc, #308]	@ (80026f4 <LL_CAN_Init+0x274>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d83a      	bhi.n	8002638 <LL_CAN_Init+0x1b8>
 80025c2:	4a4d      	ldr	r2, [pc, #308]	@ (80026f8 <LL_CAN_Init+0x278>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d003      	beq.n	80025d0 <LL_CAN_Init+0x150>
 80025c8:	4a4c      	ldr	r2, [pc, #304]	@ (80026fc <LL_CAN_Init+0x27c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00d      	beq.n	80025ea <LL_CAN_Init+0x16a>
 80025ce:	e033      	b.n	8002638 <LL_CAN_Init+0x1b8>
	{
	case APB1_4MHZ: hcan->Init.SyncJumpWidth = _CAN_SJW_1TQ;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
					hcan->Init.Prescaler = 1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	605a      	str	r2, [r3, #4]
					hcan->Init.TimeSeg1 = _CAN_BS1_6TQ;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2205      	movs	r2, #5
 80025e0:	60da      	str	r2, [r3, #12]
					hcan->Init.TimeSeg2 = _CAN_BS2_1TQ;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
					break;
 80025e8:	e026      	b.n	8002638 <LL_CAN_Init+0x1b8>
	case APB1_8MHZ: hcan->Init.SyncJumpWidth = _CAN_SJW_1TQ;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
					hcan->Init.Prescaler = 1;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	605a      	str	r2, [r3, #4]
					hcan->Init.TimeSeg1 = _CAN_BS1_13TQ;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	220c      	movs	r2, #12
 80025fa:	60da      	str	r2, [r3, #12]
					hcan->Init.TimeSeg2 = _CAN_BS2_2TQ;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	611a      	str	r2, [r3, #16]
					break;
 8002602:	e019      	b.n	8002638 <LL_CAN_Init+0x1b8>
	case APB1_12MHZ: hcan->Init.SyncJumpWidth = _CAN_SJW_1TQ;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
					 hcan->Init.Prescaler = 2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	605a      	str	r2, [r3, #4]
					 hcan->Init.TimeSeg1 = _CAN_BS1_10TQ;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2209      	movs	r2, #9
 8002614:	60da      	str	r2, [r3, #12]
					 hcan->Init.TimeSeg2 = _CAN_BS2_1TQ;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
					 break;
 800261c:	e00c      	b.n	8002638 <LL_CAN_Init+0x1b8>
	case APB1_24MHZ: hcan->Init.SyncJumpWidth = _CAN_SJW_1TQ;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
					 hcan->Init.Prescaler = 3;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2203      	movs	r2, #3
 8002628:	605a      	str	r2, [r3, #4]
					 hcan->Init.TimeSeg1 = _CAN_BS1_13TQ;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	220c      	movs	r2, #12
 800262e:	60da      	str	r2, [r3, #12]
					 hcan->Init.TimeSeg2 = _CAN_BS2_2TQ;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	611a      	str	r2, [r3, #16]
					 break;
 8002636:	bf00      	nop
	}
	// Can baudrate calculation bases on F_APB1=24Mhz, SJW | BRP | TS1 | TS2
	(canbase->CAN_BTR) |= (((hcan->Init.SyncJumpWidth) << SJW) | (((hcan->Init.Prescaler) - 1) << BRP) | ((hcan->Init.TimeSeg1) << TS1) | ((hcan->Init.TimeSeg2) << TS2));
 8002638:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <LL_CAN_Init+0x264>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69d9      	ldr	r1, [r3, #28]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	061a      	lsls	r2, r3, #24
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	3b01      	subs	r3, #1
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	041b      	lsls	r3, r3, #16
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	051b      	lsls	r3, r3, #20
 800265a:	431a      	orrs	r2, r3
 800265c:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <LL_CAN_Init+0x264>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	61da      	str	r2, [r3, #28]

	// Can Autowakeup, default value of bit AWUM=0
	if (hcan->Init.status.AutoWakeUp == ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	7d5b      	ldrb	r3, [r3, #21]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <LL_CAN_Init+0x204>
		(canbase->CAN_MCR) |= (1U << AWUM);
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <LL_CAN_Init+0x264>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0220 	orr.w	r2, r2, #32
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e007      	b.n	8002694 <LL_CAN_Init+0x214>
	else
		(canbase->CAN_MCR) &= ~(1U << AWUM);
 8002684:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <LL_CAN_Init+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <LL_CAN_Init+0x264>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0220 	bic.w	r2, r2, #32
 8002692:	601a      	str	r2, [r3, #0]

	// Can No Autorestranmission, default value of bit NART=0
	if (hcan->Init.status.AutoRetransmission == DISABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7d5b      	ldrb	r3, [r3, #21]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <LL_CAN_Init+0x234>
		(canbase->CAN_MCR) |= (1U << NART);
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <LL_CAN_Init+0x264>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <LL_CAN_Init+0x264>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0210 	orr.w	r2, r2, #16
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e007      	b.n	80026c4 <LL_CAN_Init+0x244>
	else
		(canbase->CAN_MCR) &= ~(1U << NART);
 80026b4:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <LL_CAN_Init+0x264>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <LL_CAN_Init+0x264>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0210 	bic.w	r2, r2, #16
 80026c2:	601a      	str	r2, [r3, #0]

	// Can ReceiveFifoLocked, default value of bit RFLM=0
	if (hcan->Init.status.ReceiveFifoLocked == ENABLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7d5b      	ldrb	r3, [r3, #21]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <LL_CAN_Init+0x280>
		(canbase->CAN_MCR) |= (1U << RFLM);
 80026d2:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <LL_CAN_Init+0x264>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b02      	ldr	r3, [pc, #8]	@ (80026e4 <LL_CAN_Init+0x264>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0208 	orr.w	r2, r2, #8
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e015      	b.n	8002710 <LL_CAN_Init+0x290>
 80026e4:	2000019c 	.word	0x2000019c
 80026e8:	40006400 	.word	0x40006400
 80026ec:	40006800 	.word	0x40006800
 80026f0:	016e3600 	.word	0x016e3600
 80026f4:	00b71b00 	.word	0x00b71b00
 80026f8:	003d0900 	.word	0x003d0900
 80026fc:	007a1200 	.word	0x007a1200
	else
		(canbase->CAN_MCR) &= ~(1U << RFLM);
 8002700:	4b2a      	ldr	r3, [pc, #168]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b29      	ldr	r3, [pc, #164]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0208 	bic.w	r2, r2, #8
 800270e:	601a      	str	r2, [r3, #0]

	// Can Time trigger mode, default value of bit TTCM=0
	if (hcan->Init.status.TimeTriggeredMode == ENABLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7d5b      	ldrb	r3, [r3, #21]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <LL_CAN_Init+0x2b0>
		(canbase->CAN_MCR) |= (1U << TTCM);
 800271e:	4b23      	ldr	r3, [pc, #140]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b21      	ldr	r3, [pc, #132]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	e007      	b.n	8002740 <LL_CAN_Init+0x2c0>
	else
		(canbase->CAN_MCR) &= ~(1U << TTCM);
 8002730:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800273e:	601a      	str	r2, [r3, #0]

	// Can TransmitFifoPriority, default value of bit TXFP=0
	if (hcan->Init.status.TransmitFifoPriority == ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7d5b      	ldrb	r3, [r3, #21]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <LL_CAN_Init+0x2e0>
		(canbase->CAN_MCR) |= (1U << TXFP);
 800274e:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0204 	orr.w	r2, r2, #4
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e007      	b.n	8002770 <LL_CAN_Init+0x2f0>
	else
		(canbase->CAN_MCR) &= ~(1U << TXFP);
 8002760:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0204 	bic.w	r2, r2, #4
 800276e:	601a      	str	r2, [r3, #0]

	// Can AutoBusOff, default value of bit ABOM=0
	if (hcan->Init.status.AutoBusOff == ENABLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7d5b      	ldrb	r3, [r3, #21]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <LL_CAN_Init+0x310>
		canbase->CAN_MCR |= (1U << ABOM);
 800277e:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e007      	b.n	80027a0 <LL_CAN_Init+0x320>
	else
		(canbase->CAN_MCR) &= ~(1U << ABOM);
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <LL_CAN_Init+0x32c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800279e:	601a      	str	r2, [r3, #0]

	return status;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000019c 	.word	0x2000019c

080027b0 <LL_CAN_ConfigFilter>:
 * @return The function `ErrorStatus LL_CAN_ConfigFilter(LL_CAN_Handler_t *hcan, LL_CAN_FilterTypeDef_t
 * *hfilter)` is returning the status of the configuration process, which is either `SUCCESS` or
 * `ERROR`.
 */
ErrorStatus LL_CAN_ConfigFilter(LL_CAN_Handler_t *hcan, LL_CAN_FilterTypeDef_t *hfilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
	ErrorStatus status = ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
	uint32_t filter_bank_pos;
	// Check CAN`s instance is CAN1 or CAN2
	status = SUCCESS;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
	if (hcan->Instance == _CAN1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d105      	bne.n	80027d6 <LL_CAN_ConfigFilter+0x26>
	{
		canbase = _CAN1_REG_BASE;
 80027ca:	4b7c      	ldr	r3, [pc, #496]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 80027cc:	4a7c      	ldr	r2, [pc, #496]	@ (80029c0 <LL_CAN_ConfigFilter+0x210>)
 80027ce:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
 80027d4:	e004      	b.n	80027e0 <LL_CAN_ConfigFilter+0x30>
	}
	else
	{
		canbase = _CAN2_REG_BASE;
 80027d6:	4b79      	ldr	r3, [pc, #484]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 80027d8:	4a7a      	ldr	r2, [pc, #488]	@ (80029c4 <LL_CAN_ConfigFilter+0x214>)
 80027da:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
	assert_param(hfilter->SlaveStartFilterBank);

	// Don`t have SlaveStartFilterBank configuration

	// Init filter mode
	(canbase->CAN_FMR) |= (1U << FINIT);
 80027e0:	4b76      	ldr	r3, [pc, #472]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80027e8:	4b74      	ldr	r3, [pc, #464]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	// Select the start filter number of CAN2 slave instance
	if (hcan->Instance == _CAN1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d115      	bne.n	8002828 <LL_CAN_ConfigFilter+0x78>
	{
		(canbase->CAN_FMR) &= ~(1U << CAN2SB);
 80027fc:	4b6f      	ldr	r3, [pc, #444]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002804:	4b6d      	ldr	r3, [pc, #436]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800280c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
		(canbase->CAN_FMR) |= ((hfilter->SlaveStartFilterBank) << CAN2SB);
 8002810:	4b6a      	ldr	r3, [pc, #424]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	4b67      	ldr	r3, [pc, #412]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	}

	// Convert filter bank number into bit position
	filter_bank_pos = (1U << ((hfilter->FilterBank) & 0x1FU));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2201      	movs	r2, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	60bb      	str	r3, [r7, #8]

	// Filter deactivation
	(canbase->CAN_FA1R) &= ~(filter_bank_pos);
 8002838:	4b60      	ldr	r3, [pc, #384]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8d3 121c 	ldr.w	r1, [r3, #540]	@ 0x21c
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	43da      	mvns	r2, r3
 8002844:	4b5d      	ldr	r3, [pc, #372]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	400a      	ands	r2, r1
 800284a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	// Config filter scale
	if (hfilter->FilterScale == _CAN_FILTERSCALE_16BIT)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d127      	bne.n	80028a6 <LL_CAN_ConfigFilter+0xf6>
	{
		(canbase->CAN_FS1R) &= ~(filter_bank_pos);
 8002856:	4b59      	ldr	r3, [pc, #356]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8d3 120c 	ldr.w	r1, [r3, #524]	@ 0x20c
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	43da      	mvns	r2, r3
 8002862:	4b56      	ldr	r3, [pc, #344]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	400a      	ands	r2, r1
 8002868:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

		// First 16-bit identifier and First 16-bit mask
		// Or First 16-bit identifier and Second 16-bit identifier
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdLow) << 16U) |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0418      	lsls	r0, r3, #16
			(0x0000FFFFU & (uint32_t)hfilter->FilterIdLow);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	b299      	uxth	r1, r3
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
 8002878:	4b50      	ldr	r3, [pc, #320]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6952      	ldr	r2, [r2, #20]
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdLow) << 16U) |
 8002880:	4301      	orrs	r1, r0
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
 8002882:	3248      	adds	r2, #72	@ 0x48
 8002884:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

		// Second 16-bit identifier and Second 16-bit mask */
		//  Or Third 16-bit identifier and Fourth 16-bit identifier */
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdHigh) << 16U) |
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	0418      	lsls	r0, r3, #16
			(0x0000FFFFU & (uint32_t)hfilter->FilterIdHigh);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	b29a      	uxth	r2, r3
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
 8002894:	4b49      	ldr	r3, [pc, #292]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002896:	6819      	ldr	r1, [r3, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdHigh) << 16U) |
 800289c:	4302      	orrs	r2, r0
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
 800289e:	3348      	adds	r3, #72	@ 0x48
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	605a      	str	r2, [r3, #4]
	}
	if (hfilter->FilterScale == _CAN_FILTERSCALE_32BIT)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d126      	bne.n	80028fc <LL_CAN_ConfigFilter+0x14c>
	{
		(canbase->CAN_FS1R) |= (filter_bank_pos);
 80028ae:	4b43      	ldr	r3, [pc, #268]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8d3 120c 	ldr.w	r1, [r3, #524]	@ 0x20c
 80028b6:	4b41      	ldr	r3, [pc, #260]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	430a      	orrs	r2, r1
 80028be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

		// 32-bit identifier or First 32-bit identifier
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
			((0x0000FFFFU & (uint32_t)hfilter->FilterIdHigh) << 16U) |
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	0418      	lsls	r0, r3, #16
			(0x0000FFFFU & (uint32_t)hfilter->FilterIdLow);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	b299      	uxth	r1, r3
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
 80028ce:	4b3b      	ldr	r3, [pc, #236]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	6952      	ldr	r2, [r2, #20]
			((0x0000FFFFU & (uint32_t)hfilter->FilterIdHigh) << 16U) |
 80028d6:	4301      	orrs	r1, r0
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR1) =
 80028d8:	3248      	adds	r2, #72	@ 0x48
 80028da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

		// 32-bit mask or Second 32-bit identifier
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdHigh) << 16U) |
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0418      	lsls	r0, r3, #16
			(0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdLow);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	b29a      	uxth	r2, r3
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
 80028ea:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
			((0x0000FFFFU & (uint32_t)hfilter->FilterMaskIdHigh) << 16U) |
 80028f2:	4302      	orrs	r2, r0
		(canbase->CAN_sFilterRegister[hfilter->FilterBank].FR2) =
 80028f4:	3348      	adds	r3, #72	@ 0x48
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	605a      	str	r2, [r3, #4]
	}

	// Config filter mode
	if (hfilter->FilterMode == _CAN_FILTERMODE_IDMASK)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <LL_CAN_ConfigFilter+0x16c>
	{
		(canbase->CAN_FM1R) &= ~(filter_bank_pos);
 8002904:	4b2d      	ldr	r3, [pc, #180]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	43da      	mvns	r2, r3
 8002910:	4b2a      	ldr	r3, [pc, #168]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	400a      	ands	r2, r1
 8002916:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800291a:	e009      	b.n	8002930 <LL_CAN_ConfigFilter+0x180>
	}
	else
	{
		(canbase->CAN_FM1R) |= (filter_bank_pos);
 800291c:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 8002924:	4b25      	ldr	r3, [pc, #148]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	430a      	orrs	r2, r1
 800292c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	}
	// Config filter FIFO assignment (FIFO0 or FIFO1)
	if (hfilter->FilterFIFOAssignment == _CAN_FILTER_FIFO0)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10b      	bne.n	8002950 <LL_CAN_ConfigFilter+0x1a0>
	{
		(canbase->CAN_FFA1R) &= ~(filter_bank_pos);
 8002938:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	43da      	mvns	r2, r3
 8002944:	4b1d      	ldr	r3, [pc, #116]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	400a      	ands	r2, r1
 800294a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800294e:	e009      	b.n	8002964 <LL_CAN_ConfigFilter+0x1b4>
	}
	else
	{
		(canbase->CAN_FFA1R) |= (filter_bank_pos);
 8002950:	4b1a      	ldr	r3, [pc, #104]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 8002958:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	430a      	orrs	r2, r1
 8002960:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	}

	// Filter activation
	if (hfilter->FilterActivation == _CAN_FILTER_ENABLE)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d10a      	bne.n	8002982 <LL_CAN_ConfigFilter+0x1d2>
	{
		(canbase->CAN_FA1R) |= (filter_bank_pos);
 800296c:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8d3 121c 	ldr.w	r1, [r3, #540]	@ 0x21c
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	430a      	orrs	r2, r1
 800297c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 8002980:	e00a      	b.n	8002998 <LL_CAN_ConfigFilter+0x1e8>
	}
	else
	{
		(canbase->CAN_FA1R) &= ~(filter_bank_pos);
 8002982:	4b0e      	ldr	r3, [pc, #56]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f8d3 121c 	ldr.w	r1, [r3, #540]	@ 0x21c
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	43da      	mvns	r2, r3
 800298e:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	400a      	ands	r2, r1
 8002994:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	}

	// Leave the initialisation mode for the filter
	(canbase->CAN_FMR) &= ~(1U << FINIT);
 8002998:	4b08      	ldr	r3, [pc, #32]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80029a0:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <LL_CAN_ConfigFilter+0x20c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	return status;
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	2000019c 	.word	0x2000019c
 80029c0:	40006400 	.word	0x40006400
 80029c4:	40006800 	.word	0x40006800

080029c8 <LL_CAN_Start>:
 *
 * @return The function LL_CAN_Start is returning an ErrorStatus enum value, which can be either
 * SUCCESS or ERROR.
 */
ErrorStatus LL_CAN_Start(LL_CAN_Handler_t *hcan)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	ErrorStatus status = ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
	uint8_t time_out = 50;
 80029d4:	2332      	movs	r3, #50	@ 0x32
 80029d6:	737b      	strb	r3, [r7, #13]
	uint8_t time_start = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	73bb      	strb	r3, [r7, #14]
	if (hcan->Instance == _CAN1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <LL_CAN_Start+0x28>
	{
		canbase = _CAN1_REG_BASE;
 80029e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a50 <LL_CAN_Start+0x88>)
 80029e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a54 <LL_CAN_Start+0x8c>)
 80029e8:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]
 80029ee:	e008      	b.n	8002a02 <LL_CAN_Start+0x3a>
	}
	else if (hcan->Instance == _CAN2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d104      	bne.n	8002a02 <LL_CAN_Start+0x3a>
	{
		canbase = _CAN2_REG_BASE;
 80029f8:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <LL_CAN_Start+0x88>)
 80029fa:	4a17      	ldr	r2, [pc, #92]	@ (8002a58 <LL_CAN_Start+0x90>)
 80029fc:	601a      	str	r2, [r3, #0]
		status = SUCCESS;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
	}

	// Leave Initialization mode
	(canbase->CAN_MCR) &= ~(1U << INRQ);
 8002a02:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <LL_CAN_Start+0x88>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <LL_CAN_Start+0x88>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
	// Wait until INAK bit has been cleared by hardware.
	while (((canbase->CAN_MSR) & (1U << INAK)) && (time_start < time_out))
 8002a12:	e002      	b.n	8002a1a <LL_CAN_Start+0x52>
	{
		++time_start;
 8002a14:	7bbb      	ldrb	r3, [r7, #14]
 8002a16:	3301      	adds	r3, #1
 8002a18:	73bb      	strb	r3, [r7, #14]
	while (((canbase->CAN_MSR) & (1U << INAK)) && (time_start < time_out))
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <LL_CAN_Start+0x88>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <LL_CAN_Start+0x68>
 8002a28:	7bba      	ldrb	r2, [r7, #14]
 8002a2a:	7b7b      	ldrb	r3, [r7, #13]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d3f1      	bcc.n	8002a14 <LL_CAN_Start+0x4c>
	}
	if (time_start > time_out)
 8002a30:	7bba      	ldrb	r2, [r7, #14]
 8002a32:	7b7b      	ldrb	r3, [r7, #13]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d902      	bls.n	8002a3e <LL_CAN_Start+0x76>
		status = ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e001      	b.n	8002a42 <LL_CAN_Start+0x7a>
	else
		status = SUCCESS;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
	return status;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	2000019c 	.word	0x2000019c
 8002a54:	40006400 	.word	0x40006400
 8002a58:	40006800 	.word	0x40006800

08002a5c <LL_CAN_AddTxMessage>:
 *
 * @return The function `ErrorStatus LL_CAN_AddTxMessage` is returning the status of the operation,
 * which can be either `SUCCESS` or `ERROR`.
 */
ErrorStatus LL_CAN_AddTxMessage(LL_CAN_Handler_t *hcan, const uint8_t data[], LL_CAN_TxHeaderTypeDef_t *htxheader, uint32_t *TxMailBox)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
	ErrorStatus status = ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75fb      	strb	r3, [r7, #23]
	else
	{
		assert_param(htxheader->ExtId);
	}
	// Check CAN`s instance is CAN1 or CAN2
	if (hcan->Instance == _CAN1)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d103      	bne.n	8002a7e <LL_CAN_AddTxMessage+0x22>
	{
		canbase = _CAN1_REG_BASE;
 8002a76:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <LL_CAN_AddTxMessage+0x70>)
 8002a78:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <LL_CAN_AddTxMessage+0x74>)
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e002      	b.n	8002a84 <LL_CAN_AddTxMessage+0x28>
	}
	else
	{
		canbase = _CAN2_REG_BASE;
 8002a7e:	4b13      	ldr	r3, [pc, #76]	@ (8002acc <LL_CAN_AddTxMessage+0x70>)
 8002a80:	4a14      	ldr	r2, [pc, #80]	@ (8002ad4 <LL_CAN_AddTxMessage+0x78>)
 8002a82:	601a      	str	r2, [r3, #0]
	}

	// Check if any mailbox is empty
	if (((canbase->CAN_TSR) & (1U << TME0)) || ((canbase->CAN_TSR) & (1U << TME1)) || ((canbase->CAN_TSR) & (1U << TME2)))
 8002a84:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <LL_CAN_AddTxMessage+0x70>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <LL_CAN_AddTxMessage+0x52>
 8002a92:	4b0e      	ldr	r3, [pc, #56]	@ (8002acc <LL_CAN_AddTxMessage+0x70>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <LL_CAN_AddTxMessage+0x52>
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <LL_CAN_AddTxMessage+0x70>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <LL_CAN_AddTxMessage+0x64>
	{
		Trans(canbase, data, htxheader, TxMailBox);
 8002aae:	4b07      	ldr	r3, [pc, #28]	@ (8002acc <LL_CAN_AddTxMessage+0x70>)
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	f000 f80e 	bl	8002ad8 <Trans>
		status = SUCCESS;
 8002abc:	2300      	movs	r3, #0
 8002abe:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	2000019c 	.word	0x2000019c
 8002ad0:	40006400 	.word	0x40006400
 8002ad4:	40006800 	.word	0x40006800

08002ad8 <Trans>:
 * transmission, such as the message ID, data length, RTR bit, IDE bit, Transmit Global Time flag, etc.
 * @param TxMailBox The `TxMailBox` parameter is a pointer to a `uint32_t` variable where the function
 * will store the selected transmit mailbox for sending the CAN message.
 */
static void Trans(CAN_TypeDef_t *canbase, const uint8_t data[], LL_CAN_TxHeaderTypeDef_t *htxheader, uint32_t *TxMailBox)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]

	uint32_t transmitmailbox;

	// Select an empty transmit mailbox
	transmitmailbox = (((canbase->CAN_TSR) >> CODE) & 0x03);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	0e1b      	lsrs	r3, r3, #24
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	617b      	str	r3, [r7, #20]
	*TxMailBox = transmitmailbox;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	601a      	str	r2, [r3, #0]
	// Set up the ID
	if (htxheader->_IDE == _CAN_ID_STD)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <Trans+0x44>
	{
		(canbase->sTxMailBox[transmitmailbox].TIR) = ((htxheader->StdId) << STID) | ((htxheader->_RTR) << RTR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	055a      	lsls	r2, r3, #21
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3318      	adds	r3, #24
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	440b      	add	r3, r1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e010      	b.n	8002b3e <Trans+0x66>
	}
	else
	{
		(canbase->sTxMailBox[transmitmailbox].TIR) = (((htxheader->ExtId) << EXID) | ((htxheader->_RTR) << RTR) | ((htxheader->_IDE) << IDE));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	00da      	lsls	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68f9      	ldr	r1, [r7, #12]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3318      	adds	r3, #24
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	440b      	add	r3, r1
 8002b3c:	601a      	str	r2, [r3, #0]
	}

	// Set up the DLC
	(canbase->sTxMailBox[transmitmailbox].TDTR) = ((htxheader->_DLC) << DLC);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	68f9      	ldr	r1, [r7, #12]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3318      	adds	r3, #24
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	601a      	str	r2, [r3, #0]
	// Set up the Transmit Global Time mode
	if (htxheader->TransmitGlobalTime == ENABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7d1b      	ldrb	r3, [r3, #20]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d111      	bne.n	8002b7c <Trans+0xa4>
	{
		canbase->sTxMailBox[transmitmailbox].TDTR |= ((htxheader->TransmitGlobalTime) << TGT);
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3318      	adds	r3, #24
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4413      	add	r3, r2
 8002b62:	3304      	adds	r3, #4
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7d1b      	ldrb	r3, [r3, #20]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68f9      	ldr	r1, [r7, #12]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3318      	adds	r3, #24
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	440b      	add	r3, r1
 8002b78:	3304      	adds	r3, #4
 8002b7a:	601a      	str	r2, [r3, #0]
	}

	// Set up data
	(canbase->sTxMailBox[transmitmailbox].TDHR) = (((uint32_t)data[7] << CAN_TDHR_DATA7_Pos) | ((uint32_t)data[6] << CAN_TDHR_DATA6_Pos) | ((uint32_t)data[5] << CAN_TDHR_DATA5_Pos) | ((uint32_t)data[4] << CAN_TDHR_DATA4_Pos));
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	3307      	adds	r3, #7
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	061a      	lsls	r2, r3, #24
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	3306      	adds	r3, #6
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3305      	adds	r3, #5
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	4313      	orrs	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	3204      	adds	r2, #4
 8002b9c:	7812      	ldrb	r2, [r2, #0]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	68f9      	ldr	r1, [r7, #12]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002bac:	601a      	str	r2, [r3, #0]
	(canbase->sTxMailBox[transmitmailbox].TDLR) = ((uint32_t)(data[3] << CAN_TDLR_DATA3_Pos) | ((uint32_t)data[2] << CAN_TDLR_DATA2_Pos) | ((uint32_t)data[1] << CAN_TDLR_DATA1_Pos) | ((uint32_t)data[0] << CAN_TDLR_DATA0_Pos));
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3303      	adds	r3, #3
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	061a      	lsls	r2, r3, #24
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3302      	adds	r3, #2
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	7812      	ldrb	r2, [r2, #0]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	68f9      	ldr	r1, [r7, #12]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002bdc:	601a      	str	r2, [r3, #0]

	// Request transmission by enable bit TXRQ
	(canbase->sTxMailBox[transmitmailbox].TIR) |= (1UL << TXRQ);
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3318      	adds	r3, #24
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	4413      	add	r3, r2
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3318      	adds	r3, #24
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	440b      	add	r3, r1
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <LL_CAN_GetRxMessage>:
 * @return either SUCCESS or ERROR based on the conditions checked within the function. If the Rx FIFO
 * is empty or if there is a parameter error, the function will return ERROR. Otherwise, it will return
 * SUCCESS after successfully retrieving the CAN message data.
 */
ErrorStatus LL_CAN_GetRxMessage(LL_CAN_Handler_t *hcan, LL_CAN_RxHeaderTypeDef_t *hrxheader, uint8_t rxdata[], uint32_t RxFifo)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
	// Check the parameters
	assert_param(rxdata);
	assert_param(RxFifo);

	if (hcan->Instance == _CAN1)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d103      	bne.n	8002c26 <LL_CAN_GetRxMessage+0x1e>
	{
		canbase = _CAN1_REG_BASE;
 8002c1e:	4b88      	ldr	r3, [pc, #544]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002c20:	4a88      	ldr	r2, [pc, #544]	@ (8002e44 <LL_CAN_GetRxMessage+0x23c>)
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e002      	b.n	8002c2c <LL_CAN_GetRxMessage+0x24>
	}
	else
	{
		canbase = _CAN2_REG_BASE;
 8002c26:	4b86      	ldr	r3, [pc, #536]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002c28:	4a87      	ldr	r2, [pc, #540]	@ (8002e48 <LL_CAN_GetRxMessage+0x240>)
 8002c2a:	601a      	str	r2, [r3, #0]
	}

	/* Check the Rx FIFO */
	if (RxFifo == _CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10e      	bne.n	8002c50 <LL_CAN_GetRxMessage+0x48>
	{
		/* Check that the Rx FIFO 0 is not empty */
		if (((canbase->CAN_RF0R) & (1 << FMP0)) == 0U)
 8002c32:	4b83      	ldr	r3, [pc, #524]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d116      	bne.n	8002c6e <LL_CAN_GetRxMessage+0x66>
		{
			/* Update error code */
			hcan->ErrorCode |= LL_CAN_ERROR_PARAM;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	619a      	str	r2, [r3, #24]

			return ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0f1      	b.n	8002e34 <LL_CAN_GetRxMessage+0x22c>
		}
	}
	else /* Rx element is assigned to Rx FIFO 1 */
	{
		/* Check that the Rx FIFO 1 is not empty */
		if (((canbase->CAN_RF1R) & (1 << FMP1)) == 0U)
 8002c50:	4b7b      	ldr	r3, [pc, #492]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d107      	bne.n	8002c6e <LL_CAN_GetRxMessage+0x66>
		{
			/* Update error code */
			hcan->ErrorCode |= LL_CAN_ERROR_PARAM;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	619a      	str	r2, [r3, #24]

			return ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e0e2      	b.n	8002e34 <LL_CAN_GetRxMessage+0x22c>
		}
	}

	// Get ID
	hrxheader->_IDE = (((1U << IDE_rx) & (canbase->sFIFOMailBox[RxFifo].RIR)) >> IDE_rx);
 8002c6e:	4b74      	ldr	r3, [pc, #464]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	331b      	adds	r3, #27
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4413      	add	r3, r2
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	f003 0201 	and.w	r2, r3, #1
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	609a      	str	r2, [r3, #8]
	if (hrxheader->_IDE == _CAN_ID_STD)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10c      	bne.n	8002ca8 <LL_CAN_GetRxMessage+0xa0>
	{
		hrxheader->StdId = (((0x7FF << STID_rx) & (canbase->sFIFOMailBox[RxFifo].RIR)) >> STID_rx);
 8002c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	331b      	adds	r3, #27
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	4413      	add	r3, r2
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0d5b      	lsrs	r3, r3, #21
 8002c9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e00b      	b.n	8002cc0 <LL_CAN_GetRxMessage+0xb8>
	}
	else
	{
		hrxheader->ExtId = (((0x1FFFFFFF << EXID_rx) & (canbase->sFIFOMailBox[RxFifo].RIR)) >> EXID);
 8002ca8:	4b65      	ldr	r3, [pc, #404]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	331b      	adds	r3, #27
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	4413      	add	r3, r2
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	08db      	lsrs	r3, r3, #3
 8002cb8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	605a      	str	r2, [r3, #4]
	}

	// Get Remote transmission request
	hrxheader->_RTR = (((1U << RTR_rx) & (canbase->sFIFOMailBox[RxFifo].RIR)) >> RTR_rx);
 8002cc0:	4b5f      	ldr	r3, [pc, #380]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	331b      	adds	r3, #27
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	4413      	add	r3, r2
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	f003 0201 	and.w	r2, r3, #1
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
	if ((((0xF << DLC_rx) & (canbase->sFIFOMailBox[RxFifo].RDTR)) >> DLC_rx) >= 8U)
 8002cd8:	4b59      	ldr	r3, [pc, #356]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	331b      	adds	r3, #27
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <LL_CAN_GetRxMessage+0xf0>
	{
		/* Truncate DLC to 8 if received field is over range */
		hrxheader->_DLC = 8U;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	611a      	str	r2, [r3, #16]
 8002cf6:	e00b      	b.n	8002d10 <LL_CAN_GetRxMessage+0x108>
	}
	else
	{
		hrxheader->_DLC = (((0xF << DLC_rx) & (canbase->sFIFOMailBox[RxFifo].RDTR)) >> DLC_rx);
 8002cf8:	4b51      	ldr	r3, [pc, #324]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	331b      	adds	r3, #27
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	4413      	add	r3, r2
 8002d04:	3304      	adds	r3, #4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 020f 	and.w	r2, r3, #15
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	611a      	str	r2, [r3, #16]
	}

	hrxheader->FilterMatchIndex = (((0xFF << FMI_rx) & (canbase->sFIFOMailBox[RxFifo].RDTR)) >> FMI_rx);
 8002d10:	4b4b      	ldr	r3, [pc, #300]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	331b      	adds	r3, #27
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	619a      	str	r2, [r3, #24]
	hrxheader->Timestamp = (((0xFFFF << TIME_rx) & (canbase->sFIFOMailBox[RxFifo].RDTR)) >> TIME_rx);
 8002d28:	4b45      	ldr	r3, [pc, #276]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	331b      	adds	r3, #27
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	4413      	add	r3, r2
 8002d34:	3304      	adds	r3, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	615a      	str	r2, [r3, #20]

	/* Get the data */
	rxdata[0] = (uint8_t)(((0XFF << CAN_RDLR_DATA0_Pos) & (canbase->sFIFOMailBox[RxFifo].RDLR)) >> CAN_RDLR_DATA0_Pos);
 8002d40:	4b3f      	ldr	r3, [pc, #252]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	701a      	strb	r2, [r3, #0]
	rxdata[1] = (uint8_t)(((0XFF << CAN_RDLR_DATA1_Pos) & (canbase->sFIFOMailBox[RxFifo].RDLR)) >> CAN_RDLR_DATA1_Pos);
 8002d56:	4b3a      	ldr	r3, [pc, #232]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0a1a      	lsrs	r2, r3, #8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]
	rxdata[2] = (uint8_t)(((0XFF << CAN_RDLR_DATA2_Pos) & (canbase->sFIFOMailBox[RxFifo].RDLR)) >> CAN_RDLR_DATA2_Pos);
 8002d70:	4b33      	ldr	r3, [pc, #204]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0c1a      	lsrs	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3302      	adds	r3, #2
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]
	rxdata[3] = (uint8_t)(((0XFF << CAN_RDLR_DATA3_Pos) & (canbase->sFIFOMailBox[RxFifo].RDLR)) >> CAN_RDLR_DATA3_Pos);
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e1a      	lsrs	r2, r3, #24
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3303      	adds	r3, #3
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]
	rxdata[4] = (uint8_t)(((0XFF << CAN_RDHR_DATA4_Pos) & (canbase->sFIFOMailBox[RxFifo].RDHR)) >> CAN_RDHR_DATA4_Pos);
 8002da4:	4b26      	ldr	r3, [pc, #152]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	701a      	strb	r2, [r3, #0]
	rxdata[5] = (uint8_t)(((0XFF << CAN_RDHR_DATA5_Pos) & (canbase->sFIFOMailBox[RxFifo].RDHR)) >> CAN_RDHR_DATA5_Pos);
 8002dbc:	4b20      	ldr	r3, [pc, #128]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0a1a      	lsrs	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3305      	adds	r3, #5
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]
	rxdata[6] = (uint8_t)(((0XFF << CAN_RDHR_DATA6_Pos) & (canbase->sFIFOMailBox[RxFifo].RDHR)) >> CAN_RDHR_DATA6_Pos);
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0c1a      	lsrs	r2, r3, #16
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3306      	adds	r3, #6
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]
	rxdata[7] = (uint8_t)(((0XFF << CAN_RDHR_DATA7_Pos) & (canbase->sFIFOMailBox[RxFifo].RDHR)) >> CAN_RDHR_DATA7_Pos);
 8002df0:	4b13      	ldr	r3, [pc, #76]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e1a      	lsrs	r2, r3, #24
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3307      	adds	r3, #7
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

	/* Release the FIFO */
	if (RxFifo == _CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d108      	bne.n	8002e22 <LL_CAN_GetRxMessage+0x21a>
	{
		/* Release RX FIFO 0 */
		(canbase->CAN_RF0R) |= (1U << RFOM0);
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0220 	orr.w	r2, r2, #32
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	e007      	b.n	8002e32 <LL_CAN_GetRxMessage+0x22a>
	}
	else /* Rx element is assigned to Rx FIFO 1 */
	{
		/* Release RX FIFO 1 */
		(canbase->CAN_RF1R) |= (1U << RFOM1);
 8002e22:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	4b05      	ldr	r3, [pc, #20]	@ (8002e40 <LL_CAN_GetRxMessage+0x238>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0220 	orr.w	r2, r2, #32
 8002e30:	611a      	str	r2, [r3, #16]
	}

	return SUCCESS;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	2000019c 	.word	0x2000019c
 8002e44:	40006400 	.word	0x40006400
 8002e48:	40006800 	.word	0x40006800

08002e4c <LL_CAN_ActivateInterrupt>:
 * specify which interrupts should be enabled. It is a bitmask where each bit corresponds to a specific
 * interrupt source. By ORing the `ActiveITs` bitmask with the `CAN_IER` register,
 */

void LL_CAN_ActivateInterrupt(LL_CAN_Handler_t *hcan, uint32_t ActiveITs)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
	if (hcan->Instance == _CAN1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <LL_CAN_ActivateInterrupt+0x1a>
	{
		canbase = _CAN1_REG_BASE;
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <LL_CAN_ActivateInterrupt+0x3c>)
 8002e60:	4a0a      	ldr	r2, [pc, #40]	@ (8002e8c <LL_CAN_ActivateInterrupt+0x40>)
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e002      	b.n	8002e6c <LL_CAN_ActivateInterrupt+0x20>
	}
	else
	{
		canbase = _CAN2_REG_BASE;
 8002e66:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <LL_CAN_ActivateInterrupt+0x3c>)
 8002e68:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <LL_CAN_ActivateInterrupt+0x44>)
 8002e6a:	601a      	str	r2, [r3, #0]
	}
	/* Enable the selected interrupts */
	(canbase->CAN_IER) |= (ActiveITs);
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <LL_CAN_ActivateInterrupt+0x3c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6959      	ldr	r1, [r3, #20]
 8002e72:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <LL_CAN_ActivateInterrupt+0x3c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	615a      	str	r2, [r3, #20]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	2000019c 	.word	0x2000019c
 8002e8c:	40006400 	.word	0x40006400
 8002e90:	40006800 	.word	0x40006800

08002e94 <LL_CAN_TxMailbox0AbortCallback>:
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_TxMailbox0AbortCallback(LL_CAN_Handler_t *hcan)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_TxMailbox0AbortCallback could be implemented in the
			  user file
	 */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_CAN_TxMailbox1AbortCallback>:
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_TxMailbox1AbortCallback(LL_CAN_Handler_t *hcan)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_TxMailbox1AbortCallback could be implemented in the
			  user file
	 */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_CAN_TxMailbox2AbortCallback>:
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_TxMailbox2AbortCallback(LL_CAN_Handler_t *hcan)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_TxMailbox2AbortCallback could be implemented in the
			  user file
	 */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_CAN_RxFifo0FullCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_RxFifo0FullCallback(LL_CAN_Handler_t *hcan)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_RxFifo0FullCallback could be implemented in the user
			  file
	 */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_CAN_RxFifo1MsgPendingCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_RxFifo1MsgPendingCallback(LL_CAN_Handler_t *hcan)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_RxFifo1MsgPendingCallback could be implemented in the
			  user file
	 */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_CAN_RxFifo1FullCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_RxFifo1FullCallback(LL_CAN_Handler_t *hcan)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_RxFifo1FullCallback could be implemented in the user
			  file
	 */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_CAN_SleepCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_SleepCallback(LL_CAN_Handler_t *hcan)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	UNUSED(&hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_SleepCallback could be implemented in the user file
	 */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_CAN_WakeUpFromRxMsgCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_WakeUpFromRxMsgCallback(LL_CAN_Handler_t *hcan)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_WakeUpFromRxMsgCallback could be implemented in the
			  user file
	 */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_CAN_ErrorCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void LL_CAN_ErrorCallback(LL_CAN_Handler_t *hcan)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	UNUSED(&hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
			  the LL_CAN_ErrorCallback could be implemented in the user file
	 */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_CAN_IRQHandler>:
 * `CAN_HandleTypeDef` structure, which typically contains all the necessary information and
 * configurations for handling a CAN peripheral in an STM32 microcontroller. This structure is used to
 * access the CAN hardware registers and manage the CAN
 */
void LL_CAN_IRQHandler(LL_CAN_Handler_t *hcan)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	@ 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

	// Check CAN instance is CAN1 or CAN2
	if (hcan->Instance == _CAN1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d103      	bne.n	8002f60 <LL_CAN_IRQHandler+0x18>
	{
		canbase = _CAN1_REG_BASE;
 8002f58:	4b51      	ldr	r3, [pc, #324]	@ (80030a0 <LL_CAN_IRQHandler+0x158>)
 8002f5a:	4a52      	ldr	r2, [pc, #328]	@ (80030a4 <LL_CAN_IRQHandler+0x15c>)
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	e002      	b.n	8002f66 <LL_CAN_IRQHandler+0x1e>
	}
	else
	{
		canbase = _CAN2_REG_BASE;
 8002f60:	4b4f      	ldr	r3, [pc, #316]	@ (80030a0 <LL_CAN_IRQHandler+0x158>)
 8002f62:	4a51      	ldr	r2, [pc, #324]	@ (80030a8 <LL_CAN_IRQHandler+0x160>)
 8002f64:	601a      	str	r2, [r3, #0]
	}
	uint32_t errorcode = LL_CAN_ERROR_NONE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t interrupts = (canbase->CAN_IER);
 8002f6a:	4b4d      	ldr	r3, [pc, #308]	@ (80030a0 <LL_CAN_IRQHandler+0x158>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	613b      	str	r3, [r7, #16]
	uint32_t msrflags = (canbase->CAN_MSR);
 8002f72:	4b4b      	ldr	r3, [pc, #300]	@ (80030a0 <LL_CAN_IRQHandler+0x158>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	623b      	str	r3, [r7, #32]
	uint32_t tsrflags = (canbase->CAN_TSR);
 8002f7a:	4b49      	ldr	r3, [pc, #292]	@ (80030a0 <LL_CAN_IRQHandler+0x158>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	61fb      	str	r3, [r7, #28]
	uint32_t rf0rflags = (canbase->CAN_RF0R);
 8002f82:	4b47      	ldr	r3, [pc, #284]	@ (80030a0 <LL_CAN_IRQHandler+0x158>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	61bb      	str	r3, [r7, #24]
	uint32_t rf1rflags = (canbase->CAN_RF1R);
 8002f8a:	4b45      	ldr	r3, [pc, #276]	@ (80030a0 <LL_CAN_IRQHandler+0x158>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	617b      	str	r3, [r7, #20]
	uint32_t esrflags = (canbase->CAN_ESR);
 8002f92:	4b43      	ldr	r3, [pc, #268]	@ (80030a0 <LL_CAN_IRQHandler+0x158>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	60fb      	str	r3, [r7, #12]

	/* Transmit Mailbox empty interrupt management *****************************/
	if ((interrupts & (1U << TMEIE)) != 0U)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8086 	beq.w	80030b2 <LL_CAN_IRQHandler+0x16a>
	{
		/* Transmit Mailbox 0 management *****************************************/
		if ((tsrflags & (1U << RQCP0)) != 0U)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d027      	beq.n	8003000 <LL_CAN_IRQHandler+0xb8>
		{
			/* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
			(canbase->CAN_TSR) |= (1U << RQCP0);
 8002fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80030a0 <LL_CAN_IRQHandler+0x158>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80030a0 <LL_CAN_IRQHandler+0x158>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	609a      	str	r2, [r3, #8]

			if ((tsrflags & (1U << TXOK0)) != 0U)
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <LL_CAN_IRQHandler+0x8a>
			{
				/* Transmission Mailbox 0 complete callback */
				LL_CAN_TxMailbox0CompleteCallback(hcan);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fd feb0 	bl	8000d30 <LL_CAN_TxMailbox0CompleteCallback>
 8002fd0:	e016      	b.n	8003000 <LL_CAN_IRQHandler+0xb8>
			}
			else
			{
				if ((tsrflags & (1U << ALST0)) != 0U)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <LL_CAN_IRQHandler+0x9e>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_ALST0;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe4:	e00c      	b.n	8003000 <LL_CAN_IRQHandler+0xb8>
				}
				else if ((tsrflags & (1U << TERR0)) != 0U)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <LL_CAN_IRQHandler+0xb2>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_TERR0;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff8:	e002      	b.n	8003000 <LL_CAN_IRQHandler+0xb8>
				}
				else
				{
					/* Transmission Mailbox 0 abort callback */
					LL_CAN_TxMailbox0AbortCallback(hcan);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ff4a 	bl	8002e94 <LL_CAN_TxMailbox0AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 1 management *****************************************/
		if ((tsrflags & (1U << RQCP1)) != 0U)
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d023      	beq.n	8003052 <LL_CAN_IRQHandler+0x10a>
		{
			/* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
			tsrflags |= (1U << RQCP1);
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003010:	61fb      	str	r3, [r7, #28]

			if ((tsrflags & (1U << TXOK1)) != 0U)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <LL_CAN_IRQHandler+0xdc>
			{
				/* Transmission Mailbox 1 complete callback */
				LL_CAN_TxMailbox1CompleteCallback(hcan);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fd fea5 	bl	8000d6c <LL_CAN_TxMailbox1CompleteCallback>
 8003022:	e016      	b.n	8003052 <LL_CAN_IRQHandler+0x10a>
			}
			else
			{
				if ((tsrflags & (1U << ALST1)) != 0U)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302a:	2b00      	cmp	r3, #0
 800302c:	d004      	beq.n	8003038 <LL_CAN_IRQHandler+0xf0>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_ALST1;
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
 8003036:	e00c      	b.n	8003052 <LL_CAN_IRQHandler+0x10a>
				}
				else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <LL_CAN_IRQHandler+0x104>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_TERR1;
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
 800304a:	e002      	b.n	8003052 <LL_CAN_IRQHandler+0x10a>
				}
				else
				{
					/* Transmission Mailbox 1 abort callback */
					LL_CAN_TxMailbox1AbortCallback(hcan);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff2b 	bl	8002ea8 <LL_CAN_TxMailbox1AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 2 management *****************************************/
		if ((tsrflags & (1U << RQCP2)) != 0U)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d02a      	beq.n	80030b2 <LL_CAN_IRQHandler+0x16a>
		{
			/* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
			tsrflags |= (1U << RQCP2);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003062:	61fb      	str	r3, [r7, #28]

			if ((tsrflags & (1U << TXOK2)) != 0U)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <LL_CAN_IRQHandler+0x12e>
			{
				/* Transmission Mailbox 2 complete callback */
				LL_CAN_TxMailbox2CompleteCallback(hcan);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd fe9a 	bl	8000da8 <LL_CAN_TxMailbox2CompleteCallback>
 8003074:	e01d      	b.n	80030b2 <LL_CAN_IRQHandler+0x16a>
			}
			else
			{
				if ((tsrflags & (1U << ALST2)) != 0U)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <LL_CAN_IRQHandler+0x142>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_ALST2;
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
 8003088:	e013      	b.n	80030b2 <LL_CAN_IRQHandler+0x16a>
				}
				else if ((tsrflags & (1U << TERR2)) != 0U)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <LL_CAN_IRQHandler+0x164>
				{
					/* Update error code */
					errorcode |= LL_CAN_ERROR_TX_TERR2;
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
 800309c:	e009      	b.n	80030b2 <LL_CAN_IRQHandler+0x16a>
 800309e:	bf00      	nop
 80030a0:	2000019c 	.word	0x2000019c
 80030a4:	40006400 	.word	0x40006400
 80030a8:	40006800 	.word	0x40006800
				}
				else
				{
					/* Transmission Mailbox 2 abort callback */
					LL_CAN_TxMailbox2AbortCallback(hcan);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff05 	bl	8002ebc <LL_CAN_TxMailbox2AbortCallback>
			}
		}
	}

	/* Receive FIFO 0 overrun interrupt management *****************************/
	if ((interrupts & (1U << FOVIE0)) != 0U)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d010      	beq.n	80030de <LL_CAN_IRQHandler+0x196>
	{
		if ((rf0rflags & (1U << FOVR0)) != 0U)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <LL_CAN_IRQHandler+0x196>
		{
			/* Set CAN error code to Rx Fifo 0 overrun error */
			errorcode |= LL_CAN_ERROR_RX_FOV0;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Clear FIFO0 Overrun Flag */
			(canbase->CAN_RF0R) &= ~(1U << FOVR0);
 80030ce:	4b82      	ldr	r3, [pc, #520]	@ (80032d8 <LL_CAN_IRQHandler+0x390>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	4b80      	ldr	r3, [pc, #512]	@ (80032d8 <LL_CAN_IRQHandler+0x390>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0210 	bic.w	r2, r2, #16
 80030dc:	60da      	str	r2, [r3, #12]
		}
	}

	/* Receive FIFO 0 full interrupt management ********************************/
	if ((interrupts & (1U << FFIE0)) != 0U)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <LL_CAN_IRQHandler+0x1b8>
	{
		if ((rf0rflags & (1U << FULL0)) != 0U)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <LL_CAN_IRQHandler+0x1b8>
		{
			/* Clear FIFO 0 full Flag */
			rf0rflags &= ~(1U << FULL0);
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f023 0308 	bic.w	r3, r3, #8
 80030f8:	61bb      	str	r3, [r7, #24]

			/* Receive FIFO 0 full Callback */
			LL_CAN_RxFifo0FullCallback(hcan);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff fee8 	bl	8002ed0 <LL_CAN_RxFifo0FullCallback>
		}
	}

	/* Receive FIFO 0 message pending interrupt management *********************/
	if ((interrupts & (1U << FMPIE0)) != 0U)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <LL_CAN_IRQHandler+0x1d2>
	{
		/* Check if message is still pending */
		if ((rf0rflags & (3U << FMP0)) != 0U)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <LL_CAN_IRQHandler+0x1d2>
		{
			/* Receive FIFO 0 message pending Callback */
			LL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7fd fe65 	bl	8000de4 <LL_CAN_RxFifo0MsgPendingCallback>
		}
	}

	/* Receive FIFO 1 overrun interrupt management *****************************/
	if ((interrupts & (1U << FOVIE1)) != 0U)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00c      	beq.n	800313e <LL_CAN_IRQHandler+0x1f6>
	{
		if ((rf1rflags & (1U << FOVR1)) != 0U)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <LL_CAN_IRQHandler+0x1f6>
		{
			/* Set CAN error code to Rx Fifo 1 overrun error */
			errorcode |= LL_CAN_ERROR_RX_FOV1;
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Clear FIFO1 Overrun Flag */
			rf1rflags &= ~(1U << FOVR1);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f023 0310 	bic.w	r3, r3, #16
 800313c:	617b      	str	r3, [r7, #20]
		}
	}

	/* Receive FIFO 1 full interrupt management ********************************/
	if ((interrupts & (1U << FFIE1)) != 0U)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00b      	beq.n	8003160 <LL_CAN_IRQHandler+0x218>
	{
		if ((rf1rflags & (1U << FULL1)) != 0U)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <LL_CAN_IRQHandler+0x218>
		{
			/* Clear FIFO 1 full Flag */
			rf1rflags &= ~(1U << FULL1);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f023 0308 	bic.w	r3, r3, #8
 8003158:	617b      	str	r3, [r7, #20]
			/* Receive FIFO 1 full Callback */
			LL_CAN_RxFifo1FullCallback(hcan);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff fecc 	bl	8002ef8 <LL_CAN_RxFifo1FullCallback>
		}
	}

	/* Receive FIFO 1 message pending interrupt management *********************/
	if ((interrupts & (1U << FMPIE1)) != 0U)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <LL_CAN_IRQHandler+0x232>
	{
		/* Check if message is still pending */
		if ((rf1rflags & (3U << FMP1)) != 0U)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <LL_CAN_IRQHandler+0x232>
		{
			/* Receive FIFO 1 message pending Callback */
			LL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff feb5 	bl	8002ee4 <LL_CAN_RxFifo1MsgPendingCallback>
		}
	}

	/* Sleep interrupt management *********************************************/
	if ((interrupts & (1U << SLKIE)) != 0U)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00b      	beq.n	800319c <LL_CAN_IRQHandler+0x254>
	{
		if ((msrflags & (1U << SLAKI)) != 0U)
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <LL_CAN_IRQHandler+0x254>
		{
			/* Clear Sleep interrupt Flag */
			msrflags &= ~(1U << SLAKI);
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f023 0310 	bic.w	r3, r3, #16
 8003194:	623b      	str	r3, [r7, #32]

			/* Sleep Callback */
			LL_CAN_SleepCallback(hcan);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff feb8 	bl	8002f0c <LL_CAN_SleepCallback>
		}
	}

	/* WakeUp interrupt management *********************************************/
	if ((interrupts & (1U << WKUIE)) != 0U)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <LL_CAN_IRQHandler+0x276>
	{
		if ((msrflags & (WKUI)) != 0U)
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <LL_CAN_IRQHandler+0x276>
		{
			/* Clear WakeUp Flag */
			msrflags &= ~(1U << WKUI);
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f023 0308 	bic.w	r3, r3, #8
 80031b6:	623b      	str	r3, [r7, #32]

			/* WakeUp Callback */
			LL_CAN_WakeUpFromRxMsgCallback(hcan);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff feb1 	bl	8002f20 <LL_CAN_WakeUpFromRxMsgCallback>
		}
	}

	/* Error interrupts management *********************************************/
	if ((interrupts & (1U << ERRIE)) != 0U)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d077      	beq.n	80032b8 <LL_CAN_IRQHandler+0x370>
	{
		if ((msrflags & (1U << ERRI)) != 0U)
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d06e      	beq.n	80032b0 <LL_CAN_IRQHandler+0x368>
		{
			/* Check Error Warning Flag */
			if (((interrupts & (1U << EWGIE)) != 0U) &&
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <LL_CAN_IRQHandler+0x2a6>
				((esrflags & (1U << EWGF)) != 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0301 	and.w	r3, r3, #1
			if (((interrupts & (1U << EWGIE)) != 0U) &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <LL_CAN_IRQHandler+0x2a6>
			{
				/* Set CAN error code to Error Warning */
				errorcode |= LL_CAN_ERROR_EWG;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24

				/* No need for clear of Error Warning Flag as read-only */
			}

			/* Check Error Passive Flag */
			if (((interrupts & (1U << EPVIE)) != 0U) &&
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <LL_CAN_IRQHandler+0x2c2>
				((esrflags & (1U << EPVF)) != 0U))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0302 	and.w	r3, r3, #2
			if (((interrupts & (1U << EPVIE)) != 0U) &&
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <LL_CAN_IRQHandler+0x2c2>
			{
				/* Set CAN error code to Error Passive */
				errorcode |= LL_CAN_ERROR_EPV;
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24

				/* No need for clear of Error Passive Flag as read-only */
			}

			/* Check Bus-off Flag */
			if (((interrupts & (1U << BOFIE)) != 0U) &&
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <LL_CAN_IRQHandler+0x2de>
				((esrflags & (1U << BOFF)) != 0U))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0304 	and.w	r3, r3, #4
			if (((interrupts & (1U << BOFIE)) != 0U) &&
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <LL_CAN_IRQHandler+0x2de>
			{
				/* Set CAN error code to Bus-Off */
				errorcode |= LL_CAN_ERROR_BOF;
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24

				/* No need for clear of Error Bus-Off as read-only */
			}

			/* Check Last Error Code Flag */
			if (((interrupts & (1U << LECIE)) != 0U) &&
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800322c:	2b00      	cmp	r3, #0
 800322e:	d03f      	beq.n	80032b0 <LL_CAN_IRQHandler+0x368>
				((esrflags & (1U << LEC)) != 0U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0310 	and.w	r3, r3, #16
			if (((interrupts & (1U << LECIE)) != 0U) &&
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03a      	beq.n	80032b0 <LL_CAN_IRQHandler+0x368>
			{
				switch (esrflags & (7U << LEC))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003240:	2b60      	cmp	r3, #96	@ 0x60
 8003242:	d02b      	beq.n	800329c <LL_CAN_IRQHandler+0x354>
 8003244:	2b60      	cmp	r3, #96	@ 0x60
 8003246:	d82e      	bhi.n	80032a6 <LL_CAN_IRQHandler+0x35e>
 8003248:	2b50      	cmp	r3, #80	@ 0x50
 800324a:	d022      	beq.n	8003292 <LL_CAN_IRQHandler+0x34a>
 800324c:	2b50      	cmp	r3, #80	@ 0x50
 800324e:	d82a      	bhi.n	80032a6 <LL_CAN_IRQHandler+0x35e>
 8003250:	2b40      	cmp	r3, #64	@ 0x40
 8003252:	d019      	beq.n	8003288 <LL_CAN_IRQHandler+0x340>
 8003254:	2b40      	cmp	r3, #64	@ 0x40
 8003256:	d826      	bhi.n	80032a6 <LL_CAN_IRQHandler+0x35e>
 8003258:	2b30      	cmp	r3, #48	@ 0x30
 800325a:	d010      	beq.n	800327e <LL_CAN_IRQHandler+0x336>
 800325c:	2b30      	cmp	r3, #48	@ 0x30
 800325e:	d822      	bhi.n	80032a6 <LL_CAN_IRQHandler+0x35e>
 8003260:	2b10      	cmp	r3, #16
 8003262:	d002      	beq.n	800326a <LL_CAN_IRQHandler+0x322>
 8003264:	2b20      	cmp	r3, #32
 8003266:	d005      	beq.n	8003274 <LL_CAN_IRQHandler+0x32c>
				case ((4U << LEC) | (2U << LEC)):
					/* Set CAN error code to CRC error */
					errorcode |= LL_CAN_ERROR_CRC;
					break;
				default:
					break;
 8003268:	e01d      	b.n	80032a6 <LL_CAN_IRQHandler+0x35e>
					errorcode |= LL_CAN_ERROR_STF;
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	f043 0308 	orr.w	r3, r3, #8
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8003272:	e019      	b.n	80032a8 <LL_CAN_IRQHandler+0x360>
					errorcode |= LL_CAN_ERROR_FOR;
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	f043 0310 	orr.w	r3, r3, #16
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800327c:	e014      	b.n	80032a8 <LL_CAN_IRQHandler+0x360>
					errorcode |= LL_CAN_ERROR_ACK;
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	f043 0320 	orr.w	r3, r3, #32
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8003286:	e00f      	b.n	80032a8 <LL_CAN_IRQHandler+0x360>
					errorcode |= LL_CAN_ERROR_BR;
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8003290:	e00a      	b.n	80032a8 <LL_CAN_IRQHandler+0x360>
					errorcode |= LL_CAN_ERROR_BD;
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800329a:	e005      	b.n	80032a8 <LL_CAN_IRQHandler+0x360>
					errorcode |= LL_CAN_ERROR_CRC;
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80032a4:	e000      	b.n	80032a8 <LL_CAN_IRQHandler+0x360>
					break;
 80032a6:	bf00      	nop
				}

				/* Clear Last error code Flag */
				esrflags &= ~(7U << LEC);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
			}
		}

		/* Clear ERRI Flag */
		msrflags &= ~(1U << ERRI);
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	f023 0304 	bic.w	r3, r3, #4
 80032b6:	623b      	str	r3, [r7, #32]
	}

	/* Call the Error call Back in case of Errors */
	if (errorcode != LL_CAN_ERROR_NONE)
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <LL_CAN_IRQHandler+0x388>
	{
		/* Update error code in handle */
		hcan->ErrorCode |= errorcode;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	619a      	str	r2, [r3, #24]

		LL_CAN_ErrorCallback(hcan);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff fe32 	bl	8002f34 <LL_CAN_ErrorCallback>
	}
}
 80032d0:	bf00      	nop
 80032d2:	3728      	adds	r7, #40	@ 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	2000019c 	.word	0x2000019c

080032dc <Calculate_APB1_clk>:

uint32_t Calculate_APB1_clk()
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
	uint32_t PPRE1 = (RCC->CFGR >> 10) & 0x7;
 80032e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <Calculate_APB1_clk+0x74>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0a9b      	lsrs	r3, r3, #10
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	607b      	str	r3, [r7, #4]
	switch(PPRE1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b07      	cmp	r3, #7
 80032f2:	d826      	bhi.n	8003342 <Calculate_APB1_clk+0x66>
 80032f4:	a201      	add	r2, pc, #4	@ (adr r2, 80032fc <Calculate_APB1_clk+0x20>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	0800331d 	.word	0x0800331d
 8003300:	08003343 	.word	0x08003343
 8003304:	08003343 	.word	0x08003343
 8003308:	08003343 	.word	0x08003343
 800330c:	08003323 	.word	0x08003323
 8003310:	0800332b 	.word	0x0800332b
 8003314:	08003333 	.word	0x08003333
 8003318:	0800333b 	.word	0x0800333b
	{
	case 0: return (SystemCoreClock/1);//SystemCoreClock=HCLK_freq
 800331c:	4b0d      	ldr	r3, [pc, #52]	@ (8003354 <Calculate_APB1_clk+0x78>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	e00f      	b.n	8003342 <Calculate_APB1_clk+0x66>
	case 4: return (SystemCoreClock/2);
 8003322:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <Calculate_APB1_clk+0x78>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	e00b      	b.n	8003342 <Calculate_APB1_clk+0x66>
	case 5: return (SystemCoreClock/4);
 800332a:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <Calculate_APB1_clk+0x78>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	e007      	b.n	8003342 <Calculate_APB1_clk+0x66>
	case 6: return (SystemCoreClock/8);
 8003332:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <Calculate_APB1_clk+0x78>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	08db      	lsrs	r3, r3, #3
 8003338:	e003      	b.n	8003342 <Calculate_APB1_clk+0x66>
	case 7: return (SystemCoreClock/16);
 800333a:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <Calculate_APB1_clk+0x78>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	e7ff      	b.n	8003342 <Calculate_APB1_clk+0x66>
	}
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	20000008 	.word	0x20000008

08003358 <siprintf>:
 8003358:	b40e      	push	{r1, r2, r3}
 800335a:	b500      	push	{lr}
 800335c:	b09c      	sub	sp, #112	@ 0x70
 800335e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003360:	9002      	str	r0, [sp, #8]
 8003362:	9006      	str	r0, [sp, #24]
 8003364:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003368:	4809      	ldr	r0, [pc, #36]	@ (8003390 <siprintf+0x38>)
 800336a:	9107      	str	r1, [sp, #28]
 800336c:	9104      	str	r1, [sp, #16]
 800336e:	4909      	ldr	r1, [pc, #36]	@ (8003394 <siprintf+0x3c>)
 8003370:	f853 2b04 	ldr.w	r2, [r3], #4
 8003374:	9105      	str	r1, [sp, #20]
 8003376:	6800      	ldr	r0, [r0, #0]
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	a902      	add	r1, sp, #8
 800337c:	f000 f98c 	bl	8003698 <_svfiprintf_r>
 8003380:	9b02      	ldr	r3, [sp, #8]
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	b01c      	add	sp, #112	@ 0x70
 8003388:	f85d eb04 	ldr.w	lr, [sp], #4
 800338c:	b003      	add	sp, #12
 800338e:	4770      	bx	lr
 8003390:	20000014 	.word	0x20000014
 8003394:	ffff0208 	.word	0xffff0208

08003398 <__errno>:
 8003398:	4b01      	ldr	r3, [pc, #4]	@ (80033a0 <__errno+0x8>)
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000014 	.word	0x20000014

080033a4 <__libc_init_array>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	4d0d      	ldr	r5, [pc, #52]	@ (80033dc <__libc_init_array+0x38>)
 80033a8:	4c0d      	ldr	r4, [pc, #52]	@ (80033e0 <__libc_init_array+0x3c>)
 80033aa:	1b64      	subs	r4, r4, r5
 80033ac:	10a4      	asrs	r4, r4, #2
 80033ae:	2600      	movs	r6, #0
 80033b0:	42a6      	cmp	r6, r4
 80033b2:	d109      	bne.n	80033c8 <__libc_init_array+0x24>
 80033b4:	4d0b      	ldr	r5, [pc, #44]	@ (80033e4 <__libc_init_array+0x40>)
 80033b6:	4c0c      	ldr	r4, [pc, #48]	@ (80033e8 <__libc_init_array+0x44>)
 80033b8:	f000 fc66 	bl	8003c88 <_init>
 80033bc:	1b64      	subs	r4, r4, r5
 80033be:	10a4      	asrs	r4, r4, #2
 80033c0:	2600      	movs	r6, #0
 80033c2:	42a6      	cmp	r6, r4
 80033c4:	d105      	bne.n	80033d2 <__libc_init_array+0x2e>
 80033c6:	bd70      	pop	{r4, r5, r6, pc}
 80033c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033cc:	4798      	blx	r3
 80033ce:	3601      	adds	r6, #1
 80033d0:	e7ee      	b.n	80033b0 <__libc_init_array+0xc>
 80033d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d6:	4798      	blx	r3
 80033d8:	3601      	adds	r6, #1
 80033da:	e7f2      	b.n	80033c2 <__libc_init_array+0x1e>
 80033dc:	08003e44 	.word	0x08003e44
 80033e0:	08003e44 	.word	0x08003e44
 80033e4:	08003e44 	.word	0x08003e44
 80033e8:	08003e48 	.word	0x08003e48

080033ec <__retarget_lock_acquire_recursive>:
 80033ec:	4770      	bx	lr

080033ee <__retarget_lock_release_recursive>:
 80033ee:	4770      	bx	lr

080033f0 <_free_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	4605      	mov	r5, r0
 80033f4:	2900      	cmp	r1, #0
 80033f6:	d041      	beq.n	800347c <_free_r+0x8c>
 80033f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033fc:	1f0c      	subs	r4, r1, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bfb8      	it	lt
 8003402:	18e4      	addlt	r4, r4, r3
 8003404:	f000 f8e0 	bl	80035c8 <__malloc_lock>
 8003408:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <_free_r+0x90>)
 800340a:	6813      	ldr	r3, [r2, #0]
 800340c:	b933      	cbnz	r3, 800341c <_free_r+0x2c>
 800340e:	6063      	str	r3, [r4, #4]
 8003410:	6014      	str	r4, [r2, #0]
 8003412:	4628      	mov	r0, r5
 8003414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003418:	f000 b8dc 	b.w	80035d4 <__malloc_unlock>
 800341c:	42a3      	cmp	r3, r4
 800341e:	d908      	bls.n	8003432 <_free_r+0x42>
 8003420:	6820      	ldr	r0, [r4, #0]
 8003422:	1821      	adds	r1, r4, r0
 8003424:	428b      	cmp	r3, r1
 8003426:	bf01      	itttt	eq
 8003428:	6819      	ldreq	r1, [r3, #0]
 800342a:	685b      	ldreq	r3, [r3, #4]
 800342c:	1809      	addeq	r1, r1, r0
 800342e:	6021      	streq	r1, [r4, #0]
 8003430:	e7ed      	b.n	800340e <_free_r+0x1e>
 8003432:	461a      	mov	r2, r3
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	b10b      	cbz	r3, 800343c <_free_r+0x4c>
 8003438:	42a3      	cmp	r3, r4
 800343a:	d9fa      	bls.n	8003432 <_free_r+0x42>
 800343c:	6811      	ldr	r1, [r2, #0]
 800343e:	1850      	adds	r0, r2, r1
 8003440:	42a0      	cmp	r0, r4
 8003442:	d10b      	bne.n	800345c <_free_r+0x6c>
 8003444:	6820      	ldr	r0, [r4, #0]
 8003446:	4401      	add	r1, r0
 8003448:	1850      	adds	r0, r2, r1
 800344a:	4283      	cmp	r3, r0
 800344c:	6011      	str	r1, [r2, #0]
 800344e:	d1e0      	bne.n	8003412 <_free_r+0x22>
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	6053      	str	r3, [r2, #4]
 8003456:	4408      	add	r0, r1
 8003458:	6010      	str	r0, [r2, #0]
 800345a:	e7da      	b.n	8003412 <_free_r+0x22>
 800345c:	d902      	bls.n	8003464 <_free_r+0x74>
 800345e:	230c      	movs	r3, #12
 8003460:	602b      	str	r3, [r5, #0]
 8003462:	e7d6      	b.n	8003412 <_free_r+0x22>
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	1821      	adds	r1, r4, r0
 8003468:	428b      	cmp	r3, r1
 800346a:	bf04      	itt	eq
 800346c:	6819      	ldreq	r1, [r3, #0]
 800346e:	685b      	ldreq	r3, [r3, #4]
 8003470:	6063      	str	r3, [r4, #4]
 8003472:	bf04      	itt	eq
 8003474:	1809      	addeq	r1, r1, r0
 8003476:	6021      	streq	r1, [r4, #0]
 8003478:	6054      	str	r4, [r2, #4]
 800347a:	e7ca      	b.n	8003412 <_free_r+0x22>
 800347c:	bd38      	pop	{r3, r4, r5, pc}
 800347e:	bf00      	nop
 8003480:	200002e4 	.word	0x200002e4

08003484 <sbrk_aligned>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	4e0f      	ldr	r6, [pc, #60]	@ (80034c4 <sbrk_aligned+0x40>)
 8003488:	460c      	mov	r4, r1
 800348a:	6831      	ldr	r1, [r6, #0]
 800348c:	4605      	mov	r5, r0
 800348e:	b911      	cbnz	r1, 8003496 <sbrk_aligned+0x12>
 8003490:	f000 fba6 	bl	8003be0 <_sbrk_r>
 8003494:	6030      	str	r0, [r6, #0]
 8003496:	4621      	mov	r1, r4
 8003498:	4628      	mov	r0, r5
 800349a:	f000 fba1 	bl	8003be0 <_sbrk_r>
 800349e:	1c43      	adds	r3, r0, #1
 80034a0:	d103      	bne.n	80034aa <sbrk_aligned+0x26>
 80034a2:	f04f 34ff 	mov.w	r4, #4294967295
 80034a6:	4620      	mov	r0, r4
 80034a8:	bd70      	pop	{r4, r5, r6, pc}
 80034aa:	1cc4      	adds	r4, r0, #3
 80034ac:	f024 0403 	bic.w	r4, r4, #3
 80034b0:	42a0      	cmp	r0, r4
 80034b2:	d0f8      	beq.n	80034a6 <sbrk_aligned+0x22>
 80034b4:	1a21      	subs	r1, r4, r0
 80034b6:	4628      	mov	r0, r5
 80034b8:	f000 fb92 	bl	8003be0 <_sbrk_r>
 80034bc:	3001      	adds	r0, #1
 80034be:	d1f2      	bne.n	80034a6 <sbrk_aligned+0x22>
 80034c0:	e7ef      	b.n	80034a2 <sbrk_aligned+0x1e>
 80034c2:	bf00      	nop
 80034c4:	200002e0 	.word	0x200002e0

080034c8 <_malloc_r>:
 80034c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034cc:	1ccd      	adds	r5, r1, #3
 80034ce:	f025 0503 	bic.w	r5, r5, #3
 80034d2:	3508      	adds	r5, #8
 80034d4:	2d0c      	cmp	r5, #12
 80034d6:	bf38      	it	cc
 80034d8:	250c      	movcc	r5, #12
 80034da:	2d00      	cmp	r5, #0
 80034dc:	4606      	mov	r6, r0
 80034de:	db01      	blt.n	80034e4 <_malloc_r+0x1c>
 80034e0:	42a9      	cmp	r1, r5
 80034e2:	d904      	bls.n	80034ee <_malloc_r+0x26>
 80034e4:	230c      	movs	r3, #12
 80034e6:	6033      	str	r3, [r6, #0]
 80034e8:	2000      	movs	r0, #0
 80034ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035c4 <_malloc_r+0xfc>
 80034f2:	f000 f869 	bl	80035c8 <__malloc_lock>
 80034f6:	f8d8 3000 	ldr.w	r3, [r8]
 80034fa:	461c      	mov	r4, r3
 80034fc:	bb44      	cbnz	r4, 8003550 <_malloc_r+0x88>
 80034fe:	4629      	mov	r1, r5
 8003500:	4630      	mov	r0, r6
 8003502:	f7ff ffbf 	bl	8003484 <sbrk_aligned>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	4604      	mov	r4, r0
 800350a:	d158      	bne.n	80035be <_malloc_r+0xf6>
 800350c:	f8d8 4000 	ldr.w	r4, [r8]
 8003510:	4627      	mov	r7, r4
 8003512:	2f00      	cmp	r7, #0
 8003514:	d143      	bne.n	800359e <_malloc_r+0xd6>
 8003516:	2c00      	cmp	r4, #0
 8003518:	d04b      	beq.n	80035b2 <_malloc_r+0xea>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	4639      	mov	r1, r7
 800351e:	4630      	mov	r0, r6
 8003520:	eb04 0903 	add.w	r9, r4, r3
 8003524:	f000 fb5c 	bl	8003be0 <_sbrk_r>
 8003528:	4581      	cmp	r9, r0
 800352a:	d142      	bne.n	80035b2 <_malloc_r+0xea>
 800352c:	6821      	ldr	r1, [r4, #0]
 800352e:	1a6d      	subs	r5, r5, r1
 8003530:	4629      	mov	r1, r5
 8003532:	4630      	mov	r0, r6
 8003534:	f7ff ffa6 	bl	8003484 <sbrk_aligned>
 8003538:	3001      	adds	r0, #1
 800353a:	d03a      	beq.n	80035b2 <_malloc_r+0xea>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	442b      	add	r3, r5
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	f8d8 3000 	ldr.w	r3, [r8]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	bb62      	cbnz	r2, 80035a4 <_malloc_r+0xdc>
 800354a:	f8c8 7000 	str.w	r7, [r8]
 800354e:	e00f      	b.n	8003570 <_malloc_r+0xa8>
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	1b52      	subs	r2, r2, r5
 8003554:	d420      	bmi.n	8003598 <_malloc_r+0xd0>
 8003556:	2a0b      	cmp	r2, #11
 8003558:	d917      	bls.n	800358a <_malloc_r+0xc2>
 800355a:	1961      	adds	r1, r4, r5
 800355c:	42a3      	cmp	r3, r4
 800355e:	6025      	str	r5, [r4, #0]
 8003560:	bf18      	it	ne
 8003562:	6059      	strne	r1, [r3, #4]
 8003564:	6863      	ldr	r3, [r4, #4]
 8003566:	bf08      	it	eq
 8003568:	f8c8 1000 	streq.w	r1, [r8]
 800356c:	5162      	str	r2, [r4, r5]
 800356e:	604b      	str	r3, [r1, #4]
 8003570:	4630      	mov	r0, r6
 8003572:	f000 f82f 	bl	80035d4 <__malloc_unlock>
 8003576:	f104 000b 	add.w	r0, r4, #11
 800357a:	1d23      	adds	r3, r4, #4
 800357c:	f020 0007 	bic.w	r0, r0, #7
 8003580:	1ac2      	subs	r2, r0, r3
 8003582:	bf1c      	itt	ne
 8003584:	1a1b      	subne	r3, r3, r0
 8003586:	50a3      	strne	r3, [r4, r2]
 8003588:	e7af      	b.n	80034ea <_malloc_r+0x22>
 800358a:	6862      	ldr	r2, [r4, #4]
 800358c:	42a3      	cmp	r3, r4
 800358e:	bf0c      	ite	eq
 8003590:	f8c8 2000 	streq.w	r2, [r8]
 8003594:	605a      	strne	r2, [r3, #4]
 8003596:	e7eb      	b.n	8003570 <_malloc_r+0xa8>
 8003598:	4623      	mov	r3, r4
 800359a:	6864      	ldr	r4, [r4, #4]
 800359c:	e7ae      	b.n	80034fc <_malloc_r+0x34>
 800359e:	463c      	mov	r4, r7
 80035a0:	687f      	ldr	r7, [r7, #4]
 80035a2:	e7b6      	b.n	8003512 <_malloc_r+0x4a>
 80035a4:	461a      	mov	r2, r3
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	d1fb      	bne.n	80035a4 <_malloc_r+0xdc>
 80035ac:	2300      	movs	r3, #0
 80035ae:	6053      	str	r3, [r2, #4]
 80035b0:	e7de      	b.n	8003570 <_malloc_r+0xa8>
 80035b2:	230c      	movs	r3, #12
 80035b4:	6033      	str	r3, [r6, #0]
 80035b6:	4630      	mov	r0, r6
 80035b8:	f000 f80c 	bl	80035d4 <__malloc_unlock>
 80035bc:	e794      	b.n	80034e8 <_malloc_r+0x20>
 80035be:	6005      	str	r5, [r0, #0]
 80035c0:	e7d6      	b.n	8003570 <_malloc_r+0xa8>
 80035c2:	bf00      	nop
 80035c4:	200002e4 	.word	0x200002e4

080035c8 <__malloc_lock>:
 80035c8:	4801      	ldr	r0, [pc, #4]	@ (80035d0 <__malloc_lock+0x8>)
 80035ca:	f7ff bf0f 	b.w	80033ec <__retarget_lock_acquire_recursive>
 80035ce:	bf00      	nop
 80035d0:	200002dc 	.word	0x200002dc

080035d4 <__malloc_unlock>:
 80035d4:	4801      	ldr	r0, [pc, #4]	@ (80035dc <__malloc_unlock+0x8>)
 80035d6:	f7ff bf0a 	b.w	80033ee <__retarget_lock_release_recursive>
 80035da:	bf00      	nop
 80035dc:	200002dc 	.word	0x200002dc

080035e0 <__ssputs_r>:
 80035e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e4:	688e      	ldr	r6, [r1, #8]
 80035e6:	461f      	mov	r7, r3
 80035e8:	42be      	cmp	r6, r7
 80035ea:	680b      	ldr	r3, [r1, #0]
 80035ec:	4682      	mov	sl, r0
 80035ee:	460c      	mov	r4, r1
 80035f0:	4690      	mov	r8, r2
 80035f2:	d82d      	bhi.n	8003650 <__ssputs_r+0x70>
 80035f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80035fc:	d026      	beq.n	800364c <__ssputs_r+0x6c>
 80035fe:	6965      	ldr	r5, [r4, #20]
 8003600:	6909      	ldr	r1, [r1, #16]
 8003602:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003606:	eba3 0901 	sub.w	r9, r3, r1
 800360a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800360e:	1c7b      	adds	r3, r7, #1
 8003610:	444b      	add	r3, r9
 8003612:	106d      	asrs	r5, r5, #1
 8003614:	429d      	cmp	r5, r3
 8003616:	bf38      	it	cc
 8003618:	461d      	movcc	r5, r3
 800361a:	0553      	lsls	r3, r2, #21
 800361c:	d527      	bpl.n	800366e <__ssputs_r+0x8e>
 800361e:	4629      	mov	r1, r5
 8003620:	f7ff ff52 	bl	80034c8 <_malloc_r>
 8003624:	4606      	mov	r6, r0
 8003626:	b360      	cbz	r0, 8003682 <__ssputs_r+0xa2>
 8003628:	6921      	ldr	r1, [r4, #16]
 800362a:	464a      	mov	r2, r9
 800362c:	f000 fae8 	bl	8003c00 <memcpy>
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363a:	81a3      	strh	r3, [r4, #12]
 800363c:	6126      	str	r6, [r4, #16]
 800363e:	6165      	str	r5, [r4, #20]
 8003640:	444e      	add	r6, r9
 8003642:	eba5 0509 	sub.w	r5, r5, r9
 8003646:	6026      	str	r6, [r4, #0]
 8003648:	60a5      	str	r5, [r4, #8]
 800364a:	463e      	mov	r6, r7
 800364c:	42be      	cmp	r6, r7
 800364e:	d900      	bls.n	8003652 <__ssputs_r+0x72>
 8003650:	463e      	mov	r6, r7
 8003652:	6820      	ldr	r0, [r4, #0]
 8003654:	4632      	mov	r2, r6
 8003656:	4641      	mov	r1, r8
 8003658:	f000 faa8 	bl	8003bac <memmove>
 800365c:	68a3      	ldr	r3, [r4, #8]
 800365e:	1b9b      	subs	r3, r3, r6
 8003660:	60a3      	str	r3, [r4, #8]
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	4433      	add	r3, r6
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	2000      	movs	r0, #0
 800366a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366e:	462a      	mov	r2, r5
 8003670:	f000 fad4 	bl	8003c1c <_realloc_r>
 8003674:	4606      	mov	r6, r0
 8003676:	2800      	cmp	r0, #0
 8003678:	d1e0      	bne.n	800363c <__ssputs_r+0x5c>
 800367a:	6921      	ldr	r1, [r4, #16]
 800367c:	4650      	mov	r0, sl
 800367e:	f7ff feb7 	bl	80033f0 <_free_r>
 8003682:	230c      	movs	r3, #12
 8003684:	f8ca 3000 	str.w	r3, [sl]
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800368e:	81a3      	strh	r3, [r4, #12]
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	e7e9      	b.n	800366a <__ssputs_r+0x8a>
	...

08003698 <_svfiprintf_r>:
 8003698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800369c:	4698      	mov	r8, r3
 800369e:	898b      	ldrh	r3, [r1, #12]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	b09d      	sub	sp, #116	@ 0x74
 80036a4:	4607      	mov	r7, r0
 80036a6:	460d      	mov	r5, r1
 80036a8:	4614      	mov	r4, r2
 80036aa:	d510      	bpl.n	80036ce <_svfiprintf_r+0x36>
 80036ac:	690b      	ldr	r3, [r1, #16]
 80036ae:	b973      	cbnz	r3, 80036ce <_svfiprintf_r+0x36>
 80036b0:	2140      	movs	r1, #64	@ 0x40
 80036b2:	f7ff ff09 	bl	80034c8 <_malloc_r>
 80036b6:	6028      	str	r0, [r5, #0]
 80036b8:	6128      	str	r0, [r5, #16]
 80036ba:	b930      	cbnz	r0, 80036ca <_svfiprintf_r+0x32>
 80036bc:	230c      	movs	r3, #12
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	b01d      	add	sp, #116	@ 0x74
 80036c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ca:	2340      	movs	r3, #64	@ 0x40
 80036cc:	616b      	str	r3, [r5, #20]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80036d2:	2320      	movs	r3, #32
 80036d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80036dc:	2330      	movs	r3, #48	@ 0x30
 80036de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800387c <_svfiprintf_r+0x1e4>
 80036e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036e6:	f04f 0901 	mov.w	r9, #1
 80036ea:	4623      	mov	r3, r4
 80036ec:	469a      	mov	sl, r3
 80036ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036f2:	b10a      	cbz	r2, 80036f8 <_svfiprintf_r+0x60>
 80036f4:	2a25      	cmp	r2, #37	@ 0x25
 80036f6:	d1f9      	bne.n	80036ec <_svfiprintf_r+0x54>
 80036f8:	ebba 0b04 	subs.w	fp, sl, r4
 80036fc:	d00b      	beq.n	8003716 <_svfiprintf_r+0x7e>
 80036fe:	465b      	mov	r3, fp
 8003700:	4622      	mov	r2, r4
 8003702:	4629      	mov	r1, r5
 8003704:	4638      	mov	r0, r7
 8003706:	f7ff ff6b 	bl	80035e0 <__ssputs_r>
 800370a:	3001      	adds	r0, #1
 800370c:	f000 80a7 	beq.w	800385e <_svfiprintf_r+0x1c6>
 8003710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003712:	445a      	add	r2, fp
 8003714:	9209      	str	r2, [sp, #36]	@ 0x24
 8003716:	f89a 3000 	ldrb.w	r3, [sl]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 809f 	beq.w	800385e <_svfiprintf_r+0x1c6>
 8003720:	2300      	movs	r3, #0
 8003722:	f04f 32ff 	mov.w	r2, #4294967295
 8003726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800372a:	f10a 0a01 	add.w	sl, sl, #1
 800372e:	9304      	str	r3, [sp, #16]
 8003730:	9307      	str	r3, [sp, #28]
 8003732:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003736:	931a      	str	r3, [sp, #104]	@ 0x68
 8003738:	4654      	mov	r4, sl
 800373a:	2205      	movs	r2, #5
 800373c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003740:	484e      	ldr	r0, [pc, #312]	@ (800387c <_svfiprintf_r+0x1e4>)
 8003742:	f7fc fd4d 	bl	80001e0 <memchr>
 8003746:	9a04      	ldr	r2, [sp, #16]
 8003748:	b9d8      	cbnz	r0, 8003782 <_svfiprintf_r+0xea>
 800374a:	06d0      	lsls	r0, r2, #27
 800374c:	bf44      	itt	mi
 800374e:	2320      	movmi	r3, #32
 8003750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003754:	0711      	lsls	r1, r2, #28
 8003756:	bf44      	itt	mi
 8003758:	232b      	movmi	r3, #43	@ 0x2b
 800375a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800375e:	f89a 3000 	ldrb.w	r3, [sl]
 8003762:	2b2a      	cmp	r3, #42	@ 0x2a
 8003764:	d015      	beq.n	8003792 <_svfiprintf_r+0xfa>
 8003766:	9a07      	ldr	r2, [sp, #28]
 8003768:	4654      	mov	r4, sl
 800376a:	2000      	movs	r0, #0
 800376c:	f04f 0c0a 	mov.w	ip, #10
 8003770:	4621      	mov	r1, r4
 8003772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003776:	3b30      	subs	r3, #48	@ 0x30
 8003778:	2b09      	cmp	r3, #9
 800377a:	d94b      	bls.n	8003814 <_svfiprintf_r+0x17c>
 800377c:	b1b0      	cbz	r0, 80037ac <_svfiprintf_r+0x114>
 800377e:	9207      	str	r2, [sp, #28]
 8003780:	e014      	b.n	80037ac <_svfiprintf_r+0x114>
 8003782:	eba0 0308 	sub.w	r3, r0, r8
 8003786:	fa09 f303 	lsl.w	r3, r9, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	9304      	str	r3, [sp, #16]
 800378e:	46a2      	mov	sl, r4
 8003790:	e7d2      	b.n	8003738 <_svfiprintf_r+0xa0>
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	1d19      	adds	r1, r3, #4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	9103      	str	r1, [sp, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	bfbb      	ittet	lt
 800379e:	425b      	neglt	r3, r3
 80037a0:	f042 0202 	orrlt.w	r2, r2, #2
 80037a4:	9307      	strge	r3, [sp, #28]
 80037a6:	9307      	strlt	r3, [sp, #28]
 80037a8:	bfb8      	it	lt
 80037aa:	9204      	strlt	r2, [sp, #16]
 80037ac:	7823      	ldrb	r3, [r4, #0]
 80037ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80037b0:	d10a      	bne.n	80037c8 <_svfiprintf_r+0x130>
 80037b2:	7863      	ldrb	r3, [r4, #1]
 80037b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80037b6:	d132      	bne.n	800381e <_svfiprintf_r+0x186>
 80037b8:	9b03      	ldr	r3, [sp, #12]
 80037ba:	1d1a      	adds	r2, r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	9203      	str	r2, [sp, #12]
 80037c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037c4:	3402      	adds	r4, #2
 80037c6:	9305      	str	r3, [sp, #20]
 80037c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800388c <_svfiprintf_r+0x1f4>
 80037cc:	7821      	ldrb	r1, [r4, #0]
 80037ce:	2203      	movs	r2, #3
 80037d0:	4650      	mov	r0, sl
 80037d2:	f7fc fd05 	bl	80001e0 <memchr>
 80037d6:	b138      	cbz	r0, 80037e8 <_svfiprintf_r+0x150>
 80037d8:	9b04      	ldr	r3, [sp, #16]
 80037da:	eba0 000a 	sub.w	r0, r0, sl
 80037de:	2240      	movs	r2, #64	@ 0x40
 80037e0:	4082      	lsls	r2, r0
 80037e2:	4313      	orrs	r3, r2
 80037e4:	3401      	adds	r4, #1
 80037e6:	9304      	str	r3, [sp, #16]
 80037e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ec:	4824      	ldr	r0, [pc, #144]	@ (8003880 <_svfiprintf_r+0x1e8>)
 80037ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037f2:	2206      	movs	r2, #6
 80037f4:	f7fc fcf4 	bl	80001e0 <memchr>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d036      	beq.n	800386a <_svfiprintf_r+0x1d2>
 80037fc:	4b21      	ldr	r3, [pc, #132]	@ (8003884 <_svfiprintf_r+0x1ec>)
 80037fe:	bb1b      	cbnz	r3, 8003848 <_svfiprintf_r+0x1b0>
 8003800:	9b03      	ldr	r3, [sp, #12]
 8003802:	3307      	adds	r3, #7
 8003804:	f023 0307 	bic.w	r3, r3, #7
 8003808:	3308      	adds	r3, #8
 800380a:	9303      	str	r3, [sp, #12]
 800380c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800380e:	4433      	add	r3, r6
 8003810:	9309      	str	r3, [sp, #36]	@ 0x24
 8003812:	e76a      	b.n	80036ea <_svfiprintf_r+0x52>
 8003814:	fb0c 3202 	mla	r2, ip, r2, r3
 8003818:	460c      	mov	r4, r1
 800381a:	2001      	movs	r0, #1
 800381c:	e7a8      	b.n	8003770 <_svfiprintf_r+0xd8>
 800381e:	2300      	movs	r3, #0
 8003820:	3401      	adds	r4, #1
 8003822:	9305      	str	r3, [sp, #20]
 8003824:	4619      	mov	r1, r3
 8003826:	f04f 0c0a 	mov.w	ip, #10
 800382a:	4620      	mov	r0, r4
 800382c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003830:	3a30      	subs	r2, #48	@ 0x30
 8003832:	2a09      	cmp	r2, #9
 8003834:	d903      	bls.n	800383e <_svfiprintf_r+0x1a6>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0c6      	beq.n	80037c8 <_svfiprintf_r+0x130>
 800383a:	9105      	str	r1, [sp, #20]
 800383c:	e7c4      	b.n	80037c8 <_svfiprintf_r+0x130>
 800383e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003842:	4604      	mov	r4, r0
 8003844:	2301      	movs	r3, #1
 8003846:	e7f0      	b.n	800382a <_svfiprintf_r+0x192>
 8003848:	ab03      	add	r3, sp, #12
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	462a      	mov	r2, r5
 800384e:	4b0e      	ldr	r3, [pc, #56]	@ (8003888 <_svfiprintf_r+0x1f0>)
 8003850:	a904      	add	r1, sp, #16
 8003852:	4638      	mov	r0, r7
 8003854:	f3af 8000 	nop.w
 8003858:	1c42      	adds	r2, r0, #1
 800385a:	4606      	mov	r6, r0
 800385c:	d1d6      	bne.n	800380c <_svfiprintf_r+0x174>
 800385e:	89ab      	ldrh	r3, [r5, #12]
 8003860:	065b      	lsls	r3, r3, #25
 8003862:	f53f af2d 	bmi.w	80036c0 <_svfiprintf_r+0x28>
 8003866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003868:	e72c      	b.n	80036c4 <_svfiprintf_r+0x2c>
 800386a:	ab03      	add	r3, sp, #12
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	462a      	mov	r2, r5
 8003870:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <_svfiprintf_r+0x1f0>)
 8003872:	a904      	add	r1, sp, #16
 8003874:	4638      	mov	r0, r7
 8003876:	f000 f879 	bl	800396c <_printf_i>
 800387a:	e7ed      	b.n	8003858 <_svfiprintf_r+0x1c0>
 800387c:	08003e08 	.word	0x08003e08
 8003880:	08003e12 	.word	0x08003e12
 8003884:	00000000 	.word	0x00000000
 8003888:	080035e1 	.word	0x080035e1
 800388c:	08003e0e 	.word	0x08003e0e

08003890 <_printf_common>:
 8003890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003894:	4616      	mov	r6, r2
 8003896:	4698      	mov	r8, r3
 8003898:	688a      	ldr	r2, [r1, #8]
 800389a:	690b      	ldr	r3, [r1, #16]
 800389c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038a0:	4293      	cmp	r3, r2
 80038a2:	bfb8      	it	lt
 80038a4:	4613      	movlt	r3, r2
 80038a6:	6033      	str	r3, [r6, #0]
 80038a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038ac:	4607      	mov	r7, r0
 80038ae:	460c      	mov	r4, r1
 80038b0:	b10a      	cbz	r2, 80038b6 <_printf_common+0x26>
 80038b2:	3301      	adds	r3, #1
 80038b4:	6033      	str	r3, [r6, #0]
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	0699      	lsls	r1, r3, #26
 80038ba:	bf42      	ittt	mi
 80038bc:	6833      	ldrmi	r3, [r6, #0]
 80038be:	3302      	addmi	r3, #2
 80038c0:	6033      	strmi	r3, [r6, #0]
 80038c2:	6825      	ldr	r5, [r4, #0]
 80038c4:	f015 0506 	ands.w	r5, r5, #6
 80038c8:	d106      	bne.n	80038d8 <_printf_common+0x48>
 80038ca:	f104 0a19 	add.w	sl, r4, #25
 80038ce:	68e3      	ldr	r3, [r4, #12]
 80038d0:	6832      	ldr	r2, [r6, #0]
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	42ab      	cmp	r3, r5
 80038d6:	dc26      	bgt.n	8003926 <_printf_common+0x96>
 80038d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	3b00      	subs	r3, #0
 80038e0:	bf18      	it	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	0692      	lsls	r2, r2, #26
 80038e6:	d42b      	bmi.n	8003940 <_printf_common+0xb0>
 80038e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038ec:	4641      	mov	r1, r8
 80038ee:	4638      	mov	r0, r7
 80038f0:	47c8      	blx	r9
 80038f2:	3001      	adds	r0, #1
 80038f4:	d01e      	beq.n	8003934 <_printf_common+0xa4>
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	6922      	ldr	r2, [r4, #16]
 80038fa:	f003 0306 	and.w	r3, r3, #6
 80038fe:	2b04      	cmp	r3, #4
 8003900:	bf02      	ittt	eq
 8003902:	68e5      	ldreq	r5, [r4, #12]
 8003904:	6833      	ldreq	r3, [r6, #0]
 8003906:	1aed      	subeq	r5, r5, r3
 8003908:	68a3      	ldr	r3, [r4, #8]
 800390a:	bf0c      	ite	eq
 800390c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003910:	2500      	movne	r5, #0
 8003912:	4293      	cmp	r3, r2
 8003914:	bfc4      	itt	gt
 8003916:	1a9b      	subgt	r3, r3, r2
 8003918:	18ed      	addgt	r5, r5, r3
 800391a:	2600      	movs	r6, #0
 800391c:	341a      	adds	r4, #26
 800391e:	42b5      	cmp	r5, r6
 8003920:	d11a      	bne.n	8003958 <_printf_common+0xc8>
 8003922:	2000      	movs	r0, #0
 8003924:	e008      	b.n	8003938 <_printf_common+0xa8>
 8003926:	2301      	movs	r3, #1
 8003928:	4652      	mov	r2, sl
 800392a:	4641      	mov	r1, r8
 800392c:	4638      	mov	r0, r7
 800392e:	47c8      	blx	r9
 8003930:	3001      	adds	r0, #1
 8003932:	d103      	bne.n	800393c <_printf_common+0xac>
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393c:	3501      	adds	r5, #1
 800393e:	e7c6      	b.n	80038ce <_printf_common+0x3e>
 8003940:	18e1      	adds	r1, r4, r3
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	2030      	movs	r0, #48	@ 0x30
 8003946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800394a:	4422      	add	r2, r4
 800394c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003954:	3302      	adds	r3, #2
 8003956:	e7c7      	b.n	80038e8 <_printf_common+0x58>
 8003958:	2301      	movs	r3, #1
 800395a:	4622      	mov	r2, r4
 800395c:	4641      	mov	r1, r8
 800395e:	4638      	mov	r0, r7
 8003960:	47c8      	blx	r9
 8003962:	3001      	adds	r0, #1
 8003964:	d0e6      	beq.n	8003934 <_printf_common+0xa4>
 8003966:	3601      	adds	r6, #1
 8003968:	e7d9      	b.n	800391e <_printf_common+0x8e>
	...

0800396c <_printf_i>:
 800396c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003970:	7e0f      	ldrb	r7, [r1, #24]
 8003972:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003974:	2f78      	cmp	r7, #120	@ 0x78
 8003976:	4691      	mov	r9, r2
 8003978:	4680      	mov	r8, r0
 800397a:	460c      	mov	r4, r1
 800397c:	469a      	mov	sl, r3
 800397e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003982:	d807      	bhi.n	8003994 <_printf_i+0x28>
 8003984:	2f62      	cmp	r7, #98	@ 0x62
 8003986:	d80a      	bhi.n	800399e <_printf_i+0x32>
 8003988:	2f00      	cmp	r7, #0
 800398a:	f000 80d2 	beq.w	8003b32 <_printf_i+0x1c6>
 800398e:	2f58      	cmp	r7, #88	@ 0x58
 8003990:	f000 80b9 	beq.w	8003b06 <_printf_i+0x19a>
 8003994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800399c:	e03a      	b.n	8003a14 <_printf_i+0xa8>
 800399e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039a2:	2b15      	cmp	r3, #21
 80039a4:	d8f6      	bhi.n	8003994 <_printf_i+0x28>
 80039a6:	a101      	add	r1, pc, #4	@ (adr r1, 80039ac <_printf_i+0x40>)
 80039a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039ac:	08003a05 	.word	0x08003a05
 80039b0:	08003a19 	.word	0x08003a19
 80039b4:	08003995 	.word	0x08003995
 80039b8:	08003995 	.word	0x08003995
 80039bc:	08003995 	.word	0x08003995
 80039c0:	08003995 	.word	0x08003995
 80039c4:	08003a19 	.word	0x08003a19
 80039c8:	08003995 	.word	0x08003995
 80039cc:	08003995 	.word	0x08003995
 80039d0:	08003995 	.word	0x08003995
 80039d4:	08003995 	.word	0x08003995
 80039d8:	08003b19 	.word	0x08003b19
 80039dc:	08003a43 	.word	0x08003a43
 80039e0:	08003ad3 	.word	0x08003ad3
 80039e4:	08003995 	.word	0x08003995
 80039e8:	08003995 	.word	0x08003995
 80039ec:	08003b3b 	.word	0x08003b3b
 80039f0:	08003995 	.word	0x08003995
 80039f4:	08003a43 	.word	0x08003a43
 80039f8:	08003995 	.word	0x08003995
 80039fc:	08003995 	.word	0x08003995
 8003a00:	08003adb 	.word	0x08003adb
 8003a04:	6833      	ldr	r3, [r6, #0]
 8003a06:	1d1a      	adds	r2, r3, #4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6032      	str	r2, [r6, #0]
 8003a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a14:	2301      	movs	r3, #1
 8003a16:	e09d      	b.n	8003b54 <_printf_i+0x1e8>
 8003a18:	6833      	ldr	r3, [r6, #0]
 8003a1a:	6820      	ldr	r0, [r4, #0]
 8003a1c:	1d19      	adds	r1, r3, #4
 8003a1e:	6031      	str	r1, [r6, #0]
 8003a20:	0606      	lsls	r6, r0, #24
 8003a22:	d501      	bpl.n	8003a28 <_printf_i+0xbc>
 8003a24:	681d      	ldr	r5, [r3, #0]
 8003a26:	e003      	b.n	8003a30 <_printf_i+0xc4>
 8003a28:	0645      	lsls	r5, r0, #25
 8003a2a:	d5fb      	bpl.n	8003a24 <_printf_i+0xb8>
 8003a2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a30:	2d00      	cmp	r5, #0
 8003a32:	da03      	bge.n	8003a3c <_printf_i+0xd0>
 8003a34:	232d      	movs	r3, #45	@ 0x2d
 8003a36:	426d      	negs	r5, r5
 8003a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a3c:	4859      	ldr	r0, [pc, #356]	@ (8003ba4 <_printf_i+0x238>)
 8003a3e:	230a      	movs	r3, #10
 8003a40:	e011      	b.n	8003a66 <_printf_i+0xfa>
 8003a42:	6821      	ldr	r1, [r4, #0]
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	0608      	lsls	r0, r1, #24
 8003a48:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a4c:	d402      	bmi.n	8003a54 <_printf_i+0xe8>
 8003a4e:	0649      	lsls	r1, r1, #25
 8003a50:	bf48      	it	mi
 8003a52:	b2ad      	uxthmi	r5, r5
 8003a54:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a56:	4853      	ldr	r0, [pc, #332]	@ (8003ba4 <_printf_i+0x238>)
 8003a58:	6033      	str	r3, [r6, #0]
 8003a5a:	bf14      	ite	ne
 8003a5c:	230a      	movne	r3, #10
 8003a5e:	2308      	moveq	r3, #8
 8003a60:	2100      	movs	r1, #0
 8003a62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a66:	6866      	ldr	r6, [r4, #4]
 8003a68:	60a6      	str	r6, [r4, #8]
 8003a6a:	2e00      	cmp	r6, #0
 8003a6c:	bfa2      	ittt	ge
 8003a6e:	6821      	ldrge	r1, [r4, #0]
 8003a70:	f021 0104 	bicge.w	r1, r1, #4
 8003a74:	6021      	strge	r1, [r4, #0]
 8003a76:	b90d      	cbnz	r5, 8003a7c <_printf_i+0x110>
 8003a78:	2e00      	cmp	r6, #0
 8003a7a:	d04b      	beq.n	8003b14 <_printf_i+0x1a8>
 8003a7c:	4616      	mov	r6, r2
 8003a7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a82:	fb03 5711 	mls	r7, r3, r1, r5
 8003a86:	5dc7      	ldrb	r7, [r0, r7]
 8003a88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a8c:	462f      	mov	r7, r5
 8003a8e:	42bb      	cmp	r3, r7
 8003a90:	460d      	mov	r5, r1
 8003a92:	d9f4      	bls.n	8003a7e <_printf_i+0x112>
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d10b      	bne.n	8003ab0 <_printf_i+0x144>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	07df      	lsls	r7, r3, #31
 8003a9c:	d508      	bpl.n	8003ab0 <_printf_i+0x144>
 8003a9e:	6923      	ldr	r3, [r4, #16]
 8003aa0:	6861      	ldr	r1, [r4, #4]
 8003aa2:	4299      	cmp	r1, r3
 8003aa4:	bfde      	ittt	le
 8003aa6:	2330      	movle	r3, #48	@ 0x30
 8003aa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003aac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ab0:	1b92      	subs	r2, r2, r6
 8003ab2:	6122      	str	r2, [r4, #16]
 8003ab4:	f8cd a000 	str.w	sl, [sp]
 8003ab8:	464b      	mov	r3, r9
 8003aba:	aa03      	add	r2, sp, #12
 8003abc:	4621      	mov	r1, r4
 8003abe:	4640      	mov	r0, r8
 8003ac0:	f7ff fee6 	bl	8003890 <_printf_common>
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d14a      	bne.n	8003b5e <_printf_i+0x1f2>
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	b004      	add	sp, #16
 8003ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	f043 0320 	orr.w	r3, r3, #32
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	4833      	ldr	r0, [pc, #204]	@ (8003ba8 <_printf_i+0x23c>)
 8003adc:	2778      	movs	r7, #120	@ 0x78
 8003ade:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	6831      	ldr	r1, [r6, #0]
 8003ae6:	061f      	lsls	r7, r3, #24
 8003ae8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003aec:	d402      	bmi.n	8003af4 <_printf_i+0x188>
 8003aee:	065f      	lsls	r7, r3, #25
 8003af0:	bf48      	it	mi
 8003af2:	b2ad      	uxthmi	r5, r5
 8003af4:	6031      	str	r1, [r6, #0]
 8003af6:	07d9      	lsls	r1, r3, #31
 8003af8:	bf44      	itt	mi
 8003afa:	f043 0320 	orrmi.w	r3, r3, #32
 8003afe:	6023      	strmi	r3, [r4, #0]
 8003b00:	b11d      	cbz	r5, 8003b0a <_printf_i+0x19e>
 8003b02:	2310      	movs	r3, #16
 8003b04:	e7ac      	b.n	8003a60 <_printf_i+0xf4>
 8003b06:	4827      	ldr	r0, [pc, #156]	@ (8003ba4 <_printf_i+0x238>)
 8003b08:	e7e9      	b.n	8003ade <_printf_i+0x172>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	f023 0320 	bic.w	r3, r3, #32
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	e7f6      	b.n	8003b02 <_printf_i+0x196>
 8003b14:	4616      	mov	r6, r2
 8003b16:	e7bd      	b.n	8003a94 <_printf_i+0x128>
 8003b18:	6833      	ldr	r3, [r6, #0]
 8003b1a:	6825      	ldr	r5, [r4, #0]
 8003b1c:	6961      	ldr	r1, [r4, #20]
 8003b1e:	1d18      	adds	r0, r3, #4
 8003b20:	6030      	str	r0, [r6, #0]
 8003b22:	062e      	lsls	r6, r5, #24
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	d501      	bpl.n	8003b2c <_printf_i+0x1c0>
 8003b28:	6019      	str	r1, [r3, #0]
 8003b2a:	e002      	b.n	8003b32 <_printf_i+0x1c6>
 8003b2c:	0668      	lsls	r0, r5, #25
 8003b2e:	d5fb      	bpl.n	8003b28 <_printf_i+0x1bc>
 8003b30:	8019      	strh	r1, [r3, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	6123      	str	r3, [r4, #16]
 8003b36:	4616      	mov	r6, r2
 8003b38:	e7bc      	b.n	8003ab4 <_printf_i+0x148>
 8003b3a:	6833      	ldr	r3, [r6, #0]
 8003b3c:	1d1a      	adds	r2, r3, #4
 8003b3e:	6032      	str	r2, [r6, #0]
 8003b40:	681e      	ldr	r6, [r3, #0]
 8003b42:	6862      	ldr	r2, [r4, #4]
 8003b44:	2100      	movs	r1, #0
 8003b46:	4630      	mov	r0, r6
 8003b48:	f7fc fb4a 	bl	80001e0 <memchr>
 8003b4c:	b108      	cbz	r0, 8003b52 <_printf_i+0x1e6>
 8003b4e:	1b80      	subs	r0, r0, r6
 8003b50:	6060      	str	r0, [r4, #4]
 8003b52:	6863      	ldr	r3, [r4, #4]
 8003b54:	6123      	str	r3, [r4, #16]
 8003b56:	2300      	movs	r3, #0
 8003b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b5c:	e7aa      	b.n	8003ab4 <_printf_i+0x148>
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	4632      	mov	r2, r6
 8003b62:	4649      	mov	r1, r9
 8003b64:	4640      	mov	r0, r8
 8003b66:	47d0      	blx	sl
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d0ad      	beq.n	8003ac8 <_printf_i+0x15c>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	079b      	lsls	r3, r3, #30
 8003b70:	d413      	bmi.n	8003b9a <_printf_i+0x22e>
 8003b72:	68e0      	ldr	r0, [r4, #12]
 8003b74:	9b03      	ldr	r3, [sp, #12]
 8003b76:	4298      	cmp	r0, r3
 8003b78:	bfb8      	it	lt
 8003b7a:	4618      	movlt	r0, r3
 8003b7c:	e7a6      	b.n	8003acc <_printf_i+0x160>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	4632      	mov	r2, r6
 8003b82:	4649      	mov	r1, r9
 8003b84:	4640      	mov	r0, r8
 8003b86:	47d0      	blx	sl
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d09d      	beq.n	8003ac8 <_printf_i+0x15c>
 8003b8c:	3501      	adds	r5, #1
 8003b8e:	68e3      	ldr	r3, [r4, #12]
 8003b90:	9903      	ldr	r1, [sp, #12]
 8003b92:	1a5b      	subs	r3, r3, r1
 8003b94:	42ab      	cmp	r3, r5
 8003b96:	dcf2      	bgt.n	8003b7e <_printf_i+0x212>
 8003b98:	e7eb      	b.n	8003b72 <_printf_i+0x206>
 8003b9a:	2500      	movs	r5, #0
 8003b9c:	f104 0619 	add.w	r6, r4, #25
 8003ba0:	e7f5      	b.n	8003b8e <_printf_i+0x222>
 8003ba2:	bf00      	nop
 8003ba4:	08003e19 	.word	0x08003e19
 8003ba8:	08003e2a 	.word	0x08003e2a

08003bac <memmove>:
 8003bac:	4288      	cmp	r0, r1
 8003bae:	b510      	push	{r4, lr}
 8003bb0:	eb01 0402 	add.w	r4, r1, r2
 8003bb4:	d902      	bls.n	8003bbc <memmove+0x10>
 8003bb6:	4284      	cmp	r4, r0
 8003bb8:	4623      	mov	r3, r4
 8003bba:	d807      	bhi.n	8003bcc <memmove+0x20>
 8003bbc:	1e43      	subs	r3, r0, #1
 8003bbe:	42a1      	cmp	r1, r4
 8003bc0:	d008      	beq.n	8003bd4 <memmove+0x28>
 8003bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bca:	e7f8      	b.n	8003bbe <memmove+0x12>
 8003bcc:	4402      	add	r2, r0
 8003bce:	4601      	mov	r1, r0
 8003bd0:	428a      	cmp	r2, r1
 8003bd2:	d100      	bne.n	8003bd6 <memmove+0x2a>
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bde:	e7f7      	b.n	8003bd0 <memmove+0x24>

08003be0 <_sbrk_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	4d06      	ldr	r5, [pc, #24]	@ (8003bfc <_sbrk_r+0x1c>)
 8003be4:	2300      	movs	r3, #0
 8003be6:	4604      	mov	r4, r0
 8003be8:	4608      	mov	r0, r1
 8003bea:	602b      	str	r3, [r5, #0]
 8003bec:	f7fd fa46 	bl	800107c <_sbrk>
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d102      	bne.n	8003bfa <_sbrk_r+0x1a>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b103      	cbz	r3, 8003bfa <_sbrk_r+0x1a>
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	200002d8 	.word	0x200002d8

08003c00 <memcpy>:
 8003c00:	440a      	add	r2, r1
 8003c02:	4291      	cmp	r1, r2
 8003c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c08:	d100      	bne.n	8003c0c <memcpy+0xc>
 8003c0a:	4770      	bx	lr
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c16:	4291      	cmp	r1, r2
 8003c18:	d1f9      	bne.n	8003c0e <memcpy+0xe>
 8003c1a:	bd10      	pop	{r4, pc}

08003c1c <_realloc_r>:
 8003c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c20:	4680      	mov	r8, r0
 8003c22:	4615      	mov	r5, r2
 8003c24:	460c      	mov	r4, r1
 8003c26:	b921      	cbnz	r1, 8003c32 <_realloc_r+0x16>
 8003c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	f7ff bc4b 	b.w	80034c8 <_malloc_r>
 8003c32:	b92a      	cbnz	r2, 8003c40 <_realloc_r+0x24>
 8003c34:	f7ff fbdc 	bl	80033f0 <_free_r>
 8003c38:	2400      	movs	r4, #0
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c40:	f000 f81a 	bl	8003c78 <_malloc_usable_size_r>
 8003c44:	4285      	cmp	r5, r0
 8003c46:	4606      	mov	r6, r0
 8003c48:	d802      	bhi.n	8003c50 <_realloc_r+0x34>
 8003c4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003c4e:	d8f4      	bhi.n	8003c3a <_realloc_r+0x1e>
 8003c50:	4629      	mov	r1, r5
 8003c52:	4640      	mov	r0, r8
 8003c54:	f7ff fc38 	bl	80034c8 <_malloc_r>
 8003c58:	4607      	mov	r7, r0
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d0ec      	beq.n	8003c38 <_realloc_r+0x1c>
 8003c5e:	42b5      	cmp	r5, r6
 8003c60:	462a      	mov	r2, r5
 8003c62:	4621      	mov	r1, r4
 8003c64:	bf28      	it	cs
 8003c66:	4632      	movcs	r2, r6
 8003c68:	f7ff ffca 	bl	8003c00 <memcpy>
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	4640      	mov	r0, r8
 8003c70:	f7ff fbbe 	bl	80033f0 <_free_r>
 8003c74:	463c      	mov	r4, r7
 8003c76:	e7e0      	b.n	8003c3a <_realloc_r+0x1e>

08003c78 <_malloc_usable_size_r>:
 8003c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c7c:	1f18      	subs	r0, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bfbc      	itt	lt
 8003c82:	580b      	ldrlt	r3, [r1, r0]
 8003c84:	18c0      	addlt	r0, r0, r3
 8003c86:	4770      	bx	lr

08003c88 <_init>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	bf00      	nop
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr

08003c94 <_fini>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	bf00      	nop
 8003c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9a:	bc08      	pop	{r3}
 8003c9c:	469e      	mov	lr, r3
 8003c9e:	4770      	bx	lr
